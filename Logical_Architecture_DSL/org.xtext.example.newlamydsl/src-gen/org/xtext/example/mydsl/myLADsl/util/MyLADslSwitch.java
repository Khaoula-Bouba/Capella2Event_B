/**
 * generated by Xtext 2.22.0
 */
package org.xtext.example.mydsl.myLADsl.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.xtext.example.mydsl.myLADsl.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.xtext.example.mydsl.myLADsl.MyLADslPackage
 * @generated
 */
public class MyLADslSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MyLADslPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyLADslSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = MyLADslPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case MyLADslPackage.LOGICAL_ARCHITECTURE:
      {
        LogicalArchitecture logicalArchitecture = (LogicalArchitecture)theEObject;
        T result = caseLogicalArchitecture(logicalArchitecture);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.PROPERTY_VALUE_PKG:
      {
        PropertyValuePkg propertyValuePkg = (PropertyValuePkg)theEObject;
        T result = casePropertyValuePkg(propertyValuePkg);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.ABSTRACT_PROPERTY_VALUE:
      {
        AbstractPropertyValue abstractPropertyValue = (AbstractPropertyValue)theEObject;
        T result = caseAbstractPropertyValue(abstractPropertyValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.ENUMERATION_PROPERTY_TYPE:
      {
        EnumerationPropertyType enumerationPropertyType = (EnumerationPropertyType)theEObject;
        T result = caseEnumerationPropertyType(enumerationPropertyType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.PROPERTY_VALUE_GROUP:
      {
        PropertyValueGroup propertyValueGroup = (PropertyValueGroup)theEObject;
        T result = casePropertyValueGroup(propertyValueGroup);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.TRACE:
      {
        Trace trace = (Trace)theEObject;
        T result = caseTrace(trace);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.ENUMERATION_PROPERTY_LITERAL:
      {
        EnumerationPropertyLiteral enumerationPropertyLiteral = (EnumerationPropertyLiteral)theEObject;
        T result = caseEnumerationPropertyLiteral(enumerationPropertyLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.LOGICAL_FUNCTION_PKG:
      {
        LogicalFunctionPkg logicalFunctionPkg = (LogicalFunctionPkg)theEObject;
        T result = caseLogicalFunctionPkg(logicalFunctionPkg);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.EXCHANGE_CATEGORY:
      {
        ExchangeCategory exchangeCategory = (ExchangeCategory)theEObject;
        T result = caseExchangeCategory(exchangeCategory);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.FUNCTION_SPECIFICATION:
      {
        FunctionSpecification functionSpecification = (FunctionSpecification)theEObject;
        T result = caseFunctionSpecification(functionSpecification);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.ACTIVITY_NODE:
      {
        ActivityNode activityNode = (ActivityNode)theEObject;
        T result = caseActivityNode(activityNode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.ACTIVITY_GROUP:
      {
        ActivityGroup activityGroup = (ActivityGroup)theEObject;
        T result = caseActivityGroup(activityGroup);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.ACTIVITY_EDGE:
      {
        ActivityEdge activityEdge = (ActivityEdge)theEObject;
        T result = caseActivityEdge(activityEdge);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.EXCHANGE_SPECIFICATION_REALIZATION:
      {
        ExchangeSpecificationRealization exchangeSpecificationRealization = (ExchangeSpecificationRealization)theEObject;
        T result = caseExchangeSpecificationRealization(exchangeSpecificationRealization);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.FUNCTIONAL_EXCHANGE_SPECIFICATION:
      {
        FunctionalExchangeSpecification functionalExchangeSpecification = (FunctionalExchangeSpecification)theEObject;
        T result = caseFunctionalExchangeSpecification(functionalExchangeSpecification);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.LOGICAL_FUNCTION:
      {
        LogicalFunction logicalFunction = (LogicalFunction)theEObject;
        T result = caseLogicalFunction(logicalFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.EXCHANGE_LINK:
      {
        ExchangeLink exchangeLink = (ExchangeLink)theEObject;
        T result = caseExchangeLink(exchangeLink);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.EXCHANGE_CONTAINMENT:
      {
        ExchangeContainment exchangeContainment = (ExchangeContainment)theEObject;
        T result = caseExchangeContainment(exchangeContainment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.FUNCTIONAL_CHAIN:
      {
        FunctionalChain functionalChain = (FunctionalChain)theEObject;
        T result = caseFunctionalChain(functionalChain);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.FUNCTIONAL_CHAIN_REALIZATION:
      {
        FunctionalChainRealization functionalChainRealization = (FunctionalChainRealization)theEObject;
        T result = caseFunctionalChainRealization(functionalChainRealization);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.CONTROL_NODE:
      {
        ControlNode controlNode = (ControlNode)theEObject;
        T result = caseControlNode(controlNode);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.SEQUENCE_LINK:
      {
        SequenceLink sequenceLink = (SequenceLink)theEObject;
        T result = caseSequenceLink(sequenceLink);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.FUNCTIONAL_CHAIN_INVOLVEMENT:
      {
        FunctionalChainInvolvement functionalChainInvolvement = (FunctionalChainInvolvement)theEObject;
        T result = caseFunctionalChainInvolvement(functionalChainInvolvement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.EXCEPTION_HANDLER:
      {
        ExceptionHandler exceptionHandler = (ExceptionHandler)theEObject;
        T result = caseExceptionHandler(exceptionHandler);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.ABSTRACT_FUNCTION:
      {
        AbstractFunction abstractFunction = (AbstractFunction)theEObject;
        T result = caseAbstractFunction(abstractFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.CONSTRAINT:
      {
        Constraint constraint = (Constraint)theEObject;
        T result = caseConstraint(constraint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.INITIALIZATION:
      {
        Initialization initialization = (Initialization)theEObject;
        T result = caseInitialization(initialization);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.INVARIANT:
      {
        Invariant invariant = (Invariant)theEObject;
        T result = caseInvariant(invariant);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.OPAQUE_EXPRESSION:
      {
        OpaqueExpression opaqueExpression = (OpaqueExpression)theEObject;
        T result = caseOpaqueExpression(opaqueExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.INPUT_OUTPUT_PIN:
      {
        InputOutputPin inputOutputPin = (InputOutputPin)theEObject;
        T result = caseInputOutputPin(inputOutputPin);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.PORT_REALIZATION:
      {
        PortRealization portRealization = (PortRealization)theEObject;
        T result = casePortRealization(portRealization);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.PORT_ALLOCATION:
      {
        PortAllocation portAllocation = (PortAllocation)theEObject;
        T result = casePortAllocation(portAllocation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.VALUE_SPECIFICATION:
      {
        ValueSpecification valueSpecification = (ValueSpecification)theEObject;
        T result = caseValueSpecification(valueSpecification);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.FUNCTIONAL_EXCHANGE:
      {
        FunctionalExchange functionalExchange = (FunctionalExchange)theEObject;
        T result = caseFunctionalExchange(functionalExchange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.FUNCTIONAL_EXCHANGE_REALIZATION:
      {
        FunctionalExchangeRealization functionalExchangeRealization = (FunctionalExchangeRealization)theEObject;
        T result = caseFunctionalExchangeRealization(functionalExchangeRealization);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.FUNCTION_REALIZATION:
      {
        FunctionRealization functionRealization = (FunctionRealization)theEObject;
        T result = caseFunctionRealization(functionRealization);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.DATA_VALUE:
      {
        DataValue dataValue = (DataValue)theEObject;
        T result = caseDataValue(dataValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.VALUE_TAG:
      {
        ValueTag valueTag = (ValueTag)theEObject;
        T result = caseValueTag(valueTag);
        if (result == null) result = caseDataValue(valueTag);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.COMPONENT_EXCHANGE:
      {
        ComponentExchange componentExchange = (ComponentExchange)theEObject;
        T result = caseComponentExchange(componentExchange);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.COMPONENT_EXCHANGE_REALIZATION:
      {
        ComponentExchangeRealization componentExchangeRealization = (ComponentExchangeRealization)theEObject;
        T result = caseComponentExchangeRealization(componentExchangeRealization);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.COMPONENT_EXCHANGE_CATEGORY:
      {
        ComponentExchangeCategory componentExchangeCategory = (ComponentExchangeCategory)theEObject;
        T result = caseComponentExchangeCategory(componentExchangeCategory);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.COMPONENT_EXCHANGE_FUNCTIONAL_EXCHANGE_ALLOCATION:
      {
        ComponentExchangeFunctionalExchangeAllocation componentExchangeFunctionalExchangeAllocation = (ComponentExchangeFunctionalExchangeAllocation)theEObject;
        T result = caseComponentExchangeFunctionalExchangeAllocation(componentExchangeFunctionalExchangeAllocation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.COMPONENT_EXCHANGE_END:
      {
        ComponentExchangeEnd componentExchangeEnd = (ComponentExchangeEnd)theEObject;
        T result = caseComponentExchangeEnd(componentExchangeEnd);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.COMPONENT_FUNCTIONAL_ALLOCATION:
      {
        ComponentFunctionalAllocation componentFunctionalAllocation = (ComponentFunctionalAllocation)theEObject;
        T result = caseComponentFunctionalAllocation(componentFunctionalAllocation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.ABSTRACT_CAPABILITY_PKG:
      {
        AbstractCapabilityPkg abstractCapabilityPkg = (AbstractCapabilityPkg)theEObject;
        T result = caseAbstractCapabilityPkg(abstractCapabilityPkg);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.SYSTEM_ANALYSIS_REALIZATION:
      {
        SystemAnalysisRealization systemAnalysisRealization = (SystemAnalysisRealization)theEObject;
        T result = caseSystemAnalysisRealization(systemAnalysisRealization);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.REQUIREMENTS_PKG:
      {
        RequirementsPkg requirementsPkg = (RequirementsPkg)theEObject;
        T result = caseRequirementsPkg(requirementsPkg);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.REQUIREMENT:
      {
        Requirement requirement = (Requirement)theEObject;
        T result = caseRequirement(requirement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.INTERFACE_PKG:
      {
        InterfacePkg interfacePkg = (InterfacePkg)theEObject;
        T result = caseInterfacePkg(interfacePkg);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.MESSAGE_REFERENCE:
      {
        MessageReference messageReference = (MessageReference)theEObject;
        T result = caseMessageReference(messageReference);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.INTERFACE:
      {
        Interface interface_ = (Interface)theEObject;
        T result = caseInterface(interface_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.INTERFACE_ALLOCATION:
      {
        InterfaceAllocation interfaceAllocation = (InterfaceAllocation)theEObject;
        T result = caseInterfaceAllocation(interfaceAllocation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.EXCHANGE_ITEM_ALLOCATION:
      {
        ExchangeItemAllocation exchangeItemAllocation = (ExchangeItemAllocation)theEObject;
        T result = caseExchangeItemAllocation(exchangeItemAllocation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.EXCHANGE_ITEM:
      {
        ExchangeItem exchangeItem = (ExchangeItem)theEObject;
        T result = caseExchangeItem(exchangeItem);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.EXCHANGE_ITEM_ELEMENT:
      {
        ExchangeItemElement exchangeItemElement = (ExchangeItemElement)theEObject;
        T result = caseExchangeItemElement(exchangeItemElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.GENERALIZATION:
      {
        Generalization generalization = (Generalization)theEObject;
        T result = caseGeneralization(generalization);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.INFORMATION_REALIZATION:
      {
        InformationRealization informationRealization = (InformationRealization)theEObject;
        T result = caseInformationRealization(informationRealization);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.INTERFACE_IMPLEMENTATION:
      {
        InterfaceImplementation interfaceImplementation = (InterfaceImplementation)theEObject;
        T result = caseInterfaceImplementation(interfaceImplementation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.FEATURE:
      {
        Feature feature = (Feature)theEObject;
        T result = caseFeature(feature);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.LOGICAL_COMPONENT_PKG:
      {
        LogicalComponentPkg logicalComponentPkg = (LogicalComponentPkg)theEObject;
        T result = caseLogicalComponentPkg(logicalComponentPkg);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.STATE_MACHINE:
      {
        StateMachine stateMachine = (StateMachine)theEObject;
        T result = caseStateMachine(stateMachine);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.REGION:
      {
        Region region = (Region)theEObject;
        T result = caseRegion(region);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.STATE_TRANSITION:
      {
        StateTransition stateTransition = (StateTransition)theEObject;
        T result = caseStateTransition(stateTransition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.STATE_TRANSITION_REALIZATION:
      {
        StateTransitionRealization stateTransitionRealization = (StateTransitionRealization)theEObject;
        T result = caseStateTransitionRealization(stateTransitionRealization);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.PART:
      {
        Part part = (Part)theEObject;
        T result = casePart(part);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.ABSTRACT_DEPLOYMENT_LINK:
      {
        AbstractDeploymentLink abstractDeploymentLink = (AbstractDeploymentLink)theEObject;
        T result = caseAbstractDeploymentLink(abstractDeploymentLink);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.ABSTRACT_TYPE:
      {
        AbstractType abstractType = (AbstractType)theEObject;
        T result = caseAbstractType(abstractType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.PHYSICAL_LINK:
      {
        PhysicalLink physicalLink = (PhysicalLink)theEObject;
        T result = casePhysicalLink(physicalLink);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.COMPONENT_EXCHANGE_ALLOCATION:
      {
        ComponentExchangeAllocation componentExchangeAllocation = (ComponentExchangeAllocation)theEObject;
        T result = caseComponentExchangeAllocation(componentExchangeAllocation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.PHYSICAL_LINK_REALIZATION:
      {
        PhysicalLinkRealization physicalLinkRealization = (PhysicalLinkRealization)theEObject;
        T result = casePhysicalLinkRealization(physicalLinkRealization);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.PHYSICAL_LINK_END:
      {
        PhysicalLinkEnd physicalLinkEnd = (PhysicalLinkEnd)theEObject;
        T result = casePhysicalLinkEnd(physicalLinkEnd);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.PHYSICAL_LINK_CATEGORY:
      {
        PhysicalLinkCategory physicalLinkCategory = (PhysicalLinkCategory)theEObject;
        T result = casePhysicalLinkCategory(physicalLinkCategory);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.LOGICAL_COMPONENT:
      {
        LogicalComponent logicalComponent = (LogicalComponent)theEObject;
        T result = caseLogicalComponent(logicalComponent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.COMPONENT_REALIZATION:
      {
        ComponentRealization componentRealization = (ComponentRealization)theEObject;
        T result = caseComponentRealization(componentRealization);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.COMMUNICATION_LINK:
      {
        CommunicationLink communicationLink = (CommunicationLink)theEObject;
        T result = caseCommunicationLink(communicationLink);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.INTERFACE_USE:
      {
        InterfaceUse interfaceUse = (InterfaceUse)theEObject;
        T result = caseInterfaceUse(interfaceUse);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.PHYSICAL_PATH:
      {
        PhysicalPath physicalPath = (PhysicalPath)theEObject;
        T result = casePhysicalPath(physicalPath);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.PHYSICAL_PATH_INVOLVEMENT:
      {
        PhysicalPathInvolvement physicalPathInvolvement = (PhysicalPathInvolvement)theEObject;
        T result = casePhysicalPathInvolvement(physicalPathInvolvement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.PHYSICAL_PATH_REALIZATION:
      {
        PhysicalPathRealization physicalPathRealization = (PhysicalPathRealization)theEObject;
        T result = casePhysicalPathRealization(physicalPathRealization);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.DATA_PKG:
      {
        DataPkg dataPkg = (DataPkg)theEObject;
        T result = caseDataPkg(dataPkg);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.DATA_PKGS:
      {
        DataPkgs dataPkgs = (DataPkgs)theEObject;
        T result = caseDataPkgs(dataPkgs);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.MESSAGE:
      {
        Message message = (Message)theEObject;
        T result = caseMessage(message);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.DATA_TYPE:
      {
        DataType dataType = (DataType)theEObject;
        T result = caseDataType(dataType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.FUNCTIONAL_CHAIN_INVOLVEMENT_LINK:
      {
        FunctionalChainInvolvementLink functionalChainInvolvementLink = (FunctionalChainInvolvementLink)theEObject;
        T result = caseFunctionalChainInvolvementLink(functionalChainInvolvementLink);
        if (result == null) result = caseFunctionalChainInvolvement(functionalChainInvolvementLink);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyLADslPackage.FUNCTION_INPUT_PORT:
      {
        FunctionInputPort functionInputPort = (FunctionInputPort)theEObject;
        T result = caseFunctionInputPort(functionInputPort);
        if (result == null) result = caseInputOutputPin(functionInputPort);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Architecture</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Architecture</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalArchitecture(LogicalArchitecture object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Property Value Pkg</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Property Value Pkg</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePropertyValuePkg(PropertyValuePkg object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Abstract Property Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Abstract Property Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAbstractPropertyValue(AbstractPropertyValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enumeration Property Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enumeration Property Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnumerationPropertyType(EnumerationPropertyType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Property Value Group</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Property Value Group</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePropertyValueGroup(PropertyValueGroup object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Trace</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Trace</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTrace(Trace object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enumeration Property Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enumeration Property Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnumerationPropertyLiteral(EnumerationPropertyLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Function Pkg</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Function Pkg</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalFunctionPkg(LogicalFunctionPkg object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exchange Category</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exchange Category</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExchangeCategory(ExchangeCategory object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Specification</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Specification</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionSpecification(FunctionSpecification object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Activity Node</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Activity Node</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseActivityNode(ActivityNode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Activity Group</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Activity Group</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseActivityGroup(ActivityGroup object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Activity Edge</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Activity Edge</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseActivityEdge(ActivityEdge object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exchange Specification Realization</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exchange Specification Realization</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExchangeSpecificationRealization(ExchangeSpecificationRealization object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Functional Exchange Specification</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Functional Exchange Specification</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionalExchangeSpecification(FunctionalExchangeSpecification object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalFunction(LogicalFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exchange Link</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exchange Link</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExchangeLink(ExchangeLink object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exchange Containment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exchange Containment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExchangeContainment(ExchangeContainment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Functional Chain</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Functional Chain</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionalChain(FunctionalChain object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Functional Chain Realization</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Functional Chain Realization</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionalChainRealization(FunctionalChainRealization object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Control Node</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Control Node</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseControlNode(ControlNode object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sequence Link</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sequence Link</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSequenceLink(SequenceLink object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Functional Chain Involvement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Functional Chain Involvement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionalChainInvolvement(FunctionalChainInvolvement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exception Handler</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exception Handler</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExceptionHandler(ExceptionHandler object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Abstract Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Abstract Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAbstractFunction(AbstractFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Constraint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Constraint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConstraint(Constraint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Initialization</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Initialization</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInitialization(Initialization object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Invariant</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Invariant</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInvariant(Invariant object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Opaque Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Opaque Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOpaqueExpression(OpaqueExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Input Output Pin</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Input Output Pin</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInputOutputPin(InputOutputPin object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Port Realization</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Port Realization</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePortRealization(PortRealization object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Port Allocation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Port Allocation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePortAllocation(PortAllocation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Value Specification</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Value Specification</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseValueSpecification(ValueSpecification object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Functional Exchange</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Functional Exchange</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionalExchange(FunctionalExchange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Functional Exchange Realization</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Functional Exchange Realization</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionalExchangeRealization(FunctionalExchangeRealization object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Realization</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Realization</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionRealization(FunctionRealization object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Data Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Data Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDataValue(DataValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Value Tag</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Value Tag</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseValueTag(ValueTag object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Component Exchange</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Component Exchange</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComponentExchange(ComponentExchange object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Component Exchange Realization</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Component Exchange Realization</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComponentExchangeRealization(ComponentExchangeRealization object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Component Exchange Category</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Component Exchange Category</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComponentExchangeCategory(ComponentExchangeCategory object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Component Exchange Functional Exchange Allocation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Component Exchange Functional Exchange Allocation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComponentExchangeFunctionalExchangeAllocation(ComponentExchangeFunctionalExchangeAllocation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Component Exchange End</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Component Exchange End</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComponentExchangeEnd(ComponentExchangeEnd object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Component Functional Allocation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Component Functional Allocation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComponentFunctionalAllocation(ComponentFunctionalAllocation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Abstract Capability Pkg</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Abstract Capability Pkg</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAbstractCapabilityPkg(AbstractCapabilityPkg object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>System Analysis Realization</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>System Analysis Realization</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSystemAnalysisRealization(SystemAnalysisRealization object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Requirements Pkg</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Requirements Pkg</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRequirementsPkg(RequirementsPkg object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Requirement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Requirement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRequirement(Requirement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Interface Pkg</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Interface Pkg</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInterfacePkg(InterfacePkg object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Message Reference</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Message Reference</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMessageReference(MessageReference object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Interface</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Interface</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInterface(Interface object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Interface Allocation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Interface Allocation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInterfaceAllocation(InterfaceAllocation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exchange Item Allocation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exchange Item Allocation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExchangeItemAllocation(ExchangeItemAllocation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exchange Item</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exchange Item</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExchangeItem(ExchangeItem object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exchange Item Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exchange Item Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExchangeItemElement(ExchangeItemElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Generalization</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Generalization</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGeneralization(Generalization object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Information Realization</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Information Realization</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInformationRealization(InformationRealization object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Interface Implementation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Interface Implementation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInterfaceImplementation(InterfaceImplementation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Feature</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Feature</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFeature(Feature object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Component Pkg</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Component Pkg</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalComponentPkg(LogicalComponentPkg object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>State Machine</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>State Machine</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStateMachine(StateMachine object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Region</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Region</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRegion(Region object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>State Transition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>State Transition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStateTransition(StateTransition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>State Transition Realization</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>State Transition Realization</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStateTransitionRealization(StateTransitionRealization object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Part</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Part</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePart(Part object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Abstract Deployment Link</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Abstract Deployment Link</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAbstractDeploymentLink(AbstractDeploymentLink object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Abstract Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Abstract Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAbstractType(AbstractType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Physical Link</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Physical Link</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePhysicalLink(PhysicalLink object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Component Exchange Allocation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Component Exchange Allocation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComponentExchangeAllocation(ComponentExchangeAllocation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Physical Link Realization</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Physical Link Realization</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePhysicalLinkRealization(PhysicalLinkRealization object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Physical Link End</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Physical Link End</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePhysicalLinkEnd(PhysicalLinkEnd object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Physical Link Category</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Physical Link Category</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePhysicalLinkCategory(PhysicalLinkCategory object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Logical Component</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Logical Component</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLogicalComponent(LogicalComponent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Component Realization</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Component Realization</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComponentRealization(ComponentRealization object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Communication Link</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Communication Link</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseCommunicationLink(CommunicationLink object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Interface Use</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Interface Use</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInterfaceUse(InterfaceUse object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Physical Path</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Physical Path</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePhysicalPath(PhysicalPath object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Physical Path Involvement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Physical Path Involvement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePhysicalPathInvolvement(PhysicalPathInvolvement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Physical Path Realization</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Physical Path Realization</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePhysicalPathRealization(PhysicalPathRealization object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Data Pkg</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Data Pkg</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDataPkg(DataPkg object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Data Pkgs</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Data Pkgs</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDataPkgs(DataPkgs object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Message</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Message</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMessage(Message object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Data Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Data Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDataType(DataType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Functional Chain Involvement Link</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Functional Chain Involvement Link</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionalChainInvolvementLink(FunctionalChainInvolvementLink object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Input Port</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Input Port</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionInputPort(FunctionInputPort object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //MyLADslSwitch
