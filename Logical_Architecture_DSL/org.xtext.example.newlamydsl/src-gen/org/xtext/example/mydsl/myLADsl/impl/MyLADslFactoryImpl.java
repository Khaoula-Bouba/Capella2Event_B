/**
 * generated by Xtext 2.22.0
 */
package org.xtext.example.mydsl.myLADsl.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.mydsl.myLADsl.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MyLADslFactoryImpl extends EFactoryImpl implements MyLADslFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MyLADslFactory init()
  {
    try
    {
      MyLADslFactory theMyLADslFactory = (MyLADslFactory)EPackage.Registry.INSTANCE.getEFactory(MyLADslPackage.eNS_URI);
      if (theMyLADslFactory != null)
      {
        return theMyLADslFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MyLADslFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyLADslFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MyLADslPackage.LOGICAL_ARCHITECTURE: return createLogicalArchitecture();
      case MyLADslPackage.PROPERTY_VALUE_PKG: return createPropertyValuePkg();
      case MyLADslPackage.ABSTRACT_PROPERTY_VALUE: return createAbstractPropertyValue();
      case MyLADslPackage.ENUMERATION_PROPERTY_TYPE: return createEnumerationPropertyType();
      case MyLADslPackage.PROPERTY_VALUE_GROUP: return createPropertyValueGroup();
      case MyLADslPackage.TRACE: return createTrace();
      case MyLADslPackage.ENUMERATION_PROPERTY_LITERAL: return createEnumerationPropertyLiteral();
      case MyLADslPackage.LOGICAL_FUNCTION_PKG: return createLogicalFunctionPkg();
      case MyLADslPackage.EXCHANGE_CATEGORY: return createExchangeCategory();
      case MyLADslPackage.FUNCTION_SPECIFICATION: return createFunctionSpecification();
      case MyLADslPackage.ACTIVITY_NODE: return createActivityNode();
      case MyLADslPackage.ACTIVITY_GROUP: return createActivityGroup();
      case MyLADslPackage.ACTIVITY_EDGE: return createActivityEdge();
      case MyLADslPackage.EXCHANGE_SPECIFICATION_REALIZATION: return createExchangeSpecificationRealization();
      case MyLADslPackage.FUNCTIONAL_EXCHANGE_SPECIFICATION: return createFunctionalExchangeSpecification();
      case MyLADslPackage.LOGICAL_FUNCTION: return createLogicalFunction();
      case MyLADslPackage.EXCHANGE_LINK: return createExchangeLink();
      case MyLADslPackage.EXCHANGE_CONTAINMENT: return createExchangeContainment();
      case MyLADslPackage.FUNCTIONAL_CHAIN: return createFunctionalChain();
      case MyLADslPackage.FUNCTIONAL_CHAIN_REALIZATION: return createFunctionalChainRealization();
      case MyLADslPackage.CONTROL_NODE: return createControlNode();
      case MyLADslPackage.SEQUENCE_LINK: return createSequenceLink();
      case MyLADslPackage.FUNCTIONAL_CHAIN_INVOLVEMENT: return createFunctionalChainInvolvement();
      case MyLADslPackage.EXCEPTION_HANDLER: return createExceptionHandler();
      case MyLADslPackage.ABSTRACT_FUNCTION: return createAbstractFunction();
      case MyLADslPackage.CONSTRAINT: return createConstraint();
      case MyLADslPackage.INITIALIZATION: return createInitialization();
      case MyLADslPackage.INVARIANT: return createInvariant();
      case MyLADslPackage.OPAQUE_EXPRESSION: return createOpaqueExpression();
      case MyLADslPackage.INPUT_OUTPUT_PIN: return createInputOutputPin();
      case MyLADslPackage.PORT_REALIZATION: return createPortRealization();
      case MyLADslPackage.PORT_ALLOCATION: return createPortAllocation();
      case MyLADslPackage.VALUE_SPECIFICATION: return createValueSpecification();
      case MyLADslPackage.FUNCTIONAL_EXCHANGE: return createFunctionalExchange();
      case MyLADslPackage.FUNCTIONAL_EXCHANGE_REALIZATION: return createFunctionalExchangeRealization();
      case MyLADslPackage.FUNCTION_REALIZATION: return createFunctionRealization();
      case MyLADslPackage.DATA_VALUE: return createDataValue();
      case MyLADslPackage.VALUE_TAG: return createValueTag();
      case MyLADslPackage.COMPONENT_EXCHANGE: return createComponentExchange();
      case MyLADslPackage.COMPONENT_EXCHANGE_REALIZATION: return createComponentExchangeRealization();
      case MyLADslPackage.COMPONENT_EXCHANGE_CATEGORY: return createComponentExchangeCategory();
      case MyLADslPackage.COMPONENT_EXCHANGE_FUNCTIONAL_EXCHANGE_ALLOCATION: return createComponentExchangeFunctionalExchangeAllocation();
      case MyLADslPackage.COMPONENT_EXCHANGE_END: return createComponentExchangeEnd();
      case MyLADslPackage.COMPONENT_FUNCTIONAL_ALLOCATION: return createComponentFunctionalAllocation();
      case MyLADslPackage.ABSTRACT_CAPABILITY_PKG: return createAbstractCapabilityPkg();
      case MyLADslPackage.SYSTEM_ANALYSIS_REALIZATION: return createSystemAnalysisRealization();
      case MyLADslPackage.REQUIREMENTS_PKG: return createRequirementsPkg();
      case MyLADslPackage.REQUIREMENT: return createRequirement();
      case MyLADslPackage.INTERFACE_PKG: return createInterfacePkg();
      case MyLADslPackage.MESSAGE_REFERENCE: return createMessageReference();
      case MyLADslPackage.INTERFACE: return createInterface();
      case MyLADslPackage.INTERFACE_ALLOCATION: return createInterfaceAllocation();
      case MyLADslPackage.EXCHANGE_ITEM_ALLOCATION: return createExchangeItemAllocation();
      case MyLADslPackage.EXCHANGE_ITEM: return createExchangeItem();
      case MyLADslPackage.EXCHANGE_ITEM_ELEMENT: return createExchangeItemElement();
      case MyLADslPackage.GENERALIZATION: return createGeneralization();
      case MyLADslPackage.INFORMATION_REALIZATION: return createInformationRealization();
      case MyLADslPackage.INTERFACE_IMPLEMENTATION: return createInterfaceImplementation();
      case MyLADslPackage.FEATURE: return createFeature();
      case MyLADslPackage.LOGICAL_COMPONENT_PKG: return createLogicalComponentPkg();
      case MyLADslPackage.STATE_MACHINE: return createStateMachine();
      case MyLADslPackage.REGION: return createRegion();
      case MyLADslPackage.STATE_TRANSITION: return createStateTransition();
      case MyLADslPackage.STATE_TRANSITION_REALIZATION: return createStateTransitionRealization();
      case MyLADslPackage.PART: return createPart();
      case MyLADslPackage.ABSTRACT_DEPLOYMENT_LINK: return createAbstractDeploymentLink();
      case MyLADslPackage.ABSTRACT_TYPE: return createAbstractType();
      case MyLADslPackage.PHYSICAL_LINK: return createPhysicalLink();
      case MyLADslPackage.COMPONENT_EXCHANGE_ALLOCATION: return createComponentExchangeAllocation();
      case MyLADslPackage.PHYSICAL_LINK_REALIZATION: return createPhysicalLinkRealization();
      case MyLADslPackage.PHYSICAL_LINK_END: return createPhysicalLinkEnd();
      case MyLADslPackage.PHYSICAL_LINK_CATEGORY: return createPhysicalLinkCategory();
      case MyLADslPackage.LOGICAL_COMPONENT: return createLogicalComponent();
      case MyLADslPackage.COMPONENT_REALIZATION: return createComponentRealization();
      case MyLADslPackage.COMMUNICATION_LINK: return createCommunicationLink();
      case MyLADslPackage.INTERFACE_USE: return createInterfaceUse();
      case MyLADslPackage.PHYSICAL_PATH: return createPhysicalPath();
      case MyLADslPackage.PHYSICAL_PATH_INVOLVEMENT: return createPhysicalPathInvolvement();
      case MyLADslPackage.PHYSICAL_PATH_REALIZATION: return createPhysicalPathRealization();
      case MyLADslPackage.DATA_PKG: return createDataPkg();
      case MyLADslPackage.DATA_PKGS: return createDataPkgs();
      case MyLADslPackage.MESSAGE: return createMessage();
      case MyLADslPackage.DATA_TYPE: return createDataType();
      case MyLADslPackage.FUNCTIONAL_CHAIN_INVOLVEMENT_LINK: return createFunctionalChainInvolvementLink();
      case MyLADslPackage.FUNCTION_INPUT_PORT: return createFunctionInputPort();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LogicalArchitecture createLogicalArchitecture()
  {
    LogicalArchitectureImpl logicalArchitecture = new LogicalArchitectureImpl();
    return logicalArchitecture;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PropertyValuePkg createPropertyValuePkg()
  {
    PropertyValuePkgImpl propertyValuePkg = new PropertyValuePkgImpl();
    return propertyValuePkg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AbstractPropertyValue createAbstractPropertyValue()
  {
    AbstractPropertyValueImpl abstractPropertyValue = new AbstractPropertyValueImpl();
    return abstractPropertyValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EnumerationPropertyType createEnumerationPropertyType()
  {
    EnumerationPropertyTypeImpl enumerationPropertyType = new EnumerationPropertyTypeImpl();
    return enumerationPropertyType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PropertyValueGroup createPropertyValueGroup()
  {
    PropertyValueGroupImpl propertyValueGroup = new PropertyValueGroupImpl();
    return propertyValueGroup;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Trace createTrace()
  {
    TraceImpl trace = new TraceImpl();
    return trace;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EnumerationPropertyLiteral createEnumerationPropertyLiteral()
  {
    EnumerationPropertyLiteralImpl enumerationPropertyLiteral = new EnumerationPropertyLiteralImpl();
    return enumerationPropertyLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LogicalFunctionPkg createLogicalFunctionPkg()
  {
    LogicalFunctionPkgImpl logicalFunctionPkg = new LogicalFunctionPkgImpl();
    return logicalFunctionPkg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExchangeCategory createExchangeCategory()
  {
    ExchangeCategoryImpl exchangeCategory = new ExchangeCategoryImpl();
    return exchangeCategory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionSpecification createFunctionSpecification()
  {
    FunctionSpecificationImpl functionSpecification = new FunctionSpecificationImpl();
    return functionSpecification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ActivityNode createActivityNode()
  {
    ActivityNodeImpl activityNode = new ActivityNodeImpl();
    return activityNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ActivityGroup createActivityGroup()
  {
    ActivityGroupImpl activityGroup = new ActivityGroupImpl();
    return activityGroup;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ActivityEdge createActivityEdge()
  {
    ActivityEdgeImpl activityEdge = new ActivityEdgeImpl();
    return activityEdge;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExchangeSpecificationRealization createExchangeSpecificationRealization()
  {
    ExchangeSpecificationRealizationImpl exchangeSpecificationRealization = new ExchangeSpecificationRealizationImpl();
    return exchangeSpecificationRealization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionalExchangeSpecification createFunctionalExchangeSpecification()
  {
    FunctionalExchangeSpecificationImpl functionalExchangeSpecification = new FunctionalExchangeSpecificationImpl();
    return functionalExchangeSpecification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LogicalFunction createLogicalFunction()
  {
    LogicalFunctionImpl logicalFunction = new LogicalFunctionImpl();
    return logicalFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExchangeLink createExchangeLink()
  {
    ExchangeLinkImpl exchangeLink = new ExchangeLinkImpl();
    return exchangeLink;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExchangeContainment createExchangeContainment()
  {
    ExchangeContainmentImpl exchangeContainment = new ExchangeContainmentImpl();
    return exchangeContainment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionalChain createFunctionalChain()
  {
    FunctionalChainImpl functionalChain = new FunctionalChainImpl();
    return functionalChain;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionalChainRealization createFunctionalChainRealization()
  {
    FunctionalChainRealizationImpl functionalChainRealization = new FunctionalChainRealizationImpl();
    return functionalChainRealization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ControlNode createControlNode()
  {
    ControlNodeImpl controlNode = new ControlNodeImpl();
    return controlNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SequenceLink createSequenceLink()
  {
    SequenceLinkImpl sequenceLink = new SequenceLinkImpl();
    return sequenceLink;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionalChainInvolvement createFunctionalChainInvolvement()
  {
    FunctionalChainInvolvementImpl functionalChainInvolvement = new FunctionalChainInvolvementImpl();
    return functionalChainInvolvement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExceptionHandler createExceptionHandler()
  {
    ExceptionHandlerImpl exceptionHandler = new ExceptionHandlerImpl();
    return exceptionHandler;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AbstractFunction createAbstractFunction()
  {
    AbstractFunctionImpl abstractFunction = new AbstractFunctionImpl();
    return abstractFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Constraint createConstraint()
  {
    ConstraintImpl constraint = new ConstraintImpl();
    return constraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Initialization createInitialization()
  {
    InitializationImpl initialization = new InitializationImpl();
    return initialization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Invariant createInvariant()
  {
    InvariantImpl invariant = new InvariantImpl();
    return invariant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OpaqueExpression createOpaqueExpression()
  {
    OpaqueExpressionImpl opaqueExpression = new OpaqueExpressionImpl();
    return opaqueExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InputOutputPin createInputOutputPin()
  {
    InputOutputPinImpl inputOutputPin = new InputOutputPinImpl();
    return inputOutputPin;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PortRealization createPortRealization()
  {
    PortRealizationImpl portRealization = new PortRealizationImpl();
    return portRealization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PortAllocation createPortAllocation()
  {
    PortAllocationImpl portAllocation = new PortAllocationImpl();
    return portAllocation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ValueSpecification createValueSpecification()
  {
    ValueSpecificationImpl valueSpecification = new ValueSpecificationImpl();
    return valueSpecification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionalExchange createFunctionalExchange()
  {
    FunctionalExchangeImpl functionalExchange = new FunctionalExchangeImpl();
    return functionalExchange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionalExchangeRealization createFunctionalExchangeRealization()
  {
    FunctionalExchangeRealizationImpl functionalExchangeRealization = new FunctionalExchangeRealizationImpl();
    return functionalExchangeRealization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionRealization createFunctionRealization()
  {
    FunctionRealizationImpl functionRealization = new FunctionRealizationImpl();
    return functionRealization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DataValue createDataValue()
  {
    DataValueImpl dataValue = new DataValueImpl();
    return dataValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ValueTag createValueTag()
  {
    ValueTagImpl valueTag = new ValueTagImpl();
    return valueTag;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComponentExchange createComponentExchange()
  {
    ComponentExchangeImpl componentExchange = new ComponentExchangeImpl();
    return componentExchange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComponentExchangeRealization createComponentExchangeRealization()
  {
    ComponentExchangeRealizationImpl componentExchangeRealization = new ComponentExchangeRealizationImpl();
    return componentExchangeRealization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComponentExchangeCategory createComponentExchangeCategory()
  {
    ComponentExchangeCategoryImpl componentExchangeCategory = new ComponentExchangeCategoryImpl();
    return componentExchangeCategory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComponentExchangeFunctionalExchangeAllocation createComponentExchangeFunctionalExchangeAllocation()
  {
    ComponentExchangeFunctionalExchangeAllocationImpl componentExchangeFunctionalExchangeAllocation = new ComponentExchangeFunctionalExchangeAllocationImpl();
    return componentExchangeFunctionalExchangeAllocation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComponentExchangeEnd createComponentExchangeEnd()
  {
    ComponentExchangeEndImpl componentExchangeEnd = new ComponentExchangeEndImpl();
    return componentExchangeEnd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComponentFunctionalAllocation createComponentFunctionalAllocation()
  {
    ComponentFunctionalAllocationImpl componentFunctionalAllocation = new ComponentFunctionalAllocationImpl();
    return componentFunctionalAllocation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AbstractCapabilityPkg createAbstractCapabilityPkg()
  {
    AbstractCapabilityPkgImpl abstractCapabilityPkg = new AbstractCapabilityPkgImpl();
    return abstractCapabilityPkg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SystemAnalysisRealization createSystemAnalysisRealization()
  {
    SystemAnalysisRealizationImpl systemAnalysisRealization = new SystemAnalysisRealizationImpl();
    return systemAnalysisRealization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RequirementsPkg createRequirementsPkg()
  {
    RequirementsPkgImpl requirementsPkg = new RequirementsPkgImpl();
    return requirementsPkg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Requirement createRequirement()
  {
    RequirementImpl requirement = new RequirementImpl();
    return requirement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InterfacePkg createInterfacePkg()
  {
    InterfacePkgImpl interfacePkg = new InterfacePkgImpl();
    return interfacePkg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MessageReference createMessageReference()
  {
    MessageReferenceImpl messageReference = new MessageReferenceImpl();
    return messageReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Interface createInterface()
  {
    InterfaceImpl interface_ = new InterfaceImpl();
    return interface_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InterfaceAllocation createInterfaceAllocation()
  {
    InterfaceAllocationImpl interfaceAllocation = new InterfaceAllocationImpl();
    return interfaceAllocation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExchangeItemAllocation createExchangeItemAllocation()
  {
    ExchangeItemAllocationImpl exchangeItemAllocation = new ExchangeItemAllocationImpl();
    return exchangeItemAllocation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExchangeItem createExchangeItem()
  {
    ExchangeItemImpl exchangeItem = new ExchangeItemImpl();
    return exchangeItem;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExchangeItemElement createExchangeItemElement()
  {
    ExchangeItemElementImpl exchangeItemElement = new ExchangeItemElementImpl();
    return exchangeItemElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Generalization createGeneralization()
  {
    GeneralizationImpl generalization = new GeneralizationImpl();
    return generalization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InformationRealization createInformationRealization()
  {
    InformationRealizationImpl informationRealization = new InformationRealizationImpl();
    return informationRealization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InterfaceImplementation createInterfaceImplementation()
  {
    InterfaceImplementationImpl interfaceImplementation = new InterfaceImplementationImpl();
    return interfaceImplementation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Feature createFeature()
  {
    FeatureImpl feature = new FeatureImpl();
    return feature;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LogicalComponentPkg createLogicalComponentPkg()
  {
    LogicalComponentPkgImpl logicalComponentPkg = new LogicalComponentPkgImpl();
    return logicalComponentPkg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StateMachine createStateMachine()
  {
    StateMachineImpl stateMachine = new StateMachineImpl();
    return stateMachine;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Region createRegion()
  {
    RegionImpl region = new RegionImpl();
    return region;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StateTransition createStateTransition()
  {
    StateTransitionImpl stateTransition = new StateTransitionImpl();
    return stateTransition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StateTransitionRealization createStateTransitionRealization()
  {
    StateTransitionRealizationImpl stateTransitionRealization = new StateTransitionRealizationImpl();
    return stateTransitionRealization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Part createPart()
  {
    PartImpl part = new PartImpl();
    return part;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AbstractDeploymentLink createAbstractDeploymentLink()
  {
    AbstractDeploymentLinkImpl abstractDeploymentLink = new AbstractDeploymentLinkImpl();
    return abstractDeploymentLink;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AbstractType createAbstractType()
  {
    AbstractTypeImpl abstractType = new AbstractTypeImpl();
    return abstractType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PhysicalLink createPhysicalLink()
  {
    PhysicalLinkImpl physicalLink = new PhysicalLinkImpl();
    return physicalLink;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComponentExchangeAllocation createComponentExchangeAllocation()
  {
    ComponentExchangeAllocationImpl componentExchangeAllocation = new ComponentExchangeAllocationImpl();
    return componentExchangeAllocation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PhysicalLinkRealization createPhysicalLinkRealization()
  {
    PhysicalLinkRealizationImpl physicalLinkRealization = new PhysicalLinkRealizationImpl();
    return physicalLinkRealization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PhysicalLinkEnd createPhysicalLinkEnd()
  {
    PhysicalLinkEndImpl physicalLinkEnd = new PhysicalLinkEndImpl();
    return physicalLinkEnd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PhysicalLinkCategory createPhysicalLinkCategory()
  {
    PhysicalLinkCategoryImpl physicalLinkCategory = new PhysicalLinkCategoryImpl();
    return physicalLinkCategory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LogicalComponent createLogicalComponent()
  {
    LogicalComponentImpl logicalComponent = new LogicalComponentImpl();
    return logicalComponent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComponentRealization createComponentRealization()
  {
    ComponentRealizationImpl componentRealization = new ComponentRealizationImpl();
    return componentRealization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CommunicationLink createCommunicationLink()
  {
    CommunicationLinkImpl communicationLink = new CommunicationLinkImpl();
    return communicationLink;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InterfaceUse createInterfaceUse()
  {
    InterfaceUseImpl interfaceUse = new InterfaceUseImpl();
    return interfaceUse;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PhysicalPath createPhysicalPath()
  {
    PhysicalPathImpl physicalPath = new PhysicalPathImpl();
    return physicalPath;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PhysicalPathInvolvement createPhysicalPathInvolvement()
  {
    PhysicalPathInvolvementImpl physicalPathInvolvement = new PhysicalPathInvolvementImpl();
    return physicalPathInvolvement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PhysicalPathRealization createPhysicalPathRealization()
  {
    PhysicalPathRealizationImpl physicalPathRealization = new PhysicalPathRealizationImpl();
    return physicalPathRealization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DataPkg createDataPkg()
  {
    DataPkgImpl dataPkg = new DataPkgImpl();
    return dataPkg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DataPkgs createDataPkgs()
  {
    DataPkgsImpl dataPkgs = new DataPkgsImpl();
    return dataPkgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Message createMessage()
  {
    MessageImpl message = new MessageImpl();
    return message;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DataType createDataType()
  {
    DataTypeImpl dataType = new DataTypeImpl();
    return dataType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionalChainInvolvementLink createFunctionalChainInvolvementLink()
  {
    FunctionalChainInvolvementLinkImpl functionalChainInvolvementLink = new FunctionalChainInvolvementLinkImpl();
    return functionalChainInvolvementLink;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionInputPort createFunctionInputPort()
  {
    FunctionInputPortImpl functionInputPort = new FunctionInputPortImpl();
    return functionInputPort;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MyLADslPackage getMyLADslPackage()
  {
    return (MyLADslPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MyLADslPackage getPackage()
  {
    return MyLADslPackage.eINSTANCE;
  }

} //MyLADslFactoryImpl
