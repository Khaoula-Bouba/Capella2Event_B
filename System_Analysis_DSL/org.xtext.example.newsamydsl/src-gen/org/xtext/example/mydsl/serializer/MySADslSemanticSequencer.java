/*
 * generated by Xtext 2.22.0
 */
package org.xtext.example.mydsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.mydsl.mySADsl.AbstractCapabilityPkg;
import org.xtext.example.mydsl.mySADsl.AbstractDeploymentLink;
import org.xtext.example.mydsl.mySADsl.AbstractFunction;
import org.xtext.example.mydsl.mySADsl.AbstractPropertyValue;
import org.xtext.example.mydsl.mySADsl.AbstractType;
import org.xtext.example.mydsl.mySADsl.ActivityEdge;
import org.xtext.example.mydsl.mySADsl.ActivityGroup;
import org.xtext.example.mydsl.mySADsl.ActivityNode;
import org.xtext.example.mydsl.mySADsl.CapabilityExploitation;
import org.xtext.example.mydsl.mySADsl.CommunicationLink;
import org.xtext.example.mydsl.mySADsl.ComponentExchange;
import org.xtext.example.mydsl.mySADsl.ComponentExchangeCategory;
import org.xtext.example.mydsl.mySADsl.ComponentExchangeEnd;
import org.xtext.example.mydsl.mySADsl.ComponentExchangeFunctionalExchangeAllocation;
import org.xtext.example.mydsl.mySADsl.ComponentExchangeRealization;
import org.xtext.example.mydsl.mySADsl.ComponentFunctionalAllocation;
import org.xtext.example.mydsl.mySADsl.ComponentRealization;
import org.xtext.example.mydsl.mySADsl.Constraint;
import org.xtext.example.mydsl.mySADsl.ControlNode;
import org.xtext.example.mydsl.mySADsl.DataPkg;
import org.xtext.example.mydsl.mySADsl.DataPkgs;
import org.xtext.example.mydsl.mySADsl.DataType;
import org.xtext.example.mydsl.mySADsl.EnumerationPropertyLiteral;
import org.xtext.example.mydsl.mySADsl.EnumerationPropertyType;
import org.xtext.example.mydsl.mySADsl.ExceptionHandler;
import org.xtext.example.mydsl.mySADsl.ExchangeCategory;
import org.xtext.example.mydsl.mySADsl.ExchangeContainment;
import org.xtext.example.mydsl.mySADsl.ExchangeItem;
import org.xtext.example.mydsl.mySADsl.ExchangeItemAllocation;
import org.xtext.example.mydsl.mySADsl.ExchangeItemElement;
import org.xtext.example.mydsl.mySADsl.ExchangeLink;
import org.xtext.example.mydsl.mySADsl.ExchangeSpecificationRealization;
import org.xtext.example.mydsl.mySADsl.Feature;
import org.xtext.example.mydsl.mySADsl.FunctionRealization;
import org.xtext.example.mydsl.mySADsl.FunctionSpecification;
import org.xtext.example.mydsl.mySADsl.FunctionalChain;
import org.xtext.example.mydsl.mySADsl.FunctionalChainInvolvementLink;
import org.xtext.example.mydsl.mySADsl.FunctionalChainRealization;
import org.xtext.example.mydsl.mySADsl.FunctionalExchange;
import org.xtext.example.mydsl.mySADsl.FunctionalExchangeRealization;
import org.xtext.example.mydsl.mySADsl.FunctionalExchangeSpecification;
import org.xtext.example.mydsl.mySADsl.Generalization;
import org.xtext.example.mydsl.mySADsl.InformationRealization;
import org.xtext.example.mydsl.mySADsl.Initialization;
import org.xtext.example.mydsl.mySADsl.InputOutputPin;
import org.xtext.example.mydsl.mySADsl.Interface;
import org.xtext.example.mydsl.mySADsl.InterfaceAllocation;
import org.xtext.example.mydsl.mySADsl.InterfaceImplementation;
import org.xtext.example.mydsl.mySADsl.InterfacePkg;
import org.xtext.example.mydsl.mySADsl.InterfaceUse;
import org.xtext.example.mydsl.mySADsl.Invariant;
import org.xtext.example.mydsl.mySADsl.Message;
import org.xtext.example.mydsl.mySADsl.MessageReference;
import org.xtext.example.mydsl.mySADsl.Mission;
import org.xtext.example.mydsl.mySADsl.MissionInvolvement;
import org.xtext.example.mydsl.mySADsl.MissionPkg;
import org.xtext.example.mydsl.mySADsl.MySADslPackage;
import org.xtext.example.mydsl.mySADsl.OpaqueExpression;
import org.xtext.example.mydsl.mySADsl.OperationalAnalysisRealization;
import org.xtext.example.mydsl.mySADsl.Part;
import org.xtext.example.mydsl.mySADsl.PropertyValueGroup;
import org.xtext.example.mydsl.mySADsl.PropertyValuePkg;
import org.xtext.example.mydsl.mySADsl.Region;
import org.xtext.example.mydsl.mySADsl.Requirement;
import org.xtext.example.mydsl.mySADsl.RequirementsPkg;
import org.xtext.example.mydsl.mySADsl.SequenceLink;
import org.xtext.example.mydsl.mySADsl.StateMachine;
import org.xtext.example.mydsl.mySADsl.StateTransition;
import org.xtext.example.mydsl.mySADsl.StateTransitionRealization;
import org.xtext.example.mydsl.mySADsl.SystemAnalysis;
import org.xtext.example.mydsl.mySADsl.SystemComponent;
import org.xtext.example.mydsl.mySADsl.SystemComponentPkg;
import org.xtext.example.mydsl.mySADsl.SystemFunction;
import org.xtext.example.mydsl.mySADsl.SystemFunctionPkg;
import org.xtext.example.mydsl.mySADsl.Trace;
import org.xtext.example.mydsl.mySADsl.ValueSpecification;
import org.xtext.example.mydsl.mySADsl.ValueTag;
import org.xtext.example.mydsl.services.MySADslGrammarAccess;

@SuppressWarnings("all")
public class MySADslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private MySADslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MySADslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MySADslPackage.ABSTRACT_CAPABILITY_PKG:
				sequence_AbstractCapabilityPkg(context, (AbstractCapabilityPkg) semanticObject); 
				return; 
			case MySADslPackage.ABSTRACT_DEPLOYMENT_LINK:
				sequence_AbstractDeploymentLink(context, (AbstractDeploymentLink) semanticObject); 
				return; 
			case MySADslPackage.ABSTRACT_FUNCTION:
				sequence_AbstractFunction(context, (AbstractFunction) semanticObject); 
				return; 
			case MySADslPackage.ABSTRACT_PROPERTY_VALUE:
				sequence_AbstractPropertyValue(context, (AbstractPropertyValue) semanticObject); 
				return; 
			case MySADslPackage.ABSTRACT_TYPE:
				sequence_AbstractType(context, (AbstractType) semanticObject); 
				return; 
			case MySADslPackage.ACTIVITY_EDGE:
				sequence_ActivityEdge(context, (ActivityEdge) semanticObject); 
				return; 
			case MySADslPackage.ACTIVITY_GROUP:
				sequence_ActivityGroup(context, (ActivityGroup) semanticObject); 
				return; 
			case MySADslPackage.ACTIVITY_NODE:
				sequence_ActivityNode(context, (ActivityNode) semanticObject); 
				return; 
			case MySADslPackage.CAPABILITY_EXPLOITATION:
				sequence_CapabilityExploitation(context, (CapabilityExploitation) semanticObject); 
				return; 
			case MySADslPackage.COMMUNICATION_LINK:
				sequence_CommunicationLink(context, (CommunicationLink) semanticObject); 
				return; 
			case MySADslPackage.COMPONENT_EXCHANGE:
				sequence_ComponentExchange(context, (ComponentExchange) semanticObject); 
				return; 
			case MySADslPackage.COMPONENT_EXCHANGE_CATEGORY:
				sequence_ComponentExchangeCategory(context, (ComponentExchangeCategory) semanticObject); 
				return; 
			case MySADslPackage.COMPONENT_EXCHANGE_END:
				sequence_ComponentExchangeEnd(context, (ComponentExchangeEnd) semanticObject); 
				return; 
			case MySADslPackage.COMPONENT_EXCHANGE_FUNCTIONAL_EXCHANGE_ALLOCATION:
				sequence_ComponentExchangeFunctionalExchangeAllocation(context, (ComponentExchangeFunctionalExchangeAllocation) semanticObject); 
				return; 
			case MySADslPackage.COMPONENT_EXCHANGE_REALIZATION:
				sequence_ComponentExchangeRealization(context, (ComponentExchangeRealization) semanticObject); 
				return; 
			case MySADslPackage.COMPONENT_FUNCTIONAL_ALLOCATION:
				sequence_ComponentFunctionalAllocation(context, (ComponentFunctionalAllocation) semanticObject); 
				return; 
			case MySADslPackage.COMPONENT_REALIZATION:
				sequence_ComponentRealization(context, (ComponentRealization) semanticObject); 
				return; 
			case MySADslPackage.CONSTRAINT:
				sequence_Constraint(context, (Constraint) semanticObject); 
				return; 
			case MySADslPackage.CONTROL_NODE:
				sequence_ControlNode(context, (ControlNode) semanticObject); 
				return; 
			case MySADslPackage.DATA_PKG:
				sequence_DataPkg(context, (DataPkg) semanticObject); 
				return; 
			case MySADslPackage.DATA_PKGS:
				sequence_DataPkgs(context, (DataPkgs) semanticObject); 
				return; 
			case MySADslPackage.DATA_TYPE:
				sequence_DataType(context, (DataType) semanticObject); 
				return; 
			case MySADslPackage.ENUMERATION_PROPERTY_LITERAL:
				sequence_EnumerationPropertyLiteral(context, (EnumerationPropertyLiteral) semanticObject); 
				return; 
			case MySADslPackage.ENUMERATION_PROPERTY_TYPE:
				sequence_EnumerationPropertyType(context, (EnumerationPropertyType) semanticObject); 
				return; 
			case MySADslPackage.EXCEPTION_HANDLER:
				sequence_ExceptionHandler(context, (ExceptionHandler) semanticObject); 
				return; 
			case MySADslPackage.EXCHANGE_CATEGORY:
				sequence_ExchangeCategory(context, (ExchangeCategory) semanticObject); 
				return; 
			case MySADslPackage.EXCHANGE_CONTAINMENT:
				sequence_ExchangeContainment(context, (ExchangeContainment) semanticObject); 
				return; 
			case MySADslPackage.EXCHANGE_ITEM:
				sequence_ExchangeItem(context, (ExchangeItem) semanticObject); 
				return; 
			case MySADslPackage.EXCHANGE_ITEM_ALLOCATION:
				sequence_ExchangeItemAllocation(context, (ExchangeItemAllocation) semanticObject); 
				return; 
			case MySADslPackage.EXCHANGE_ITEM_ELEMENT:
				sequence_ExchangeItemElement(context, (ExchangeItemElement) semanticObject); 
				return; 
			case MySADslPackage.EXCHANGE_LINK:
				sequence_ExchangeLink(context, (ExchangeLink) semanticObject); 
				return; 
			case MySADslPackage.EXCHANGE_SPECIFICATION_REALIZATION:
				sequence_ExchangeSpecificationRealization(context, (ExchangeSpecificationRealization) semanticObject); 
				return; 
			case MySADslPackage.FEATURE:
				sequence_Feature(context, (Feature) semanticObject); 
				return; 
			case MySADslPackage.FUNCTION_REALIZATION:
				sequence_FunctionRealization(context, (FunctionRealization) semanticObject); 
				return; 
			case MySADslPackage.FUNCTION_SPECIFICATION:
				sequence_FunctionSpecification(context, (FunctionSpecification) semanticObject); 
				return; 
			case MySADslPackage.FUNCTIONAL_CHAIN:
				sequence_FunctionalChain(context, (FunctionalChain) semanticObject); 
				return; 
			case MySADslPackage.FUNCTIONAL_CHAIN_INVOLVEMENT_LINK:
				sequence_FunctionalChainInvolvement(context, (FunctionalChainInvolvementLink) semanticObject); 
				return; 
			case MySADslPackage.FUNCTIONAL_CHAIN_REALIZATION:
				sequence_FunctionalChainRealization(context, (FunctionalChainRealization) semanticObject); 
				return; 
			case MySADslPackage.FUNCTIONAL_EXCHANGE:
				sequence_FunctionalExchange(context, (FunctionalExchange) semanticObject); 
				return; 
			case MySADslPackage.FUNCTIONAL_EXCHANGE_REALIZATION:
				sequence_FunctionalExchangeRealization(context, (FunctionalExchangeRealization) semanticObject); 
				return; 
			case MySADslPackage.FUNCTIONAL_EXCHANGE_SPECIFICATION:
				sequence_FunctionalExchangeSpecification(context, (FunctionalExchangeSpecification) semanticObject); 
				return; 
			case MySADslPackage.GENERALIZATION:
				sequence_Generalization(context, (Generalization) semanticObject); 
				return; 
			case MySADslPackage.INFORMATION_REALIZATION:
				sequence_InformationRealization(context, (InformationRealization) semanticObject); 
				return; 
			case MySADslPackage.INITIALIZATION:
				sequence_Initialization(context, (Initialization) semanticObject); 
				return; 
			case MySADslPackage.INPUT_OUTPUT_PIN:
				sequence_InputOutputPin(context, (InputOutputPin) semanticObject); 
				return; 
			case MySADslPackage.INTERFACE:
				sequence_Interface(context, (Interface) semanticObject); 
				return; 
			case MySADslPackage.INTERFACE_ALLOCATION:
				sequence_InterfaceAllocation(context, (InterfaceAllocation) semanticObject); 
				return; 
			case MySADslPackage.INTERFACE_IMPLEMENTATION:
				sequence_InterfaceImplementation(context, (InterfaceImplementation) semanticObject); 
				return; 
			case MySADslPackage.INTERFACE_PKG:
				sequence_InterfacePkg(context, (InterfacePkg) semanticObject); 
				return; 
			case MySADslPackage.INTERFACE_USE:
				sequence_InterfaceUse(context, (InterfaceUse) semanticObject); 
				return; 
			case MySADslPackage.INVARIANT:
				sequence_Invariant(context, (Invariant) semanticObject); 
				return; 
			case MySADslPackage.MESSAGE:
				sequence_Message(context, (Message) semanticObject); 
				return; 
			case MySADslPackage.MESSAGE_REFERENCE:
				sequence_MessageReference(context, (MessageReference) semanticObject); 
				return; 
			case MySADslPackage.MISSION:
				sequence_Mission(context, (Mission) semanticObject); 
				return; 
			case MySADslPackage.MISSION_INVOLVEMENT:
				sequence_MissionInvolvement(context, (MissionInvolvement) semanticObject); 
				return; 
			case MySADslPackage.MISSION_PKG:
				sequence_MissionPkg(context, (MissionPkg) semanticObject); 
				return; 
			case MySADslPackage.OPAQUE_EXPRESSION:
				sequence_OpaqueExpression(context, (OpaqueExpression) semanticObject); 
				return; 
			case MySADslPackage.OPERATIONAL_ANALYSIS_REALIZATION:
				sequence_OperationalAnalysisRealization(context, (OperationalAnalysisRealization) semanticObject); 
				return; 
			case MySADslPackage.PART:
				sequence_Part(context, (Part) semanticObject); 
				return; 
			case MySADslPackage.PROPERTY_VALUE_GROUP:
				sequence_PropertyValueGroup(context, (PropertyValueGroup) semanticObject); 
				return; 
			case MySADslPackage.PROPERTY_VALUE_PKG:
				sequence_PropertyValuePkg(context, (PropertyValuePkg) semanticObject); 
				return; 
			case MySADslPackage.REGION:
				sequence_Region(context, (Region) semanticObject); 
				return; 
			case MySADslPackage.REQUIREMENT:
				sequence_Requirement(context, (Requirement) semanticObject); 
				return; 
			case MySADslPackage.REQUIREMENTS_PKG:
				sequence_RequirementsPkg(context, (RequirementsPkg) semanticObject); 
				return; 
			case MySADslPackage.SEQUENCE_LINK:
				sequence_SequenceLink(context, (SequenceLink) semanticObject); 
				return; 
			case MySADslPackage.STATE_MACHINE:
				sequence_StateMachine(context, (StateMachine) semanticObject); 
				return; 
			case MySADslPackage.STATE_TRANSITION:
				sequence_StateTransition(context, (StateTransition) semanticObject); 
				return; 
			case MySADslPackage.STATE_TRANSITION_REALIZATION:
				sequence_StateTransitionRealization(context, (StateTransitionRealization) semanticObject); 
				return; 
			case MySADslPackage.SYSTEM_ANALYSIS:
				sequence_SystemAnalysis(context, (SystemAnalysis) semanticObject); 
				return; 
			case MySADslPackage.SYSTEM_COMPONENT:
				sequence_SystemComponent(context, (SystemComponent) semanticObject); 
				return; 
			case MySADslPackage.SYSTEM_COMPONENT_PKG:
				sequence_SystemComponentPkg(context, (SystemComponentPkg) semanticObject); 
				return; 
			case MySADslPackage.SYSTEM_FUNCTION:
				sequence_SystemFunction(context, (SystemFunction) semanticObject); 
				return; 
			case MySADslPackage.SYSTEM_FUNCTION_PKG:
				sequence_SystemFunctionPkg(context, (SystemFunctionPkg) semanticObject); 
				return; 
			case MySADslPackage.TRACE:
				sequence_Trace(context, (Trace) semanticObject); 
				return; 
			case MySADslPackage.VALUE_SPECIFICATION:
				sequence_ValueSpecification(context, (ValueSpecification) semanticObject); 
				return; 
			case MySADslPackage.VALUE_TAG:
				sequence_ValueTag(context, (ValueTag) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AbstractCapabilityPkg returns AbstractCapabilityPkg
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         name=nameType? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup* 
	 *         ownedTraces+=Trace* 
	 *         ownedPropertyValuePkgs+=PropertyValuePkg*
	 *     )
	 */
	protected void sequence_AbstractCapabilityPkg(ISerializationContext context, AbstractCapabilityPkg semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractDeploymentLink returns AbstractDeploymentLink
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         realizedFlow=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         deployedElement=EString 
	 *         location=EString 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup*
	 *     )
	 */
	protected void sequence_AbstractDeploymentLink(ISerializationContext context, AbstractDeploymentLink semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractFunction returns AbstractFunction
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         name=nameType? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         visibility=EString? 
	 *         aggregationKind=EString? 
	 *         idType=EString? 
	 *         kind=EString? 
	 *         condition=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         abstractType=EString? 
	 *         context=EString? 
	 *         behavior=EString? 
	 *         availableInStates=EString? 
	 *         isAbstract=EString? 
	 *         isStatic=EString? 
	 *         ordered=EString? 
	 *         unique=EString? 
	 *         minInclusiv=EString? 
	 *         maxInclusive=EString? 
	 *         final=EString? 
	 *         isDerived=EString? 
	 *         isReadOnly=EString? 
	 *         isPartOfKey=EString? 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup* 
	 *         ownedConstraints+=Constraint* 
	 *         ownedTraces+=Trace* 
	 *         ownedDefaultValue+=DataValue* 
	 *         ownedFunctionalChains+=FunctionalChain* 
	 *         ownedHandlers+=ExceptionHandler* 
	 *         inoutsOutputs+=InputOutputPin* 
	 *         ownedFunctions+=AbstractFunction* 
	 *         ownedFunctionRealizations+=FunctionRealization*
	 *     )
	 */
	protected void sequence_AbstractFunction(ISerializationContext context, AbstractFunction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractPropertyValue returns AbstractPropertyValue
	 *
	 * Constraint:
	 *     (
	 *         strType=EString 
	 *         strId=EString 
	 *         sid=EString? 
	 *         strName=nameType 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         (value=EString | value2=EFloat)? 
	 *         stringAppliedPropertyValues=EString? 
	 *         stringAppliedPropertyValueGroups=EString? 
	 *         statut=EString? 
	 *         stringFeatures=EString? 
	 *         stringInvolvedElements=EString? 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         stringOwnedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         stringOwnedPropertyValueGroups+=PropertyValueGroup*
	 *     )
	 */
	protected void sequence_AbstractPropertyValue(ISerializationContext context, AbstractPropertyValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AbstractType returns AbstractType
	 *
	 * Constraint:
	 *     (type=EString id=EString sid=EString? name=nameType? idType=EString?)
	 */
	protected void sequence_AbstractType(ISerializationContext context, AbstractType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActivityEdge returns ActivityEdge
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         kindOfRate=EString? 
	 *         realizedFlow=EString? 
	 *         target=EString 
	 *         source=EString 
	 *         interrupts=EString? 
	 *         rate=EString? 
	 *         probability=EString? 
	 *         guard=EString? 
	 *         weight=EString?
	 *     )
	 */
	protected void sequence_ActivityEdge(ISerializationContext context, ActivityEdge semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActivityGroup returns ActivityGroup
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         subGroups+=ActivityGroup* 
	 *         ownedNodes+=ActivityNode* 
	 *         ownedEdges+=ActivityEdge*
	 *     )
	 */
	protected void sequence_ActivityGroup(ISerializationContext context, ActivityGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActivityNode returns ActivityNode
	 *
	 * Constraint:
	 *     (type=EString id=EString sid=EString? name=nameType?)
	 */
	protected void sequence_ActivityNode(ISerializationContext context, ActivityNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CapabilityExploitation returns CapabilityExploitation
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         realizedFlow=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         capability=EString 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup*
	 *     )
	 */
	protected void sequence_CapabilityExploitation(ISerializationContext context, CapabilityExploitation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CommunicationLink returns CommunicationLink
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         kind=EString? 
	 *         protocol=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         exchangeItem=EString? 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup*
	 *     )
	 */
	protected void sequence_CommunicationLink(ISerializationContext context, CommunicationLink semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ComponentExchangeCategory returns ComponentExchangeCategory
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         name=nameType? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         exchanges=EString? 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup*
	 *     )
	 */
	protected void sequence_ComponentExchangeCategory(ISerializationContext context, ComponentExchangeCategory semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ComponentExchangeEnd returns ComponentExchangeEnd
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         port=EString? 
	 *         part=EString? 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup*
	 *     )
	 */
	protected void sequence_ComponentExchangeEnd(ISerializationContext context, ComponentExchangeEnd semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ComponentExchangeFunctionalExchangeAllocation returns ComponentExchangeFunctionalExchangeAllocation
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         realizedFlow=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         targetElement=EString 
	 *         sourceElement=EString 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup*
	 *     )
	 */
	protected void sequence_ComponentExchangeFunctionalExchangeAllocation(ISerializationContext context, ComponentExchangeFunctionalExchangeAllocation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ComponentExchangeRealization returns ComponentExchangeRealization
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         realizedFlow=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         targetElement=EString 
	 *         sourceElement=EString 
	 *         componentOwnedPropertyValues+=AbstractPropertyValue* 
	 *         componentEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         componentOwnedPropertyValueGroups+=PropertyValueGroup*
	 *     )
	 */
	protected void sequence_ComponentExchangeRealization(ISerializationContext context, ComponentExchangeRealization semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ComponentExchange returns ComponentExchange
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         name=nameType? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         kind=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         realizedFlow=EString? 
	 *         realizations=EString? 
	 *         convoyedInformations=EString? 
	 *         source=EString 
	 *         target=EString 
	 *         link=EString? 
	 *         oriented=EString? 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup* 
	 *         ownedComponentExchangeFunctionalExchangeAllocations+=ComponentExchangeFunctionalExchangeAllocation* 
	 *         ownedComponentExchangeRealizations+=ComponentExchangeRealization* 
	 *         ownedComponentExchangeEnds+=ComponentExchangeEnd*
	 *     )
	 */
	protected void sequence_ComponentExchange(ISerializationContext context, ComponentExchange semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ComponentFunctionalAllocation returns ComponentFunctionalAllocation
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         realizedFlow=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         targetElement=EString 
	 *         sourceElement=EString 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup*
	 *     )
	 */
	protected void sequence_ComponentFunctionalAllocation(ISerializationContext context, ComponentFunctionalAllocation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ComponentRealization returns ComponentRealization
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         realizedFlow=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         targetElement=EString 
	 *         sourceElement=EString 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup*
	 *     )
	 */
	protected void sequence_ComponentRealization(ISerializationContext context, ComponentRealization semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Constraint returns Constraint
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         (name=Initialization | name=Invariant) 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         constrElmts=EString? 
	 *         ownedPropertyValues+=AbstractPropertyValue? 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType? 
	 *         ownedPropertyValueGroups+=PropertyValueGroup? 
	 *         exprSpecification+=OpaqueExpression?
	 *     )
	 */
	protected void sequence_Constraint(ISerializationContext context, Constraint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ControlNode returns ControlNode
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         kind=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         ownedPropertyValues+=AbstractPropertyValue? 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType? 
	 *         ownedPropertyValueGroups+=PropertyValueGroup?
	 *     )
	 */
	protected void sequence_ControlNode(ISerializationContext context, ControlNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DataPkg returns DataPkg
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         name=nameType? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         visibility=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup* 
	 *         ownedTraces+=Trace* 
	 *         ownedPropertyValuePkgs+=PropertyValuePkg* 
	 *         ownedDataValues+=DataValue* 
	 *         ownedMessageReferences+=MessageReference* 
	 *         ownedDataPkgs+=DataPkgs 
	 *         ownedDataTypes+=DataType* 
	 *         ownedMessages+=Message*
	 *     )
	 */
	protected void sequence_DataPkg(ISerializationContext context, DataPkg semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DataPkgs returns DataPkgs
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         name=nameType? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         visibility=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup* 
	 *         ownedTraces+=Trace* 
	 *         ownedPropertyValuePkgs+=PropertyValuePkg* 
	 *         ownedDataValues+=DataValue* 
	 *         ownedMessageReferences+=MessageReference* 
	 *         ownedDataTypes+=DataType* 
	 *         ownedMessages+=Message*
	 *     )
	 */
	protected void sequence_DataPkgs(ISerializationContext context, DataPkgs semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DataType returns DataType
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         name=nameType? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         discrete=EString? 
	 *         minInclusive=EString? 
	 *         maxInclusive=EString? 
	 *         pattern=EString? 
	 *         visibility=EString? 
	 *         kind=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         unit=EString? 
	 *         abstract=EString? 
	 *         final=EString? 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup* 
	 *         ownedTraces+=Trace* 
	 *         ownedGeneralizations+=Generalization* 
	 *         ownedPropertyValuePkgs+=PropertyValuePkg* 
	 *         ownedDataValues+=DataValue* 
	 *         ownedInformationRealizations+=InformationRealization*
	 *     )
	 */
	protected void sequence_DataType(ISerializationContext context, DataType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EnumerationPropertyLiteral returns EnumerationPropertyLiteral
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         name=nameType 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         appliedPropertyValues=[AbstractPropertyValue|EString]? 
	 *         appliedPropertyValueGroups+=[PropertyValueGroup|EString]? 
	 *         statut=EString? 
	 *         features=[EnumerationPropertyLiteral|EString]? 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup*
	 *     )
	 */
	protected void sequence_EnumerationPropertyLiteral(ISerializationContext context, EnumerationPropertyLiteral semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EnumerationPropertyType returns EnumerationPropertyType
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         name=nameType 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         statut=EString? 
	 *         features=EString? 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup* 
	 *         ownedLiterals+=EnumerationPropertyLiteral?
	 *     )
	 */
	protected void sequence_EnumerationPropertyType(ISerializationContext context, EnumerationPropertyType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExceptionHandler returns ExceptionHandler
	 *
	 * Constraint:
	 *     (type=EString handlerBody=EString exceptionInput=EString exceptionTypes=EString)
	 */
	protected void sequence_ExceptionHandler(ISerializationContext context, ExceptionHandler semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MySADslPackage.eINSTANCE.getExceptionHandler_Type()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MySADslPackage.eINSTANCE.getExceptionHandler_Type()));
			if (transientValues.isValueTransient(semanticObject, MySADslPackage.eINSTANCE.getExceptionHandler_HandlerBody()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MySADslPackage.eINSTANCE.getExceptionHandler_HandlerBody()));
			if (transientValues.isValueTransient(semanticObject, MySADslPackage.eINSTANCE.getExceptionHandler_ExceptionInput()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MySADslPackage.eINSTANCE.getExceptionHandler_ExceptionInput()));
			if (transientValues.isValueTransient(semanticObject, MySADslPackage.eINSTANCE.getExceptionHandler_ExceptionTypes()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MySADslPackage.eINSTANCE.getExceptionHandler_ExceptionTypes()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExceptionHandlerAccess().getTypeEStringTerminalRuleCall_2_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getExceptionHandlerAccess().getHandlerBodyEStringTerminalRuleCall_4_0(), semanticObject.getHandlerBody());
		feeder.accept(grammarAccess.getExceptionHandlerAccess().getExceptionInputEStringTerminalRuleCall_6_0(), semanticObject.getExceptionInput());
		feeder.accept(grammarAccess.getExceptionHandlerAccess().getExceptionTypesEStringTerminalRuleCall_8_0(), semanticObject.getExceptionTypes());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ExchangeCategory returns ExchangeCategory
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         name=nameType? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         exchanges=EString? 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup*
	 *     )
	 */
	protected void sequence_ExchangeCategory(ISerializationContext context, ExchangeCategory semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExchangeContainment returns ExchangeContainment
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         realizedFlow=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         exchange=EString 
	 *         link=EString 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup*
	 *     )
	 */
	protected void sequence_ExchangeContainment(ISerializationContext context, ExchangeContainment semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExchangeItemAllocation returns ExchangeItemAllocation
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         name=nameType? 
	 *         sendProtocol=EString? 
	 *         receiveProtocol=EString? 
	 *         realizedFlow=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         allocatedItem=EString? 
	 *         final=EString? 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup*
	 *     )
	 */
	protected void sequence_ExchangeItemAllocation(ISerializationContext context, ExchangeItemAllocation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExchangeItemElement returns ExchangeItemElement
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         name=nameType? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         kind=EString? 
	 *         direction=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         abstractType=EString? 
	 *         referencedProperties=EString? 
	 *         ordered=EString? 
	 *         unique=EString? 
	 *         minInclusive=EString? 
	 *         maxInclusive=EString? 
	 *         composite=EString? 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup* 
	 *         ownedDefaultValue+=DataValue*
	 *     )
	 */
	protected void sequence_ExchangeItemElement(ISerializationContext context, ExchangeItemElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExchangeItem returns ExchangeItem
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         name=nameType? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         exchangeMechanism=EString 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup* 
	 *         ownedTraces+=Trace* 
	 *         ownedGeneralizations+=Generalization* 
	 *         ownedElements+=ExchangeItemElement* 
	 *         ownedInformationRealizations+=InformationRealization*
	 *     )
	 */
	protected void sequence_ExchangeItem(ISerializationContext context, ExchangeItem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExchangeLink returns ExchangeLink
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         name=EString? 
	 *         realizedFlow=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         exchangeContainmentLinks=EString? 
	 *         sources=EString? 
	 *         destinations=EString? 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup* 
	 *         ownedExchangeContainments+=ExchangeContainment*
	 *     )
	 */
	protected void sequence_ExchangeLink(ISerializationContext context, ExchangeLink semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExchangeSpecificationRealization returns ExchangeSpecificationRealization
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         realizedFlow=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         targetElement=EString 
	 *         sourceElement=EString 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup*
	 *     )
	 */
	protected void sequence_ExchangeSpecificationRealization(ISerializationContext context, ExchangeSpecificationRealization semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Feature returns Feature
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         name=nameType? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         visibility=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         abstractType=EString? 
	 *         isAbstract=EString? 
	 *         isStatic=EString? 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup*
	 *     )
	 */
	protected void sequence_Feature(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionRealization returns FunctionRealization
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         realizedFlow=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         targetElement=EString 
	 *         sourceElement=EString 
	 *         ownedPropertyValues+=AbstractPropertyValue? 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType? 
	 *         ownedPropertyValueGroups+=PropertyValueGroup?
	 *     )
	 */
	protected void sequence_FunctionRealization(ISerializationContext context, FunctionRealization semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionSpecification returns FunctionSpecification
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         name=nameType? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         ownedParameterSet=EString? 
	 *         ownedParameter=EString? 
	 *         inExchangeLinks=EString? 
	 *         outExchangeLinks=EString? 
	 *         isControlOperator=EString? 
	 *         isReadOnly=EString? 
	 *         isSingleExecution=EString? 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup* 
	 *         ownedTraces+=Trace* 
	 *         ownedNodes+=ActivityNode* 
	 *         ownedEdges+=ActivityEdge* 
	 *         ownedGroups+=ActivityGroup*
	 *     )
	 */
	protected void sequence_FunctionSpecification(ISerializationContext context, FunctionSpecification semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionalChainInvolvement returns FunctionalChainInvolvementLink
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         realizedFlow=EString? 
	 *         chainInvAppliedPropertyValues=EString? 
	 *         chainInvAppliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         chainInvFeatures=EString? 
	 *         involved=EString 
	 *         sourceReferenceHierarchy=EString? 
	 *         targetReferenceHierarchy=EString? 
	 *         exchangeContext=EString? 
	 *         exchangedItems=EString? 
	 *         source=EString? 
	 *         target=EString? 
	 *         chainInvOwnedPropertyValues+=AbstractPropertyValue? 
	 *         chainInvOwnedEnumerationPropertyTypes+=EnumerationPropertyType? 
	 *         chainInvOwnedPropertyValueGroups+=PropertyValueGroup?
	 *     )
	 */
	protected void sequence_FunctionalChainInvolvement(ISerializationContext context, FunctionalChainInvolvementLink semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionalChainRealization returns FunctionalChainRealization
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         realizedFlow=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         targetElement=EString 
	 *         sourceElement=EString 
	 *         ownedPropertyValues+=AbstractPropertyValue? 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType? 
	 *         ownedPropertyValueGroups+=PropertyValueGroup?
	 *     )
	 */
	protected void sequence_FunctionalChainRealization(ISerializationContext context, FunctionalChainRealization semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionalChain returns FunctionalChain
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         name=nameType? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         kind=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         availableInStates=EString? 
	 *         preCondition=EString? 
	 *         postCondition=EString? 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup* 
	 *         ownedFunctionalChainInvolvements+=FunctionalChainInvolvement* 
	 *         ownedFunctionalChainRealizations+=FunctionalChainRealization* 
	 *         ownedSequenceNodes+=ControlNode* 
	 *         ownedSequenceLinks+=SequenceLink*
	 *     )
	 */
	protected void sequence_FunctionalChain(ISerializationContext context, FunctionalChain semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionalExchangeRealization returns FunctionalExchangeRealization
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         realizedFlow=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         targetElement=EString 
	 *         sourceElement=EString 
	 *         ownedPropertyValues+=AbstractPropertyValue? 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType? 
	 *         ownedPropertyValueGroups+=PropertyValueGroup?
	 *     )
	 */
	protected void sequence_FunctionalExchangeRealization(ISerializationContext context, FunctionalExchangeRealization semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionalExchangeSpecification returns FunctionalExchangeSpecification
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         name=EString? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         realizedFlow=EString? 
	 *         realizations=EString? 
	 *         convoyedInformations=EString? 
	 *         source=EString 
	 *         target=EString 
	 *         link=EString? 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup*
	 *     )
	 */
	protected void sequence_FunctionalExchangeSpecification(ISerializationContext context, FunctionalExchangeSpecification semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionalExchange returns FunctionalExchange
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         name=ID 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         kindOfRate=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         realizedFlow=EString? 
	 *         target=EString 
	 *         source=EString 
	 *         interrupts=EString? 
	 *         transformation=EString? 
	 *         selection=EString? 
	 *         exchangeSpecifications=EString? 
	 *         exchangedItems=EString? 
	 *         isMulticast=EString? 
	 *         isMultireceive=EString? 
	 *         ownedPropertyValues+=AbstractPropertyValue? 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType? 
	 *         ownedPropertyValueGroups+=PropertyValueGroup? 
	 *         rate=ValueSpecification? 
	 *         probability=ValueSpecification? 
	 *         guard=ValueSpecification? 
	 *         weight=ValueSpecification? 
	 *         ownedFunctionalExchangeRealizations+=FunctionalExchangeRealization?
	 *     )
	 */
	protected void sequence_FunctionalExchange(ISerializationContext context, FunctionalExchange semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Generalization returns Generalization
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         realizedFlow=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         super=EString 
	 *         sub=EString 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup*
	 *     )
	 */
	protected void sequence_Generalization(ISerializationContext context, Generalization semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InformationRealization returns InformationRealization
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         realizedFlow=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         targetElement=EString 
	 *         sourceElement=EString 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup*
	 *     )
	 */
	protected void sequence_InformationRealization(ISerializationContext context, InformationRealization semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Initialization returns Initialization
	 *
	 * Constraint:
	 *     name=nameType
	 */
	protected void sequence_Initialization(ISerializationContext context, Initialization semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MySADslPackage.eINSTANCE.getInitialization_Name()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MySADslPackage.eINSTANCE.getInitialization_Name()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInitializationAccess().getNameNameTypeParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InputOutputPin returns InputOutputPin
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         name=nameType? 
	 *         kindOfNode=EString? 
	 *         ordering=EString? 
	 *         abstractType=EString? 
	 *         inState=EString? 
	 *         selection=EString? 
	 *         inputEvaluationAction=EString? 
	 *         isControlType=EString? 
	 *         isControl=EString? 
	 *         upperBound=ValueSpecification?
	 *     )
	 */
	protected void sequence_InputOutputPin(ISerializationContext context, InputOutputPin semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceAllocation returns InterfaceAllocation
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         realizedFlow=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         targetElement=EString 
	 *         sourceElement=EString 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup*
	 *     )
	 */
	protected void sequence_InterfaceAllocation(ISerializationContext context, InterfaceAllocation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceImplementation returns InterfaceImplementation
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         realizedFlow=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         implementedInterface=EString 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup*
	 *     )
	 */
	protected void sequence_InterfaceImplementation(ISerializationContext context, InterfaceImplementation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfacePkg returns InterfacePkg
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         name=nameType? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup* 
	 *         ownedTraces+=Trace* 
	 *         ownedPropertyValuePkgs+=PropertyValuePkg* 
	 *         ownedMessageReferences+=MessageReference* 
	 *         ownedExchangeItems+=ExchangeItem* 
	 *         ownedInterfaces+=Interface*
	 *     )
	 */
	protected void sequence_InterfacePkg(ISerializationContext context, InterfacePkg semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InterfaceUse returns InterfaceUse
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         realizedFlow=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         usedInterface=EString 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup*
	 *     )
	 */
	protected void sequence_InterfaceUse(ISerializationContext context, InterfaceUse semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Interface returns Interface
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         name=nameType? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         visibility=EString? 
	 *         mechanism=EString? 
	 *         structural=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         abstract=EString? 
	 *         final=EString? 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup* 
	 *         ownedTraces+=Trace* 
	 *         ownedGeneralizations+=Generalization* 
	 *         ownedFeatures+=Feature* 
	 *         ownedInterfaceAllocations+=InterfaceAllocation* 
	 *         ownedExchangeItemAllocations+=ExchangeItemAllocation*
	 *     )
	 */
	protected void sequence_Interface(ISerializationContext context, Interface semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Invariant returns Invariant
	 *
	 * Constraint:
	 *     (leftPart=nameType rightPart=nameType)
	 */
	protected void sequence_Invariant(ISerializationContext context, Invariant semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MySADslPackage.eINSTANCE.getInvariant_LeftPart()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MySADslPackage.eINSTANCE.getInvariant_LeftPart()));
			if (transientValues.isValueTransient(semanticObject, MySADslPackage.eINSTANCE.getInvariant_RightPart()) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MySADslPackage.eINSTANCE.getInvariant_RightPart()));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInvariantAccess().getLeftPartNameTypeParserRuleCall_1_0(), semanticObject.getLeftPart());
		feeder.accept(grammarAccess.getInvariantAccess().getRightPartNameTypeParserRuleCall_3_0(), semanticObject.getRightPart());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MessageReference returns MessageReference
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         realizedFlow=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         message=EString 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup*
	 *     )
	 */
	protected void sequence_MessageReference(ISerializationContext context, MessageReference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Message returns Message
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         name=nameType? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         visibility=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         abstract=EString? 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup* 
	 *         ownedTraces+=Trace* 
	 *         ownedGeneralizations+=Generalization* 
	 *         ownedFeatures+=Feature* 
	 *         ownedPropertyValuePkgs+=PropertyValuePkg* 
	 *         ownedDataValues+=DataValue* 
	 *         ownedStateMachines+=StateMachine*
	 *     )
	 */
	protected void sequence_Message(ISerializationContext context, Message semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MissionInvolvement returns MissionInvolvement
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         realizedFlow=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         involved=EString 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup*
	 *     )
	 */
	protected void sequence_MissionInvolvement(ISerializationContext context, MissionInvolvement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MissionPkg returns MissionPkg
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         name=nameType? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup* 
	 *         ownedTraces+=Trace* 
	 *         ownedPropertyValuePkgs+=PropertyValuePkg* 
	 *         ownedMissions+=Mission*
	 *     )
	 */
	protected void sequence_MissionPkg(ISerializationContext context, MissionPkg semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Mission returns Mission
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         name=nameType? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup* 
	 *         ownedMissionInvolvements+=MissionInvolvement* 
	 *         ownedCapabilityExploitations+=CapabilityExploitation*
	 *     )
	 */
	protected void sequence_Mission(ISerializationContext context, Mission semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OpaqueExpression returns OpaqueExpression
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         nameSpecification=nameType? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         abstractType=EString? 
	 *         bodies=EString? 
	 *         languages=ID? 
	 *         ownedPropertyValues+=AbstractPropertyValue? 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType? 
	 *         ownedPropertyValueGroups+=PropertyValueGroup?
	 *     )
	 */
	protected void sequence_OpaqueExpression(ISerializationContext context, OpaqueExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     OperationalAnalysisRealization returns OperationalAnalysisRealization
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         realizedFlow=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         targetElement=EString 
	 *         sourceElement=EString 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup*
	 *     )
	 */
	protected void sequence_OperationalAnalysisRealization(ISerializationContext context, OperationalAnalysisRealization semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Part returns Part
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         name=nameType? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         visibility=EString? 
	 *         aggregationKind=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         abstractType=EString? 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup* 
	 *         ownedValue+=DataValue* 
	 *         ownedDeploymentLinks+=AbstractDeploymentLink* 
	 *         ownedAbstractType=AbstractType?
	 *     )
	 */
	protected void sequence_Part(ISerializationContext context, Part semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PropertyValueGroup returns PropertyValueGroup
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         name=nameType 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         statut=EString? 
	 *         features=EString? 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup* 
	 *         ownedTraces+=Trace?
	 *     )
	 */
	protected void sequence_PropertyValueGroup(ISerializationContext context, PropertyValueGroup semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PropertyValuePkg returns PropertyValuePkg
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         name=nameType? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup* 
	 *         ownedTraces+=Trace? 
	 *         ownedPropertyValuePkgs+=PropertyValuePkg*
	 *     )
	 */
	protected void sequence_PropertyValuePkg(ISerializationContext context, PropertyValuePkg semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Region returns Region
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         name=nameType? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         appliedPropertyValues=EString? 
	 *         ppliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         involvedStates=EString? 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup* 
	 *         ownedTransitions+=StateTransition*
	 *     )
	 */
	protected void sequence_Region(ISerializationContext context, Region semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Requirement returns Requirement
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         name=nameType? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         requirementId=EString? 
	 *         additionalInformation=EString? 
	 *         verificationMethod=EString? 
	 *         verificationPhase=EString? 
	 *         implementationVersion=EString? 
	 *         feature=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup* 
	 *         ownedTraces+=Trace*
	 *     )
	 */
	protected void sequence_Requirement(ISerializationContext context, Requirement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RequirementsPkg returns RequirementsPkg
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         name=nameType? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         additionalInformation=EString? 
	 *         level=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup* 
	 *         ownedTraces+=Trace* 
	 *         ownedPropertyValuePkgs+=PropertyValuePkg* 
	 *         ownedRequirements+=Requirement* 
	 *         ownedRequirementPkgs+=RequirementsPkg*
	 *     )
	 */
	protected void sequence_RequirementsPkg(ISerializationContext context, RequirementsPkg semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SequenceLink returns SequenceLink
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         sourceReferenceHierarchy=EString? 
	 *         targetReferenceHierarchy=EString? 
	 *         condition=EString? 
	 *         links=EString? 
	 *         source=EString? 
	 *         target=EString? 
	 *         ownedPropertyValues+=AbstractPropertyValue? 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType? 
	 *         ownedPropertyValueGroups+=PropertyValueGroup?
	 *     )
	 */
	protected void sequence_SequenceLink(ISerializationContext context, SequenceLink semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StateMachine returns StateMachine
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         name=nameType? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         ownedParameterSet=EString? 
	 *         ownedParameter=EString? 
	 *         isControlOperator=EString? 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup* 
	 *         ownedRegions+=Region*
	 *     )
	 */
	protected void sequence_StateMachine(ISerializationContext context, StateMachine semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StateTransitionRealization returns StateTransitionRealization
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         realizedFlow=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         targetElement=EString 
	 *         sourceElement=EString 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup*
	 *     )
	 */
	protected void sequence_StateTransitionRealization(ISerializationContext context, StateTransitionRealization semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StateTransition returns StateTransition
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         name=nameType? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         kind=EString? 
	 *         triggerDescription=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         realizedFlow=EString? 
	 *         guard=EString? 
	 *         source=EString 
	 *         target=EString 
	 *         effect=EString? 
	 *         triggers=EString? 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup* 
	 *         ownedStateTransitionRealizations+=StateTransitionRealization*
	 *     )
	 */
	protected void sequence_StateTransition(ISerializationContext context, StateTransition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SystemAnalysis returns SystemAnalysis
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         architectureId=EString 
	 *         sid=EString? 
	 *         name=nameType? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup* 
	 *         ownedTraces+=Trace* 
	 *         ownedPropertyValuePkgs+=PropertyValuePkg* 
	 *         ownedFunctionPkg=SystemFunctionPkg? 
	 *         ownedComponentExchanges+=ComponentExchange* 
	 *         ownedComponentExchangeCategories+=ComponentExchangeCategory* 
	 *         ownedFunctionalLinks+=ExchangeLink* 
	 *         ownedFunctionalAllocations+=ComponentFunctionalAllocation* 
	 *         ownedComponentExchangeRealizations+=ComponentExchangeRealization* 
	 *         ownedRequirementPkgs+=RequirementsPkg* 
	 *         ownedAbstractCapabilityPkg=AbstractCapabilityPkg? 
	 *         ownedInterfacePkg=InterfacePkg? 
	 *         ownedDataPkg=DataPkg? 
	 *         ownedSystemComponentPkg=SystemComponentPkg? 
	 *         ownedMissionPkg=MissionPkg? 
	 *         ownedOperationalAnalysisRealizations+=OperationalAnalysisRealization*
	 *     )
	 */
	protected void sequence_SystemAnalysis(ISerializationContext context, SystemAnalysis semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SystemComponentPkg returns SystemComponentPkg
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         name=nameType? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup* 
	 *         ownedTraces+=Trace* 
	 *         ownedPropertyValuePkgs+=PropertyValuePkg* 
	 *         ownedParts+=Part* 
	 *         ownedComponentExchanges+=ComponentExchange* 
	 *         ownedComponentExchangeCategories+=ComponentExchangeCategory* 
	 *         ownedFunctionalLinks+=ExchangeLink* 
	 *         ownedFunctionalAllocations+=ComponentFunctionalAllocation* 
	 *         ownedComponentExchangeRealizations+=ComponentExchangeRealization* 
	 *         ownedStateMachines+=StateMachine* 
	 *         ownedSystemComponents+=SystemComponent*
	 *     )
	 */
	protected void sequence_SystemComponentPkg(ISerializationContext context, SystemComponentPkg semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SystemComponent returns SystemComponent
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         name=nameType? 
	 *         idType=EString? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         inExchangeLinks=EString? 
	 *         outExchangeLinks=EString? 
	 *         dataType=EString? 
	 *         abstract=EString? 
	 *         actor=EString? 
	 *         human=EString? 
	 *         dataComponent=EString? 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup* 
	 *         ownedContraints+=Constraint* 
	 *         ownedTraces+=Trace* 
	 *         ownedFunctionalAllocation+=ComponentFunctionalAllocation* 
	 *         ownedComponentExchanges+=ComponentExchange* 
	 *         ownedComponentExchangeCategories+=ComponentExchangeCategory* 
	 *         ownedStateMachines+=StateMachine* 
	 *         ownedGeneralizations+=Generalization* 
	 *         ownedFeatures+=Feature* 
	 *         ownedInterfaceAllocations+=InterfaceAllocation* 
	 *         ownedCommunicationLinks+=CommunicationLink* 
	 *         ownedInterfaceUses+=InterfaceUse* 
	 *         ownedInterfaceImplementations+=InterfaceImplementation* 
	 *         ownedComponentRealizations+=ComponentRealization* 
	 *         ownedSystemComponents+=SystemComponent*
	 *     )
	 */
	protected void sequence_SystemComponent(ISerializationContext context, SystemComponent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SystemFunctionPkg returns SystemFunctionPkg
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         name=nameType? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup* 
	 *         ownedTraces+=Trace* 
	 *         ownedPropertyValuePkgs+=PropertyValuePkg* 
	 *         ownedFunctionalLinks+=ExchangeLink* 
	 *         ownedExchanges+=FunctionalExchangeSpecification* 
	 *         ownedExchangeSpecificationRealizations+=ExchangeSpecificationRealization* 
	 *         ownedCategories+=ExchangeCategory* 
	 *         ownedFunctionSpecifications+=FunctionSpecification* 
	 *         ownedSystemFunctions+=SystemFunction*
	 *     )
	 */
	protected void sequence_SystemFunctionPkg(ISerializationContext context, SystemFunctionPkg semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SystemFunction returns SystemFunction
	 *
	 * Constraint:
	 *     (
	 *         type=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         name=nameType? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         visibility=EString? 
	 *         aggregationKind=EString? 
	 *         idType=EString? 
	 *         kind=EString? 
	 *         condition=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         abstractType=EString? 
	 *         context=EString? 
	 *         behavior=EString? 
	 *         availableInStates=EString? 
	 *         isAbstract=EString? 
	 *         isStatic=EString? 
	 *         ordered=EString? 
	 *         unique=EString? 
	 *         minInclusive=EString? 
	 *         maxInclusive=EString? 
	 *         final=EString? 
	 *         isDerived=EString? 
	 *         isReadOnly=EString? 
	 *         isPartOfKey=EString? 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup* 
	 *         ownedTraces+=Trace* 
	 *         ownedDataValue+=DataValue* 
	 *         ownedFunctionalChains+=FunctionalChain* 
	 *         ownedHandlers+=ExceptionHandler* 
	 *         inputsOutputsPin+=InputOutputPin* 
	 *         ownedFunctions+=AbstractFunction* 
	 *         ownedFunctionRealizations+=FunctionRealization* 
	 *         ownedFunctionalExchanges+=FunctionalExchange*
	 *     )
	 */
	protected void sequence_SystemFunction(ISerializationContext context, SystemFunction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Trace returns Trace
	 *
	 * Constraint:
	 *     (
	 *         typeTrace=EString 
	 *         idTrace=EString 
	 *         sid=EString? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         realizFlow=EString? 
	 *         appliedPropertyValues=[AbstractPropertyValue|EString]? 
	 *         appliedPropertyValueGroups=[PropertyValueGroup|EString]? 
	 *         statut=EString? 
	 *         features=[EnumerationPropertyLiteral|EString]? 
	 *         targetElement=EString 
	 *         sourceElement=EString 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup*
	 *     )
	 */
	protected void sequence_Trace(ISerializationContext context, Trace semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ValueSpecification returns ValueSpecification
	 *
	 * Constraint:
	 *     (type=EString id=EString sid=EString? name=nameType? abstractType=EString?)
	 */
	protected void sequence_ValueSpecification(ISerializationContext context, ValueSpecification semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DataValue returns ValueTag
	 *     ValueTag returns ValueTag
	 *
	 * Constraint:
	 *     (
	 *         objectType=EString 
	 *         id=EString 
	 *         sid=EString? 
	 *         (nameValue=nameType | nameValue=EmptyString)? 
	 *         visibleInDoc=EString? 
	 *         visibleInLM=EString? 
	 *         summary=EString? 
	 *         description=EString? 
	 *         review=EString? 
	 *         appliedPropertyValues=EString? 
	 *         appliedPropertyValueGroups=EString? 
	 *         status=EString? 
	 *         features=EString? 
	 *         abstractType=EString? 
	 *         referencedValue=EString? 
	 *         referencedProperty=EString? 
	 *         unit=EString? 
	 *         boolValAbstract=EString? 
	 *         value=EString? 
	 *         ooperator=EString? 
	 *         ownedPropertyValues+=AbstractPropertyValue* 
	 *         ownedEnumerationPropertyTypes+=EnumerationPropertyType* 
	 *         ownedPropertyValueGroups+=PropertyValueGroup* 
	 *         domainValue+=DataValue*
	 *     )
	 */
	protected void sequence_ValueTag(ISerializationContext context, ValueTag semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
