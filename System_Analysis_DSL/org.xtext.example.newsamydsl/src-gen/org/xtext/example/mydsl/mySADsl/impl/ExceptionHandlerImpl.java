/**
 * generated by Xtext 2.22.0
 */
package org.xtext.example.mydsl.mySADsl.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.mydsl.mySADsl.ExceptionHandler;
import org.xtext.example.mydsl.mySADsl.MySADslPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Exception Handler</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.mySADsl.impl.ExceptionHandlerImpl#getType <em>Type</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.mySADsl.impl.ExceptionHandlerImpl#getHandlerBody <em>Handler Body</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.mySADsl.impl.ExceptionHandlerImpl#getExceptionInput <em>Exception Input</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.mySADsl.impl.ExceptionHandlerImpl#getExceptionTypes <em>Exception Types</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExceptionHandlerImpl extends MinimalEObjectImpl.Container implements ExceptionHandler
{
  /**
   * The default value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected static final String TYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected String type = TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #getHandlerBody() <em>Handler Body</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHandlerBody()
   * @generated
   * @ordered
   */
  protected static final String HANDLER_BODY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getHandlerBody() <em>Handler Body</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getHandlerBody()
   * @generated
   * @ordered
   */
  protected String handlerBody = HANDLER_BODY_EDEFAULT;

  /**
   * The default value of the '{@link #getExceptionInput() <em>Exception Input</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExceptionInput()
   * @generated
   * @ordered
   */
  protected static final String EXCEPTION_INPUT_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getExceptionInput() <em>Exception Input</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExceptionInput()
   * @generated
   * @ordered
   */
  protected String exceptionInput = EXCEPTION_INPUT_EDEFAULT;

  /**
   * The default value of the '{@link #getExceptionTypes() <em>Exception Types</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExceptionTypes()
   * @generated
   * @ordered
   */
  protected static final String EXCEPTION_TYPES_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getExceptionTypes() <em>Exception Types</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExceptionTypes()
   * @generated
   * @ordered
   */
  protected String exceptionTypes = EXCEPTION_TYPES_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExceptionHandlerImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MySADslPackage.eINSTANCE.getExceptionHandler();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setType(String newType)
  {
    String oldType = type;
    type = newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MySADslPackage.EXCEPTION_HANDLER__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getHandlerBody()
  {
    return handlerBody;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setHandlerBody(String newHandlerBody)
  {
    String oldHandlerBody = handlerBody;
    handlerBody = newHandlerBody;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MySADslPackage.EXCEPTION_HANDLER__HANDLER_BODY, oldHandlerBody, handlerBody));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getExceptionInput()
  {
    return exceptionInput;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExceptionInput(String newExceptionInput)
  {
    String oldExceptionInput = exceptionInput;
    exceptionInput = newExceptionInput;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MySADslPackage.EXCEPTION_HANDLER__EXCEPTION_INPUT, oldExceptionInput, exceptionInput));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getExceptionTypes()
  {
    return exceptionTypes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExceptionTypes(String newExceptionTypes)
  {
    String oldExceptionTypes = exceptionTypes;
    exceptionTypes = newExceptionTypes;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MySADslPackage.EXCEPTION_HANDLER__EXCEPTION_TYPES, oldExceptionTypes, exceptionTypes));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MySADslPackage.EXCEPTION_HANDLER__TYPE:
        return getType();
      case MySADslPackage.EXCEPTION_HANDLER__HANDLER_BODY:
        return getHandlerBody();
      case MySADslPackage.EXCEPTION_HANDLER__EXCEPTION_INPUT:
        return getExceptionInput();
      case MySADslPackage.EXCEPTION_HANDLER__EXCEPTION_TYPES:
        return getExceptionTypes();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MySADslPackage.EXCEPTION_HANDLER__TYPE:
        setType((String)newValue);
        return;
      case MySADslPackage.EXCEPTION_HANDLER__HANDLER_BODY:
        setHandlerBody((String)newValue);
        return;
      case MySADslPackage.EXCEPTION_HANDLER__EXCEPTION_INPUT:
        setExceptionInput((String)newValue);
        return;
      case MySADslPackage.EXCEPTION_HANDLER__EXCEPTION_TYPES:
        setExceptionTypes((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MySADslPackage.EXCEPTION_HANDLER__TYPE:
        setType(TYPE_EDEFAULT);
        return;
      case MySADslPackage.EXCEPTION_HANDLER__HANDLER_BODY:
        setHandlerBody(HANDLER_BODY_EDEFAULT);
        return;
      case MySADslPackage.EXCEPTION_HANDLER__EXCEPTION_INPUT:
        setExceptionInput(EXCEPTION_INPUT_EDEFAULT);
        return;
      case MySADslPackage.EXCEPTION_HANDLER__EXCEPTION_TYPES:
        setExceptionTypes(EXCEPTION_TYPES_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MySADslPackage.EXCEPTION_HANDLER__TYPE:
        return TYPE_EDEFAULT == null ? type != null : !TYPE_EDEFAULT.equals(type);
      case MySADslPackage.EXCEPTION_HANDLER__HANDLER_BODY:
        return HANDLER_BODY_EDEFAULT == null ? handlerBody != null : !HANDLER_BODY_EDEFAULT.equals(handlerBody);
      case MySADslPackage.EXCEPTION_HANDLER__EXCEPTION_INPUT:
        return EXCEPTION_INPUT_EDEFAULT == null ? exceptionInput != null : !EXCEPTION_INPUT_EDEFAULT.equals(exceptionInput);
      case MySADslPackage.EXCEPTION_HANDLER__EXCEPTION_TYPES:
        return EXCEPTION_TYPES_EDEFAULT == null ? exceptionTypes != null : !EXCEPTION_TYPES_EDEFAULT.equals(exceptionTypes);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (type: ");
    result.append(type);
    result.append(", handlerBody: ");
    result.append(handlerBody);
    result.append(", exceptionInput: ");
    result.append(exceptionInput);
    result.append(", exceptionTypes: ");
    result.append(exceptionTypes);
    result.append(')');
    return result.toString();
  }

} //ExceptionHandlerImpl
