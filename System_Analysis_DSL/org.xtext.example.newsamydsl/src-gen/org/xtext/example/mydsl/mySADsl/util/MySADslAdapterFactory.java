/**
 * generated by Xtext 2.22.0
 */
package org.xtext.example.mydsl.mySADsl.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.xtext.example.mydsl.mySADsl.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.xtext.example.mydsl.mySADsl.MySADslPackage
 * @generated
 */
public class MySADslAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MySADslPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MySADslAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = MySADslPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MySADslSwitch<Adapter> modelSwitch =
    new MySADslSwitch<Adapter>()
    {
      @Override
      public Adapter caseSystemAnalysis(SystemAnalysis object)
      {
        return createSystemAnalysisAdapter();
      }
      @Override
      public Adapter caseAbstractCapabilityPkg(AbstractCapabilityPkg object)
      {
        return createAbstractCapabilityPkgAdapter();
      }
      @Override
      public Adapter caseComponentFunctionalAllocation(ComponentFunctionalAllocation object)
      {
        return createComponentFunctionalAllocationAdapter();
      }
      @Override
      public Adapter casePropertyValuePkg(PropertyValuePkg object)
      {
        return createPropertyValuePkgAdapter();
      }
      @Override
      public Adapter caseAbstractPropertyValue(AbstractPropertyValue object)
      {
        return createAbstractPropertyValueAdapter();
      }
      @Override
      public Adapter caseEnumerationPropertyType(EnumerationPropertyType object)
      {
        return createEnumerationPropertyTypeAdapter();
      }
      @Override
      public Adapter casePropertyValueGroup(PropertyValueGroup object)
      {
        return createPropertyValueGroupAdapter();
      }
      @Override
      public Adapter caseTrace(Trace object)
      {
        return createTraceAdapter();
      }
      @Override
      public Adapter caseEnumerationPropertyLiteral(EnumerationPropertyLiteral object)
      {
        return createEnumerationPropertyLiteralAdapter();
      }
      @Override
      public Adapter caseOperationalAnalysisRealization(OperationalAnalysisRealization object)
      {
        return createOperationalAnalysisRealizationAdapter();
      }
      @Override
      public Adapter caseSystemFunctionPkg(SystemFunctionPkg object)
      {
        return createSystemFunctionPkgAdapter();
      }
      @Override
      public Adapter caseExchangeSpecificationRealization(ExchangeSpecificationRealization object)
      {
        return createExchangeSpecificationRealizationAdapter();
      }
      @Override
      public Adapter caseFunctionalExchangeSpecification(FunctionalExchangeSpecification object)
      {
        return createFunctionalExchangeSpecificationAdapter();
      }
      @Override
      public Adapter caseExchangeLink(ExchangeLink object)
      {
        return createExchangeLinkAdapter();
      }
      @Override
      public Adapter caseExchangeContainment(ExchangeContainment object)
      {
        return createExchangeContainmentAdapter();
      }
      @Override
      public Adapter caseExchangeCategory(ExchangeCategory object)
      {
        return createExchangeCategoryAdapter();
      }
      @Override
      public Adapter caseFunctionSpecification(FunctionSpecification object)
      {
        return createFunctionSpecificationAdapter();
      }
      @Override
      public Adapter caseActivityNode(ActivityNode object)
      {
        return createActivityNodeAdapter();
      }
      @Override
      public Adapter caseActivityGroup(ActivityGroup object)
      {
        return createActivityGroupAdapter();
      }
      @Override
      public Adapter caseActivityEdge(ActivityEdge object)
      {
        return createActivityEdgeAdapter();
      }
      @Override
      public Adapter caseSystemFunction(SystemFunction object)
      {
        return createSystemFunctionAdapter();
      }
      @Override
      public Adapter caseAbstractFunction(AbstractFunction object)
      {
        return createAbstractFunctionAdapter();
      }
      @Override
      public Adapter caseConstraint(Constraint object)
      {
        return createConstraintAdapter();
      }
      @Override
      public Adapter caseInitialization(Initialization object)
      {
        return createInitializationAdapter();
      }
      @Override
      public Adapter caseInvariant(Invariant object)
      {
        return createInvariantAdapter();
      }
      @Override
      public Adapter caseOpaqueExpression(OpaqueExpression object)
      {
        return createOpaqueExpressionAdapter();
      }
      @Override
      public Adapter caseInputOutputPin(InputOutputPin object)
      {
        return createInputOutputPinAdapter();
      }
      @Override
      public Adapter caseValueSpecification(ValueSpecification object)
      {
        return createValueSpecificationAdapter();
      }
      @Override
      public Adapter caseFunctionalExchange(FunctionalExchange object)
      {
        return createFunctionalExchangeAdapter();
      }
      @Override
      public Adapter caseFunctionalExchangeRealization(FunctionalExchangeRealization object)
      {
        return createFunctionalExchangeRealizationAdapter();
      }
      @Override
      public Adapter caseFunctionRealization(FunctionRealization object)
      {
        return createFunctionRealizationAdapter();
      }
      @Override
      public Adapter caseExceptionHandler(ExceptionHandler object)
      {
        return createExceptionHandlerAdapter();
      }
      @Override
      public Adapter caseDataValue(DataValue object)
      {
        return createDataValueAdapter();
      }
      @Override
      public Adapter caseValueTag(ValueTag object)
      {
        return createValueTagAdapter();
      }
      @Override
      public Adapter caseFunctionalChain(FunctionalChain object)
      {
        return createFunctionalChainAdapter();
      }
      @Override
      public Adapter caseControlNode(ControlNode object)
      {
        return createControlNodeAdapter();
      }
      @Override
      public Adapter caseSequenceLink(SequenceLink object)
      {
        return createSequenceLinkAdapter();
      }
      @Override
      public Adapter caseFunctionalChainInvolvement(FunctionalChainInvolvement object)
      {
        return createFunctionalChainInvolvementAdapter();
      }
      @Override
      public Adapter caseFunctionalChainRealization(FunctionalChainRealization object)
      {
        return createFunctionalChainRealizationAdapter();
      }
      @Override
      public Adapter caseComponentExchange(ComponentExchange object)
      {
        return createComponentExchangeAdapter();
      }
      @Override
      public Adapter caseComponentExchangeRealization(ComponentExchangeRealization object)
      {
        return createComponentExchangeRealizationAdapter();
      }
      @Override
      public Adapter caseComponentExchangeCategory(ComponentExchangeCategory object)
      {
        return createComponentExchangeCategoryAdapter();
      }
      @Override
      public Adapter caseComponentExchangeFunctionalExchangeAllocation(ComponentExchangeFunctionalExchangeAllocation object)
      {
        return createComponentExchangeFunctionalExchangeAllocationAdapter();
      }
      @Override
      public Adapter caseComponentExchangeEnd(ComponentExchangeEnd object)
      {
        return createComponentExchangeEndAdapter();
      }
      @Override
      public Adapter caseRequirementsPkg(RequirementsPkg object)
      {
        return createRequirementsPkgAdapter();
      }
      @Override
      public Adapter caseRequirement(Requirement object)
      {
        return createRequirementAdapter();
      }
      @Override
      public Adapter caseInterfacePkg(InterfacePkg object)
      {
        return createInterfacePkgAdapter();
      }
      @Override
      public Adapter caseMessageReference(MessageReference object)
      {
        return createMessageReferenceAdapter();
      }
      @Override
      public Adapter caseInterface(Interface object)
      {
        return createInterfaceAdapter();
      }
      @Override
      public Adapter caseInterfaceAllocation(InterfaceAllocation object)
      {
        return createInterfaceAllocationAdapter();
      }
      @Override
      public Adapter caseFeature(Feature object)
      {
        return createFeatureAdapter();
      }
      @Override
      public Adapter caseExchangeItemAllocation(ExchangeItemAllocation object)
      {
        return createExchangeItemAllocationAdapter();
      }
      @Override
      public Adapter caseExchangeItem(ExchangeItem object)
      {
        return createExchangeItemAdapter();
      }
      @Override
      public Adapter caseExchangeItemElement(ExchangeItemElement object)
      {
        return createExchangeItemElementAdapter();
      }
      @Override
      public Adapter caseGeneralization(Generalization object)
      {
        return createGeneralizationAdapter();
      }
      @Override
      public Adapter caseInformationRealization(InformationRealization object)
      {
        return createInformationRealizationAdapter();
      }
      @Override
      public Adapter caseMissionPkg(MissionPkg object)
      {
        return createMissionPkgAdapter();
      }
      @Override
      public Adapter caseMission(Mission object)
      {
        return createMissionAdapter();
      }
      @Override
      public Adapter caseMissionInvolvement(MissionInvolvement object)
      {
        return createMissionInvolvementAdapter();
      }
      @Override
      public Adapter caseCapabilityExploitation(CapabilityExploitation object)
      {
        return createCapabilityExploitationAdapter();
      }
      @Override
      public Adapter caseSystemComponentPkg(SystemComponentPkg object)
      {
        return createSystemComponentPkgAdapter();
      }
      @Override
      public Adapter caseStateMachine(StateMachine object)
      {
        return createStateMachineAdapter();
      }
      @Override
      public Adapter caseRegion(Region object)
      {
        return createRegionAdapter();
      }
      @Override
      public Adapter caseStateTransition(StateTransition object)
      {
        return createStateTransitionAdapter();
      }
      @Override
      public Adapter caseStateTransitionRealization(StateTransitionRealization object)
      {
        return createStateTransitionRealizationAdapter();
      }
      @Override
      public Adapter casePart(Part object)
      {
        return createPartAdapter();
      }
      @Override
      public Adapter caseAbstractDeploymentLink(AbstractDeploymentLink object)
      {
        return createAbstractDeploymentLinkAdapter();
      }
      @Override
      public Adapter caseAbstractType(AbstractType object)
      {
        return createAbstractTypeAdapter();
      }
      @Override
      public Adapter caseSystemComponent(SystemComponent object)
      {
        return createSystemComponentAdapter();
      }
      @Override
      public Adapter caseCommunicationLink(CommunicationLink object)
      {
        return createCommunicationLinkAdapter();
      }
      @Override
      public Adapter caseInterfaceUse(InterfaceUse object)
      {
        return createInterfaceUseAdapter();
      }
      @Override
      public Adapter caseInterfaceImplementation(InterfaceImplementation object)
      {
        return createInterfaceImplementationAdapter();
      }
      @Override
      public Adapter caseComponentRealization(ComponentRealization object)
      {
        return createComponentRealizationAdapter();
      }
      @Override
      public Adapter caseDataPkg(DataPkg object)
      {
        return createDataPkgAdapter();
      }
      @Override
      public Adapter caseDataPkgs(DataPkgs object)
      {
        return createDataPkgsAdapter();
      }
      @Override
      public Adapter caseDataType(DataType object)
      {
        return createDataTypeAdapter();
      }
      @Override
      public Adapter caseMessage(Message object)
      {
        return createMessageAdapter();
      }
      @Override
      public Adapter caseFunctionalChainInvolvementLink(FunctionalChainInvolvementLink object)
      {
        return createFunctionalChainInvolvementLinkAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.SystemAnalysis <em>System Analysis</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.SystemAnalysis
   * @generated
   */
  public Adapter createSystemAnalysisAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.AbstractCapabilityPkg <em>Abstract Capability Pkg</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.AbstractCapabilityPkg
   * @generated
   */
  public Adapter createAbstractCapabilityPkgAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.ComponentFunctionalAllocation <em>Component Functional Allocation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.ComponentFunctionalAllocation
   * @generated
   */
  public Adapter createComponentFunctionalAllocationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.PropertyValuePkg <em>Property Value Pkg</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.PropertyValuePkg
   * @generated
   */
  public Adapter createPropertyValuePkgAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.AbstractPropertyValue <em>Abstract Property Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.AbstractPropertyValue
   * @generated
   */
  public Adapter createAbstractPropertyValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.EnumerationPropertyType <em>Enumeration Property Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.EnumerationPropertyType
   * @generated
   */
  public Adapter createEnumerationPropertyTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.PropertyValueGroup <em>Property Value Group</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.PropertyValueGroup
   * @generated
   */
  public Adapter createPropertyValueGroupAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.Trace <em>Trace</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.Trace
   * @generated
   */
  public Adapter createTraceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.EnumerationPropertyLiteral <em>Enumeration Property Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.EnumerationPropertyLiteral
   * @generated
   */
  public Adapter createEnumerationPropertyLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.OperationalAnalysisRealization <em>Operational Analysis Realization</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.OperationalAnalysisRealization
   * @generated
   */
  public Adapter createOperationalAnalysisRealizationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.SystemFunctionPkg <em>System Function Pkg</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.SystemFunctionPkg
   * @generated
   */
  public Adapter createSystemFunctionPkgAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.ExchangeSpecificationRealization <em>Exchange Specification Realization</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.ExchangeSpecificationRealization
   * @generated
   */
  public Adapter createExchangeSpecificationRealizationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.FunctionalExchangeSpecification <em>Functional Exchange Specification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.FunctionalExchangeSpecification
   * @generated
   */
  public Adapter createFunctionalExchangeSpecificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.ExchangeLink <em>Exchange Link</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.ExchangeLink
   * @generated
   */
  public Adapter createExchangeLinkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.ExchangeContainment <em>Exchange Containment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.ExchangeContainment
   * @generated
   */
  public Adapter createExchangeContainmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.ExchangeCategory <em>Exchange Category</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.ExchangeCategory
   * @generated
   */
  public Adapter createExchangeCategoryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.FunctionSpecification <em>Function Specification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.FunctionSpecification
   * @generated
   */
  public Adapter createFunctionSpecificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.ActivityNode <em>Activity Node</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.ActivityNode
   * @generated
   */
  public Adapter createActivityNodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.ActivityGroup <em>Activity Group</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.ActivityGroup
   * @generated
   */
  public Adapter createActivityGroupAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.ActivityEdge <em>Activity Edge</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.ActivityEdge
   * @generated
   */
  public Adapter createActivityEdgeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.SystemFunction <em>System Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.SystemFunction
   * @generated
   */
  public Adapter createSystemFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.AbstractFunction <em>Abstract Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.AbstractFunction
   * @generated
   */
  public Adapter createAbstractFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.Constraint <em>Constraint</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.Constraint
   * @generated
   */
  public Adapter createConstraintAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.Initialization <em>Initialization</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.Initialization
   * @generated
   */
  public Adapter createInitializationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.Invariant <em>Invariant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.Invariant
   * @generated
   */
  public Adapter createInvariantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.OpaqueExpression <em>Opaque Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.OpaqueExpression
   * @generated
   */
  public Adapter createOpaqueExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.InputOutputPin <em>Input Output Pin</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.InputOutputPin
   * @generated
   */
  public Adapter createInputOutputPinAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.ValueSpecification <em>Value Specification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.ValueSpecification
   * @generated
   */
  public Adapter createValueSpecificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.FunctionalExchange <em>Functional Exchange</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.FunctionalExchange
   * @generated
   */
  public Adapter createFunctionalExchangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.FunctionalExchangeRealization <em>Functional Exchange Realization</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.FunctionalExchangeRealization
   * @generated
   */
  public Adapter createFunctionalExchangeRealizationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.FunctionRealization <em>Function Realization</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.FunctionRealization
   * @generated
   */
  public Adapter createFunctionRealizationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.ExceptionHandler <em>Exception Handler</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.ExceptionHandler
   * @generated
   */
  public Adapter createExceptionHandlerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.DataValue <em>Data Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.DataValue
   * @generated
   */
  public Adapter createDataValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.ValueTag <em>Value Tag</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.ValueTag
   * @generated
   */
  public Adapter createValueTagAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.FunctionalChain <em>Functional Chain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.FunctionalChain
   * @generated
   */
  public Adapter createFunctionalChainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.ControlNode <em>Control Node</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.ControlNode
   * @generated
   */
  public Adapter createControlNodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.SequenceLink <em>Sequence Link</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.SequenceLink
   * @generated
   */
  public Adapter createSequenceLinkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.FunctionalChainInvolvement <em>Functional Chain Involvement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.FunctionalChainInvolvement
   * @generated
   */
  public Adapter createFunctionalChainInvolvementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.FunctionalChainRealization <em>Functional Chain Realization</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.FunctionalChainRealization
   * @generated
   */
  public Adapter createFunctionalChainRealizationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.ComponentExchange <em>Component Exchange</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.ComponentExchange
   * @generated
   */
  public Adapter createComponentExchangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.ComponentExchangeRealization <em>Component Exchange Realization</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.ComponentExchangeRealization
   * @generated
   */
  public Adapter createComponentExchangeRealizationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.ComponentExchangeCategory <em>Component Exchange Category</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.ComponentExchangeCategory
   * @generated
   */
  public Adapter createComponentExchangeCategoryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.ComponentExchangeFunctionalExchangeAllocation <em>Component Exchange Functional Exchange Allocation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.ComponentExchangeFunctionalExchangeAllocation
   * @generated
   */
  public Adapter createComponentExchangeFunctionalExchangeAllocationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.ComponentExchangeEnd <em>Component Exchange End</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.ComponentExchangeEnd
   * @generated
   */
  public Adapter createComponentExchangeEndAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.RequirementsPkg <em>Requirements Pkg</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.RequirementsPkg
   * @generated
   */
  public Adapter createRequirementsPkgAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.Requirement <em>Requirement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.Requirement
   * @generated
   */
  public Adapter createRequirementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.InterfacePkg <em>Interface Pkg</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.InterfacePkg
   * @generated
   */
  public Adapter createInterfacePkgAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.MessageReference <em>Message Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.MessageReference
   * @generated
   */
  public Adapter createMessageReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.Interface <em>Interface</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.Interface
   * @generated
   */
  public Adapter createInterfaceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.InterfaceAllocation <em>Interface Allocation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.InterfaceAllocation
   * @generated
   */
  public Adapter createInterfaceAllocationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.Feature <em>Feature</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.Feature
   * @generated
   */
  public Adapter createFeatureAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.ExchangeItemAllocation <em>Exchange Item Allocation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.ExchangeItemAllocation
   * @generated
   */
  public Adapter createExchangeItemAllocationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.ExchangeItem <em>Exchange Item</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.ExchangeItem
   * @generated
   */
  public Adapter createExchangeItemAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.ExchangeItemElement <em>Exchange Item Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.ExchangeItemElement
   * @generated
   */
  public Adapter createExchangeItemElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.Generalization <em>Generalization</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.Generalization
   * @generated
   */
  public Adapter createGeneralizationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.InformationRealization <em>Information Realization</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.InformationRealization
   * @generated
   */
  public Adapter createInformationRealizationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.MissionPkg <em>Mission Pkg</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.MissionPkg
   * @generated
   */
  public Adapter createMissionPkgAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.Mission <em>Mission</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.Mission
   * @generated
   */
  public Adapter createMissionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.MissionInvolvement <em>Mission Involvement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.MissionInvolvement
   * @generated
   */
  public Adapter createMissionInvolvementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.CapabilityExploitation <em>Capability Exploitation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.CapabilityExploitation
   * @generated
   */
  public Adapter createCapabilityExploitationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.SystemComponentPkg <em>System Component Pkg</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.SystemComponentPkg
   * @generated
   */
  public Adapter createSystemComponentPkgAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.StateMachine <em>State Machine</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.StateMachine
   * @generated
   */
  public Adapter createStateMachineAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.Region <em>Region</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.Region
   * @generated
   */
  public Adapter createRegionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.StateTransition <em>State Transition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.StateTransition
   * @generated
   */
  public Adapter createStateTransitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.StateTransitionRealization <em>State Transition Realization</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.StateTransitionRealization
   * @generated
   */
  public Adapter createStateTransitionRealizationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.Part <em>Part</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.Part
   * @generated
   */
  public Adapter createPartAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.AbstractDeploymentLink <em>Abstract Deployment Link</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.AbstractDeploymentLink
   * @generated
   */
  public Adapter createAbstractDeploymentLinkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.AbstractType <em>Abstract Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.AbstractType
   * @generated
   */
  public Adapter createAbstractTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.SystemComponent <em>System Component</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.SystemComponent
   * @generated
   */
  public Adapter createSystemComponentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.CommunicationLink <em>Communication Link</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.CommunicationLink
   * @generated
   */
  public Adapter createCommunicationLinkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.InterfaceUse <em>Interface Use</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.InterfaceUse
   * @generated
   */
  public Adapter createInterfaceUseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.InterfaceImplementation <em>Interface Implementation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.InterfaceImplementation
   * @generated
   */
  public Adapter createInterfaceImplementationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.ComponentRealization <em>Component Realization</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.ComponentRealization
   * @generated
   */
  public Adapter createComponentRealizationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.DataPkg <em>Data Pkg</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.DataPkg
   * @generated
   */
  public Adapter createDataPkgAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.DataPkgs <em>Data Pkgs</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.DataPkgs
   * @generated
   */
  public Adapter createDataPkgsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.DataType <em>Data Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.DataType
   * @generated
   */
  public Adapter createDataTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.Message <em>Message</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.Message
   * @generated
   */
  public Adapter createMessageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.mydsl.mySADsl.FunctionalChainInvolvementLink <em>Functional Chain Involvement Link</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.mydsl.mySADsl.FunctionalChainInvolvementLink
   * @generated
   */
  public Adapter createFunctionalChainInvolvementLinkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //MySADslAdapterFactory
