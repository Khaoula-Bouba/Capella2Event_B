/**
 * generated by Xtext 2.22.0
 */
package org.xtext.example.newoamydsl.myDslnew.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.newoamydsl.myDslnew.AbstractDeploymentLink;
import org.xtext.example.newoamydsl.myDslnew.AbstractFunction;
import org.xtext.example.newoamydsl.myDslnew.AbstractPropertyValue;
import org.xtext.example.newoamydsl.myDslnew.AbstractType;
import org.xtext.example.newoamydsl.myDslnew.ActivityAllocation;
import org.xtext.example.newoamydsl.myDslnew.ActivityEdge;
import org.xtext.example.newoamydsl.myDslnew.ActivityGroup;
import org.xtext.example.newoamydsl.myDslnew.ActivityNode;
import org.xtext.example.newoamydsl.myDslnew.AggregationKind;
import org.xtext.example.newoamydsl.myDslnew.Association;
import org.xtext.example.newoamydsl.myDslnew.BinaryOperator;
import org.xtext.example.newoamydsl.myDslnew.CapabilityConfiguration;
import org.xtext.example.newoamydsl.myDslnew.Collection;
import org.xtext.example.newoamydsl.myDslnew.CollectionKind;
import org.xtext.example.newoamydsl.myDslnew.CommunicationLink;
import org.xtext.example.newoamydsl.myDslnew.CommunicationLinkKind;
import org.xtext.example.newoamydsl.myDslnew.CommunicationLinkProtocol;
import org.xtext.example.newoamydsl.myDslnew.CommunicationMean;
import org.xtext.example.newoamydsl.myDslnew.ComponentExchange;
import org.xtext.example.newoamydsl.myDslnew.ComponentExchangeAllocation;
import org.xtext.example.newoamydsl.myDslnew.ComponentExchangeCategory;
import org.xtext.example.newoamydsl.myDslnew.ComponentExchangeEnd;
import org.xtext.example.newoamydsl.myDslnew.ComponentExchangeFunctionalExchangeAllocation;
import org.xtext.example.newoamydsl.myDslnew.ComponentExchangeKind;
import org.xtext.example.newoamydsl.myDslnew.ComponentExchangeRealization;
import org.xtext.example.newoamydsl.myDslnew.ComponentFunctionalAllocation;
import org.xtext.example.newoamydsl.myDslnew.ComponentRealization;
import org.xtext.example.newoamydsl.myDslnew.Concept;
import org.xtext.example.newoamydsl.myDslnew.ConceptCompliance;
import org.xtext.example.newoamydsl.myDslnew.ConceptPkg;
import org.xtext.example.newoamydsl.myDslnew.Constraint;
import org.xtext.example.newoamydsl.myDslnew.ControlNode;
import org.xtext.example.newoamydsl.myDslnew.ControlNodeKind;
import org.xtext.example.newoamydsl.myDslnew.DataPkg;
import org.xtext.example.newoamydsl.myDslnew.DataType;
import org.xtext.example.newoamydsl.myDslnew.DataValue;
import org.xtext.example.newoamydsl.myDslnew.ElementKind;
import org.xtext.example.newoamydsl.myDslnew.Entity;
import org.xtext.example.newoamydsl.myDslnew.EntityOperationalCapabilityInvolvement;
import org.xtext.example.newoamydsl.myDslnew.EntityPkg;
import org.xtext.example.newoamydsl.myDslnew.EnumerationPropertyLiteral;
import org.xtext.example.newoamydsl.myDslnew.EnumerationPropertyType;
import org.xtext.example.newoamydsl.myDslnew.EventKind;
import org.xtext.example.newoamydsl.myDslnew.ExceptionHandler;
import org.xtext.example.newoamydsl.myDslnew.ExchangeCategory;
import org.xtext.example.newoamydsl.myDslnew.ExchangeContainment;
import org.xtext.example.newoamydsl.myDslnew.ExchangeItem;
import org.xtext.example.newoamydsl.myDslnew.ExchangeItemAllocation;
import org.xtext.example.newoamydsl.myDslnew.ExchangeItemElement;
import org.xtext.example.newoamydsl.myDslnew.ExchangeItemInstance;
import org.xtext.example.newoamydsl.myDslnew.ExchangeLink;
import org.xtext.example.newoamydsl.myDslnew.ExchangeMechanism;
import org.xtext.example.newoamydsl.myDslnew.ExchangeSpecificationRealization;
import org.xtext.example.newoamydsl.myDslnew.Feature;
import org.xtext.example.newoamydsl.myDslnew.FunctionKind;
import org.xtext.example.newoamydsl.myDslnew.FunctionPkg;
import org.xtext.example.newoamydsl.myDslnew.FunctionRealization;
import org.xtext.example.newoamydsl.myDslnew.FunctionSpecification;
import org.xtext.example.newoamydsl.myDslnew.FunctionalChain;
import org.xtext.example.newoamydsl.myDslnew.FunctionalChainInvolvement;
import org.xtext.example.newoamydsl.myDslnew.FunctionalChainInvolvementLink;
import org.xtext.example.newoamydsl.myDslnew.FunctionalChainKind;
import org.xtext.example.newoamydsl.myDslnew.FunctionalChainRealization;
import org.xtext.example.newoamydsl.myDslnew.FunctionalExchange;
import org.xtext.example.newoamydsl.myDslnew.FunctionalExchangeRealization;
import org.xtext.example.newoamydsl.myDslnew.FunctionalExchangeSpecification;
import org.xtext.example.newoamydsl.myDslnew.GeneralClass;
import org.xtext.example.newoamydsl.myDslnew.Generalization;
import org.xtext.example.newoamydsl.myDslnew.InformationRealization;
import org.xtext.example.newoamydsl.myDslnew.Initialization;
import org.xtext.example.newoamydsl.myDslnew.InputOutputPin;
import org.xtext.example.newoamydsl.myDslnew.Interface;
import org.xtext.example.newoamydsl.myDslnew.InterfaceAllocation;
import org.xtext.example.newoamydsl.myDslnew.InterfaceImplementation;
import org.xtext.example.newoamydsl.myDslnew.InterfacePkg;
import org.xtext.example.newoamydsl.myDslnew.InterfaceUse;
import org.xtext.example.newoamydsl.myDslnew.Invariant;
import org.xtext.example.newoamydsl.myDslnew.ItemInConcept;
import org.xtext.example.newoamydsl.myDslnew.KeyPart;
import org.xtext.example.newoamydsl.myDslnew.Location;
import org.xtext.example.newoamydsl.myDslnew.Message;
import org.xtext.example.newoamydsl.myDslnew.MessageReference;
import org.xtext.example.newoamydsl.myDslnew.MyDslnewFactory;
import org.xtext.example.newoamydsl.myDslnew.MyDslnewPackage;
import org.xtext.example.newoamydsl.myDslnew.NumericTypeKind;
import org.xtext.example.newoamydsl.myDslnew.ObjectNodeKind;
import org.xtext.example.newoamydsl.myDslnew.ObjectNodeOrderingKind;
import org.xtext.example.newoamydsl.myDslnew.OpaqueExpression;
import org.xtext.example.newoamydsl.myDslnew.OperationalActivity;
import org.xtext.example.newoamydsl.myDslnew.OperationalActivityPkg;
import org.xtext.example.newoamydsl.myDslnew.OperationalCapability;
import org.xtext.example.newoamydsl.myDslnew.OperationalCapabilityPkg;
import org.xtext.example.newoamydsl.myDslnew.ParameterDirection;
import org.xtext.example.newoamydsl.myDslnew.Part;
import org.xtext.example.newoamydsl.myDslnew.PhysicalLink;
import org.xtext.example.newoamydsl.myDslnew.PhysicalLinkEnd;
import org.xtext.example.newoamydsl.myDslnew.PhysicalLinkRealization;
import org.xtext.example.newoamydsl.myDslnew.PhysicalPath;
import org.xtext.example.newoamydsl.myDslnew.PhysicalPathInvolvement;
import org.xtext.example.newoamydsl.myDslnew.PropertyValueGroup;
import org.xtext.example.newoamydsl.myDslnew.PropertyValuePkg;
import org.xtext.example.newoamydsl.myDslnew.RateKind;
import org.xtext.example.newoamydsl.myDslnew.Region;
import org.xtext.example.newoamydsl.myDslnew.Requirement;
import org.xtext.example.newoamydsl.myDslnew.RequirementsPkg;
import org.xtext.example.newoamydsl.myDslnew.Role;
import org.xtext.example.newoamydsl.myDslnew.RoleAllocation;
import org.xtext.example.newoamydsl.myDslnew.RoleAssemblyUsage;
import org.xtext.example.newoamydsl.myDslnew.RolePkg;
import org.xtext.example.newoamydsl.myDslnew.SequenceLink;
import org.xtext.example.newoamydsl.myDslnew.Signal;
import org.xtext.example.newoamydsl.myDslnew.SignalInstance;
import org.xtext.example.newoamydsl.myDslnew.StateEvent;
import org.xtext.example.newoamydsl.myDslnew.StateEventRealization;
import org.xtext.example.newoamydsl.myDslnew.StateMachine;
import org.xtext.example.newoamydsl.myDslnew.StateTransition;
import org.xtext.example.newoamydsl.myDslnew.StateTransitionRealization;
import org.xtext.example.newoamydsl.myDslnew.Trace;
import org.xtext.example.newoamydsl.myDslnew.TransitionKind;
import org.xtext.example.newoamydsl.myDslnew.UnaryOperator;
import org.xtext.example.newoamydsl.myDslnew.UnionKind;
import org.xtext.example.newoamydsl.myDslnew.Unit;
import org.xtext.example.newoamydsl.myDslnew.ValueSpecification;
import org.xtext.example.newoamydsl.myDslnew.ValueTag;
import org.xtext.example.newoamydsl.myDslnew.VisibilityKind;
import org.xtext.example.newoamydsl.myDslnew.operationalAnalysis;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MyDslnewFactoryImpl extends EFactoryImpl implements MyDslnewFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MyDslnewFactory init()
  {
    try
    {
      MyDslnewFactory theMyDslnewFactory = (MyDslnewFactory)EPackage.Registry.INSTANCE.getEFactory(MyDslnewPackage.eNS_URI);
      if (theMyDslnewFactory != null)
      {
        return theMyDslnewFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MyDslnewFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyDslnewFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MyDslnewPackage.OPERATIONAL_ANALYSIS: return createoperationalAnalysis();
      case MyDslnewPackage.OPERATIONAL_CAPABILITY_PKG: return createOperationalCapabilityPkg();
      case MyDslnewPackage.OPERATIONAL_CAPABILITY: return createOperationalCapability();
      case MyDslnewPackage.ENTITY_OPERATIONAL_CAPABILITY_INVOLVEMENT: return createEntityOperationalCapabilityInvolvement();
      case MyDslnewPackage.CONCEPT_COMPLIANCE: return createConceptCompliance();
      case MyDslnewPackage.CAPABILITY_CONFIGURATION: return createCapabilityConfiguration();
      case MyDslnewPackage.COMPONENT_FUNCTIONAL_ALLOCATION: return createComponentFunctionalAllocation();
      case MyDslnewPackage.REQUIREMENTS_PKG: return createRequirementsPkg();
      case MyDslnewPackage.REQUIREMENT: return createRequirement();
      case MyDslnewPackage.ABSTRACT_PROPERTY_VALUE: return createAbstractPropertyValue();
      case MyDslnewPackage.ENUMERATION_PROPERTY_TYPE: return createEnumerationPropertyType();
      case MyDslnewPackage.PROPERTY_VALUE_GROUP: return createPropertyValueGroup();
      case MyDslnewPackage.ENUMERATION_PROPERTY_LITERAL: return createEnumerationPropertyLiteral();
      case MyDslnewPackage.TRACE: return createTrace();
      case MyDslnewPackage.PROPERTY_VALUE_PKG: return createPropertyValuePkg();
      case MyDslnewPackage.EXCHANGE_LINK: return createExchangeLink();
      case MyDslnewPackage.EXCHANGE_CONTAINMENT: return createExchangeContainment();
      case MyDslnewPackage.FUNCTION_PKG: return createFunctionPkg();
      case MyDslnewPackage.OPERATIONAL_ACTIVITY_PKG: return createOperationalActivityPkg();
      case MyDslnewPackage.EXCHANGE_CATEGORY: return createExchangeCategory();
      case MyDslnewPackage.EXCHANGE_SPECIFICATION_REALIZATION: return createExchangeSpecificationRealization();
      case MyDslnewPackage.COMPONENT_EXCHANGE_REALIZATION: return createComponentExchangeRealization();
      case MyDslnewPackage.FUNCTIONAL_EXCHANGE_SPECIFICATION: return createFunctionalExchangeSpecification();
      case MyDslnewPackage.FUNCTION_SPECIFICATION: return createFunctionSpecification();
      case MyDslnewPackage.ACTIVITY_NODE: return createActivityNode();
      case MyDslnewPackage.ACTIVITY_GROUP: return createActivityGroup();
      case MyDslnewPackage.ACTIVITY_EDGE: return createActivityEdge();
      case MyDslnewPackage.VALUE_SPECIFICATION: return createValueSpecification();
      case MyDslnewPackage.OPERATIONAL_ACTIVITY: return createOperationalActivity();
      case MyDslnewPackage.FUNCTIONAL_EXCHANGE: return createFunctionalExchange();
      case MyDslnewPackage.FUNCTIONAL_EXCHANGE_REALIZATION: return createFunctionalExchangeRealization();
      case MyDslnewPackage.INPUT_OUTPUT_PIN: return createInputOutputPin();
      case MyDslnewPackage.EXCEPTION_HANDLER: return createExceptionHandler();
      case MyDslnewPackage.FUNCTIONAL_CHAIN: return createFunctionalChain();
      case MyDslnewPackage.FUNCTIONAL_CHAIN_INVOLVEMENT: return createFunctionalChainInvolvement();
      case MyDslnewPackage.FUNCTIONAL_CHAIN_REALIZATION: return createFunctionalChainRealization();
      case MyDslnewPackage.CONTROL_NODE: return createControlNode();
      case MyDslnewPackage.SEQUENCE_LINK: return createSequenceLink();
      case MyDslnewPackage.DATA_VALUE: return createDataValue();
      case MyDslnewPackage.VALUE_TAG: return createValueTag();
      case MyDslnewPackage.ABSTRACT_FUNCTION: return createAbstractFunction();
      case MyDslnewPackage.CONSTRAINT: return createConstraint();
      case MyDslnewPackage.INITIALIZATION: return createInitialization();
      case MyDslnewPackage.INVARIANT: return createInvariant();
      case MyDslnewPackage.OPAQUE_EXPRESSION: return createOpaqueExpression();
      case MyDslnewPackage.FUNCTION_REALIZATION: return createFunctionRealization();
      case MyDslnewPackage.COMPONENT_EXCHANGE: return createComponentExchange();
      case MyDslnewPackage.COMPONENT_EXCHANGE_CATEGORY: return createComponentExchangeCategory();
      case MyDslnewPackage.COMPONENT_EXCHANGE_FUNCTIONAL_EXCHANGE_ALLOCATION: return createComponentExchangeFunctionalExchangeAllocation();
      case MyDslnewPackage.COMPONENT_EXCHANGE_END: return createComponentExchangeEnd();
      case MyDslnewPackage.INTERFACE_PKG: return createInterfacePkg();
      case MyDslnewPackage.EXCHANGE_ITEM: return createExchangeItem();
      case MyDslnewPackage.INFORMATION_REALIZATION: return createInformationRealization();
      case MyDslnewPackage.EXCHANGE_ITEM_ELEMENT: return createExchangeItemElement();
      case MyDslnewPackage.MESSAGE_REFERENCE: return createMessageReference();
      case MyDslnewPackage.INTERFACE: return createInterface();
      case MyDslnewPackage.EXCHANGE_ITEM_ALLOCATION: return createExchangeItemAllocation();
      case MyDslnewPackage.GENERAL_CLASS: return createGeneralClass();
      case MyDslnewPackage.INTERFACE_ALLOCATION: return createInterfaceAllocation();
      case MyDslnewPackage.FEATURE: return createFeature();
      case MyDslnewPackage.GENERALIZATION: return createGeneralization();
      case MyDslnewPackage.DATA_PKG: return createDataPkg();
      case MyDslnewPackage.STATE_EVENT: return createStateEvent();
      case MyDslnewPackage.STATE_EVENT_REALIZATION: return createStateEventRealization();
      case MyDslnewPackage.MESSAGE: return createMessage();
      case MyDslnewPackage.UNIT: return createUnit();
      case MyDslnewPackage.CLASS: return createClass();
      case MyDslnewPackage.KEY_PART: return createKeyPart();
      case MyDslnewPackage.COLLECTION: return createCollection();
      case MyDslnewPackage.ASSOCIATION: return createAssociation();
      case MyDslnewPackage.EXCHANGE_ITEM_INSTANCE: return createExchangeItemInstance();
      case MyDslnewPackage.DATA_TYPE: return createDataType();
      case MyDslnewPackage.SIGNAL: return createSignal();
      case MyDslnewPackage.SIGNAL_INSTANCE: return createSignalInstance();
      case MyDslnewPackage.EXCEPTION: return createException();
      case MyDslnewPackage.STATE_MACHINE: return createStateMachine();
      case MyDslnewPackage.REGION: return createRegion();
      case MyDslnewPackage.STATE_TRANSITION: return createStateTransition();
      case MyDslnewPackage.STATE_TRANSITION_REALIZATION: return createStateTransitionRealization();
      case MyDslnewPackage.ROLE_PKG: return createRolePkg();
      case MyDslnewPackage.ROLE: return createRole();
      case MyDslnewPackage.ACTIVITY_ALLOCATION: return createActivityAllocation();
      case MyDslnewPackage.ROLE_ASSEMBLY_USAGE: return createRoleAssemblyUsage();
      case MyDslnewPackage.ENTITY_PKG: return createEntityPkg();
      case MyDslnewPackage.PART: return createPart();
      case MyDslnewPackage.ABSTRACT_TYPE: return createAbstractType();
      case MyDslnewPackage.ABSTRACT_DEPLOYMENT_LINK: return createAbstractDeploymentLink();
      case MyDslnewPackage.PHYSICAL_LINK: return createPhysicalLink();
      case MyDslnewPackage.COMPONENT_EXCHANGE_ALLOCATION: return createComponentExchangeAllocation();
      case MyDslnewPackage.PHYSICAL_LINK_REALIZATION: return createPhysicalLinkRealization();
      case MyDslnewPackage.PHYSICAL_LINK_END: return createPhysicalLinkEnd();
      case MyDslnewPackage.LOCATION: return createLocation();
      case MyDslnewPackage.COMMUNICATION_MEAN: return createCommunicationMean();
      case MyDslnewPackage.ENTITY: return createEntity();
      case MyDslnewPackage.COMPONENT_REALIZATION: return createComponentRealization();
      case MyDslnewPackage.PHYSICAL_PATH: return createPhysicalPath();
      case MyDslnewPackage.PHYSICAL_PATH_INVOLVEMENT: return createPhysicalPathInvolvement();
      case MyDslnewPackage.INTERFACE_USE: return createInterfaceUse();
      case MyDslnewPackage.INTERFACE_IMPLEMENTATION: return createInterfaceImplementation();
      case MyDslnewPackage.COMMUNICATION_LINK: return createCommunicationLink();
      case MyDslnewPackage.ROLE_ALLOCATION: return createRoleAllocation();
      case MyDslnewPackage.CONCEPT_PKG: return createConceptPkg();
      case MyDslnewPackage.CONCEPT: return createConcept();
      case MyDslnewPackage.ITEM_IN_CONCEPT: return createItemInConcept();
      case MyDslnewPackage.FUNCTIONAL_CHAIN_INVOLVEMENT_LINK: return createFunctionalChainInvolvementLink();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case MyDslnewPackage.NUMERIC_TYPE_KIND:
        return createNumericTypeKindFromString(eDataType, initialValue);
      case MyDslnewPackage.PARAMETER_DIRECTION:
        return createParameterDirectionFromString(eDataType, initialValue);
      case MyDslnewPackage.ELEMENT_KIND:
        return createElementKindFromString(eDataType, initialValue);
      case MyDslnewPackage.COMPONENT_EXCHANGE_KIND:
        return createComponentExchangeKindFromString(eDataType, initialValue);
      case MyDslnewPackage.OBJECT_NODE_KIND:
        return createObjectNodeKindFromString(eDataType, initialValue);
      case MyDslnewPackage.OBJECT_NODE_ORDERING_KIND:
        return createObjectNodeOrderingKindFromString(eDataType, initialValue);
      case MyDslnewPackage.FUNCTION_KIND:
        return createFunctionKindFromString(eDataType, initialValue);
      case MyDslnewPackage.BINARY_OPERATOR:
        return createBinaryOperatorFromString(eDataType, initialValue);
      case MyDslnewPackage.UNARY_OPERATOR:
        return createUnaryOperatorFromString(eDataType, initialValue);
      case MyDslnewPackage.TRANSITION_KIND:
        return createTransitionKindFromString(eDataType, initialValue);
      case MyDslnewPackage.COMMUNICATION_LINK_PROTOCOL:
        return createCommunicationLinkProtocolFromString(eDataType, initialValue);
      case MyDslnewPackage.AGGREGATION_KIND:
        return createAggregationKindFromString(eDataType, initialValue);
      case MyDslnewPackage.UNION_KIND:
        return createUnionKindFromString(eDataType, initialValue);
      case MyDslnewPackage.COLLECTION_KIND:
        return createCollectionKindFromString(eDataType, initialValue);
      case MyDslnewPackage.VISIBILITY_KIND:
        return createVisibilityKindFromString(eDataType, initialValue);
      case MyDslnewPackage.EVENT_KIND:
        return createEventKindFromString(eDataType, initialValue);
      case MyDslnewPackage.RATE_KIND:
        return createRateKindFromString(eDataType, initialValue);
      case MyDslnewPackage.FUNCTIONAL_CHAIN_KIND:
        return createFunctionalChainKindFromString(eDataType, initialValue);
      case MyDslnewPackage.CONTROL_NODE_KIND:
        return createControlNodeKindFromString(eDataType, initialValue);
      case MyDslnewPackage.COMMUNICATION_LINK_KIND:
        return createCommunicationLinkKindFromString(eDataType, initialValue);
      case MyDslnewPackage.EXCHANGE_MECHANISM:
        return createExchangeMechanismFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case MyDslnewPackage.NUMERIC_TYPE_KIND:
        return convertNumericTypeKindToString(eDataType, instanceValue);
      case MyDslnewPackage.PARAMETER_DIRECTION:
        return convertParameterDirectionToString(eDataType, instanceValue);
      case MyDslnewPackage.ELEMENT_KIND:
        return convertElementKindToString(eDataType, instanceValue);
      case MyDslnewPackage.COMPONENT_EXCHANGE_KIND:
        return convertComponentExchangeKindToString(eDataType, instanceValue);
      case MyDslnewPackage.OBJECT_NODE_KIND:
        return convertObjectNodeKindToString(eDataType, instanceValue);
      case MyDslnewPackage.OBJECT_NODE_ORDERING_KIND:
        return convertObjectNodeOrderingKindToString(eDataType, instanceValue);
      case MyDslnewPackage.FUNCTION_KIND:
        return convertFunctionKindToString(eDataType, instanceValue);
      case MyDslnewPackage.BINARY_OPERATOR:
        return convertBinaryOperatorToString(eDataType, instanceValue);
      case MyDslnewPackage.UNARY_OPERATOR:
        return convertUnaryOperatorToString(eDataType, instanceValue);
      case MyDslnewPackage.TRANSITION_KIND:
        return convertTransitionKindToString(eDataType, instanceValue);
      case MyDslnewPackage.COMMUNICATION_LINK_PROTOCOL:
        return convertCommunicationLinkProtocolToString(eDataType, instanceValue);
      case MyDslnewPackage.AGGREGATION_KIND:
        return convertAggregationKindToString(eDataType, instanceValue);
      case MyDslnewPackage.UNION_KIND:
        return convertUnionKindToString(eDataType, instanceValue);
      case MyDslnewPackage.COLLECTION_KIND:
        return convertCollectionKindToString(eDataType, instanceValue);
      case MyDslnewPackage.VISIBILITY_KIND:
        return convertVisibilityKindToString(eDataType, instanceValue);
      case MyDslnewPackage.EVENT_KIND:
        return convertEventKindToString(eDataType, instanceValue);
      case MyDslnewPackage.RATE_KIND:
        return convertRateKindToString(eDataType, instanceValue);
      case MyDslnewPackage.FUNCTIONAL_CHAIN_KIND:
        return convertFunctionalChainKindToString(eDataType, instanceValue);
      case MyDslnewPackage.CONTROL_NODE_KIND:
        return convertControlNodeKindToString(eDataType, instanceValue);
      case MyDslnewPackage.COMMUNICATION_LINK_KIND:
        return convertCommunicationLinkKindToString(eDataType, instanceValue);
      case MyDslnewPackage.EXCHANGE_MECHANISM:
        return convertExchangeMechanismToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public operationalAnalysis createoperationalAnalysis()
  {
    operationalAnalysisImpl operationalAnalysis = new operationalAnalysisImpl();
    return operationalAnalysis;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OperationalCapabilityPkg createOperationalCapabilityPkg()
  {
    OperationalCapabilityPkgImpl operationalCapabilityPkg = new OperationalCapabilityPkgImpl();
    return operationalCapabilityPkg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OperationalCapability createOperationalCapability()
  {
    OperationalCapabilityImpl operationalCapability = new OperationalCapabilityImpl();
    return operationalCapability;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EntityOperationalCapabilityInvolvement createEntityOperationalCapabilityInvolvement()
  {
    EntityOperationalCapabilityInvolvementImpl entityOperationalCapabilityInvolvement = new EntityOperationalCapabilityInvolvementImpl();
    return entityOperationalCapabilityInvolvement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConceptCompliance createConceptCompliance()
  {
    ConceptComplianceImpl conceptCompliance = new ConceptComplianceImpl();
    return conceptCompliance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CapabilityConfiguration createCapabilityConfiguration()
  {
    CapabilityConfigurationImpl capabilityConfiguration = new CapabilityConfigurationImpl();
    return capabilityConfiguration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComponentFunctionalAllocation createComponentFunctionalAllocation()
  {
    ComponentFunctionalAllocationImpl componentFunctionalAllocation = new ComponentFunctionalAllocationImpl();
    return componentFunctionalAllocation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RequirementsPkg createRequirementsPkg()
  {
    RequirementsPkgImpl requirementsPkg = new RequirementsPkgImpl();
    return requirementsPkg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Requirement createRequirement()
  {
    RequirementImpl requirement = new RequirementImpl();
    return requirement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AbstractPropertyValue createAbstractPropertyValue()
  {
    AbstractPropertyValueImpl abstractPropertyValue = new AbstractPropertyValueImpl();
    return abstractPropertyValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EnumerationPropertyType createEnumerationPropertyType()
  {
    EnumerationPropertyTypeImpl enumerationPropertyType = new EnumerationPropertyTypeImpl();
    return enumerationPropertyType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PropertyValueGroup createPropertyValueGroup()
  {
    PropertyValueGroupImpl propertyValueGroup = new PropertyValueGroupImpl();
    return propertyValueGroup;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EnumerationPropertyLiteral createEnumerationPropertyLiteral()
  {
    EnumerationPropertyLiteralImpl enumerationPropertyLiteral = new EnumerationPropertyLiteralImpl();
    return enumerationPropertyLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Trace createTrace()
  {
    TraceImpl trace = new TraceImpl();
    return trace;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PropertyValuePkg createPropertyValuePkg()
  {
    PropertyValuePkgImpl propertyValuePkg = new PropertyValuePkgImpl();
    return propertyValuePkg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExchangeLink createExchangeLink()
  {
    ExchangeLinkImpl exchangeLink = new ExchangeLinkImpl();
    return exchangeLink;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExchangeContainment createExchangeContainment()
  {
    ExchangeContainmentImpl exchangeContainment = new ExchangeContainmentImpl();
    return exchangeContainment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionPkg createFunctionPkg()
  {
    FunctionPkgImpl functionPkg = new FunctionPkgImpl();
    return functionPkg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OperationalActivityPkg createOperationalActivityPkg()
  {
    OperationalActivityPkgImpl operationalActivityPkg = new OperationalActivityPkgImpl();
    return operationalActivityPkg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExchangeCategory createExchangeCategory()
  {
    ExchangeCategoryImpl exchangeCategory = new ExchangeCategoryImpl();
    return exchangeCategory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExchangeSpecificationRealization createExchangeSpecificationRealization()
  {
    ExchangeSpecificationRealizationImpl exchangeSpecificationRealization = new ExchangeSpecificationRealizationImpl();
    return exchangeSpecificationRealization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComponentExchangeRealization createComponentExchangeRealization()
  {
    ComponentExchangeRealizationImpl componentExchangeRealization = new ComponentExchangeRealizationImpl();
    return componentExchangeRealization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionalExchangeSpecification createFunctionalExchangeSpecification()
  {
    FunctionalExchangeSpecificationImpl functionalExchangeSpecification = new FunctionalExchangeSpecificationImpl();
    return functionalExchangeSpecification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionSpecification createFunctionSpecification()
  {
    FunctionSpecificationImpl functionSpecification = new FunctionSpecificationImpl();
    return functionSpecification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ActivityNode createActivityNode()
  {
    ActivityNodeImpl activityNode = new ActivityNodeImpl();
    return activityNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ActivityGroup createActivityGroup()
  {
    ActivityGroupImpl activityGroup = new ActivityGroupImpl();
    return activityGroup;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ActivityEdge createActivityEdge()
  {
    ActivityEdgeImpl activityEdge = new ActivityEdgeImpl();
    return activityEdge;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ValueSpecification createValueSpecification()
  {
    ValueSpecificationImpl valueSpecification = new ValueSpecificationImpl();
    return valueSpecification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OperationalActivity createOperationalActivity()
  {
    OperationalActivityImpl operationalActivity = new OperationalActivityImpl();
    return operationalActivity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionalExchange createFunctionalExchange()
  {
    FunctionalExchangeImpl functionalExchange = new FunctionalExchangeImpl();
    return functionalExchange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionalExchangeRealization createFunctionalExchangeRealization()
  {
    FunctionalExchangeRealizationImpl functionalExchangeRealization = new FunctionalExchangeRealizationImpl();
    return functionalExchangeRealization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InputOutputPin createInputOutputPin()
  {
    InputOutputPinImpl inputOutputPin = new InputOutputPinImpl();
    return inputOutputPin;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExceptionHandler createExceptionHandler()
  {
    ExceptionHandlerImpl exceptionHandler = new ExceptionHandlerImpl();
    return exceptionHandler;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionalChain createFunctionalChain()
  {
    FunctionalChainImpl functionalChain = new FunctionalChainImpl();
    return functionalChain;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionalChainInvolvement createFunctionalChainInvolvement()
  {
    FunctionalChainInvolvementImpl functionalChainInvolvement = new FunctionalChainInvolvementImpl();
    return functionalChainInvolvement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionalChainRealization createFunctionalChainRealization()
  {
    FunctionalChainRealizationImpl functionalChainRealization = new FunctionalChainRealizationImpl();
    return functionalChainRealization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ControlNode createControlNode()
  {
    ControlNodeImpl controlNode = new ControlNodeImpl();
    return controlNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SequenceLink createSequenceLink()
  {
    SequenceLinkImpl sequenceLink = new SequenceLinkImpl();
    return sequenceLink;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DataValue createDataValue()
  {
    DataValueImpl dataValue = new DataValueImpl();
    return dataValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ValueTag createValueTag()
  {
    ValueTagImpl valueTag = new ValueTagImpl();
    return valueTag;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AbstractFunction createAbstractFunction()
  {
    AbstractFunctionImpl abstractFunction = new AbstractFunctionImpl();
    return abstractFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Constraint createConstraint()
  {
    ConstraintImpl constraint = new ConstraintImpl();
    return constraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Initialization createInitialization()
  {
    InitializationImpl initialization = new InitializationImpl();
    return initialization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Invariant createInvariant()
  {
    InvariantImpl invariant = new InvariantImpl();
    return invariant;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OpaqueExpression createOpaqueExpression()
  {
    OpaqueExpressionImpl opaqueExpression = new OpaqueExpressionImpl();
    return opaqueExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionRealization createFunctionRealization()
  {
    FunctionRealizationImpl functionRealization = new FunctionRealizationImpl();
    return functionRealization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComponentExchange createComponentExchange()
  {
    ComponentExchangeImpl componentExchange = new ComponentExchangeImpl();
    return componentExchange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComponentExchangeCategory createComponentExchangeCategory()
  {
    ComponentExchangeCategoryImpl componentExchangeCategory = new ComponentExchangeCategoryImpl();
    return componentExchangeCategory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComponentExchangeFunctionalExchangeAllocation createComponentExchangeFunctionalExchangeAllocation()
  {
    ComponentExchangeFunctionalExchangeAllocationImpl componentExchangeFunctionalExchangeAllocation = new ComponentExchangeFunctionalExchangeAllocationImpl();
    return componentExchangeFunctionalExchangeAllocation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComponentExchangeEnd createComponentExchangeEnd()
  {
    ComponentExchangeEndImpl componentExchangeEnd = new ComponentExchangeEndImpl();
    return componentExchangeEnd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InterfacePkg createInterfacePkg()
  {
    InterfacePkgImpl interfacePkg = new InterfacePkgImpl();
    return interfacePkg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExchangeItem createExchangeItem()
  {
    ExchangeItemImpl exchangeItem = new ExchangeItemImpl();
    return exchangeItem;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InformationRealization createInformationRealization()
  {
    InformationRealizationImpl informationRealization = new InformationRealizationImpl();
    return informationRealization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExchangeItemElement createExchangeItemElement()
  {
    ExchangeItemElementImpl exchangeItemElement = new ExchangeItemElementImpl();
    return exchangeItemElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MessageReference createMessageReference()
  {
    MessageReferenceImpl messageReference = new MessageReferenceImpl();
    return messageReference;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Interface createInterface()
  {
    InterfaceImpl interface_ = new InterfaceImpl();
    return interface_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExchangeItemAllocation createExchangeItemAllocation()
  {
    ExchangeItemAllocationImpl exchangeItemAllocation = new ExchangeItemAllocationImpl();
    return exchangeItemAllocation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GeneralClass createGeneralClass()
  {
    GeneralClassImpl generalClass = new GeneralClassImpl();
    return generalClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InterfaceAllocation createInterfaceAllocation()
  {
    InterfaceAllocationImpl interfaceAllocation = new InterfaceAllocationImpl();
    return interfaceAllocation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Feature createFeature()
  {
    FeatureImpl feature = new FeatureImpl();
    return feature;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Generalization createGeneralization()
  {
    GeneralizationImpl generalization = new GeneralizationImpl();
    return generalization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DataPkg createDataPkg()
  {
    DataPkgImpl dataPkg = new DataPkgImpl();
    return dataPkg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StateEvent createStateEvent()
  {
    StateEventImpl stateEvent = new StateEventImpl();
    return stateEvent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StateEventRealization createStateEventRealization()
  {
    StateEventRealizationImpl stateEventRealization = new StateEventRealizationImpl();
    return stateEventRealization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Message createMessage()
  {
    MessageImpl message = new MessageImpl();
    return message;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Unit createUnit()
  {
    UnitImpl unit = new UnitImpl();
    return unit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.xtext.example.newoamydsl.myDslnew.Class createClass()
  {
    ClassImpl class_ = new ClassImpl();
    return class_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public KeyPart createKeyPart()
  {
    KeyPartImpl keyPart = new KeyPartImpl();
    return keyPart;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Collection createCollection()
  {
    CollectionImpl collection = new CollectionImpl();
    return collection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Association createAssociation()
  {
    AssociationImpl association = new AssociationImpl();
    return association;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExchangeItemInstance createExchangeItemInstance()
  {
    ExchangeItemInstanceImpl exchangeItemInstance = new ExchangeItemInstanceImpl();
    return exchangeItemInstance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DataType createDataType()
  {
    DataTypeImpl dataType = new DataTypeImpl();
    return dataType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Signal createSignal()
  {
    SignalImpl signal = new SignalImpl();
    return signal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SignalInstance createSignalInstance()
  {
    SignalInstanceImpl signalInstance = new SignalInstanceImpl();
    return signalInstance;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public org.xtext.example.newoamydsl.myDslnew.Exception createException()
  {
    ExceptionImpl exception = new ExceptionImpl();
    return exception;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StateMachine createStateMachine()
  {
    StateMachineImpl stateMachine = new StateMachineImpl();
    return stateMachine;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Region createRegion()
  {
    RegionImpl region = new RegionImpl();
    return region;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StateTransition createStateTransition()
  {
    StateTransitionImpl stateTransition = new StateTransitionImpl();
    return stateTransition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StateTransitionRealization createStateTransitionRealization()
  {
    StateTransitionRealizationImpl stateTransitionRealization = new StateTransitionRealizationImpl();
    return stateTransitionRealization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RolePkg createRolePkg()
  {
    RolePkgImpl rolePkg = new RolePkgImpl();
    return rolePkg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Role createRole()
  {
    RoleImpl role = new RoleImpl();
    return role;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ActivityAllocation createActivityAllocation()
  {
    ActivityAllocationImpl activityAllocation = new ActivityAllocationImpl();
    return activityAllocation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RoleAssemblyUsage createRoleAssemblyUsage()
  {
    RoleAssemblyUsageImpl roleAssemblyUsage = new RoleAssemblyUsageImpl();
    return roleAssemblyUsage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EntityPkg createEntityPkg()
  {
    EntityPkgImpl entityPkg = new EntityPkgImpl();
    return entityPkg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Part createPart()
  {
    PartImpl part = new PartImpl();
    return part;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AbstractType createAbstractType()
  {
    AbstractTypeImpl abstractType = new AbstractTypeImpl();
    return abstractType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AbstractDeploymentLink createAbstractDeploymentLink()
  {
    AbstractDeploymentLinkImpl abstractDeploymentLink = new AbstractDeploymentLinkImpl();
    return abstractDeploymentLink;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PhysicalLink createPhysicalLink()
  {
    PhysicalLinkImpl physicalLink = new PhysicalLinkImpl();
    return physicalLink;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComponentExchangeAllocation createComponentExchangeAllocation()
  {
    ComponentExchangeAllocationImpl componentExchangeAllocation = new ComponentExchangeAllocationImpl();
    return componentExchangeAllocation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PhysicalLinkRealization createPhysicalLinkRealization()
  {
    PhysicalLinkRealizationImpl physicalLinkRealization = new PhysicalLinkRealizationImpl();
    return physicalLinkRealization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PhysicalLinkEnd createPhysicalLinkEnd()
  {
    PhysicalLinkEndImpl physicalLinkEnd = new PhysicalLinkEndImpl();
    return physicalLinkEnd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Location createLocation()
  {
    LocationImpl location = new LocationImpl();
    return location;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CommunicationMean createCommunicationMean()
  {
    CommunicationMeanImpl communicationMean = new CommunicationMeanImpl();
    return communicationMean;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Entity createEntity()
  {
    EntityImpl entity = new EntityImpl();
    return entity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComponentRealization createComponentRealization()
  {
    ComponentRealizationImpl componentRealization = new ComponentRealizationImpl();
    return componentRealization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PhysicalPath createPhysicalPath()
  {
    PhysicalPathImpl physicalPath = new PhysicalPathImpl();
    return physicalPath;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PhysicalPathInvolvement createPhysicalPathInvolvement()
  {
    PhysicalPathInvolvementImpl physicalPathInvolvement = new PhysicalPathInvolvementImpl();
    return physicalPathInvolvement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InterfaceUse createInterfaceUse()
  {
    InterfaceUseImpl interfaceUse = new InterfaceUseImpl();
    return interfaceUse;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InterfaceImplementation createInterfaceImplementation()
  {
    InterfaceImplementationImpl interfaceImplementation = new InterfaceImplementationImpl();
    return interfaceImplementation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CommunicationLink createCommunicationLink()
  {
    CommunicationLinkImpl communicationLink = new CommunicationLinkImpl();
    return communicationLink;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RoleAllocation createRoleAllocation()
  {
    RoleAllocationImpl roleAllocation = new RoleAllocationImpl();
    return roleAllocation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConceptPkg createConceptPkg()
  {
    ConceptPkgImpl conceptPkg = new ConceptPkgImpl();
    return conceptPkg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Concept createConcept()
  {
    ConceptImpl concept = new ConceptImpl();
    return concept;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ItemInConcept createItemInConcept()
  {
    ItemInConceptImpl itemInConcept = new ItemInConceptImpl();
    return itemInConcept;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionalChainInvolvementLink createFunctionalChainInvolvementLink()
  {
    FunctionalChainInvolvementLinkImpl functionalChainInvolvementLink = new FunctionalChainInvolvementLinkImpl();
    return functionalChainInvolvementLink;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NumericTypeKind createNumericTypeKindFromString(EDataType eDataType, String initialValue)
  {
    NumericTypeKind result = NumericTypeKind.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertNumericTypeKindToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ParameterDirection createParameterDirectionFromString(EDataType eDataType, String initialValue)
  {
    ParameterDirection result = ParameterDirection.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertParameterDirectionToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ElementKind createElementKindFromString(EDataType eDataType, String initialValue)
  {
    ElementKind result = ElementKind.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertElementKindToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComponentExchangeKind createComponentExchangeKindFromString(EDataType eDataType, String initialValue)
  {
    ComponentExchangeKind result = ComponentExchangeKind.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertComponentExchangeKindToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ObjectNodeKind createObjectNodeKindFromString(EDataType eDataType, String initialValue)
  {
    ObjectNodeKind result = ObjectNodeKind.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertObjectNodeKindToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ObjectNodeOrderingKind createObjectNodeOrderingKindFromString(EDataType eDataType, String initialValue)
  {
    ObjectNodeOrderingKind result = ObjectNodeOrderingKind.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertObjectNodeOrderingKindToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunctionKind createFunctionKindFromString(EDataType eDataType, String initialValue)
  {
    FunctionKind result = FunctionKind.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertFunctionKindToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BinaryOperator createBinaryOperatorFromString(EDataType eDataType, String initialValue)
  {
    BinaryOperator result = BinaryOperator.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertBinaryOperatorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UnaryOperator createUnaryOperatorFromString(EDataType eDataType, String initialValue)
  {
    UnaryOperator result = UnaryOperator.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertUnaryOperatorToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TransitionKind createTransitionKindFromString(EDataType eDataType, String initialValue)
  {
    TransitionKind result = TransitionKind.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertTransitionKindToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CommunicationLinkProtocol createCommunicationLinkProtocolFromString(EDataType eDataType, String initialValue)
  {
    CommunicationLinkProtocol result = CommunicationLinkProtocol.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertCommunicationLinkProtocolToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AggregationKind createAggregationKindFromString(EDataType eDataType, String initialValue)
  {
    AggregationKind result = AggregationKind.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertAggregationKindToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UnionKind createUnionKindFromString(EDataType eDataType, String initialValue)
  {
    UnionKind result = UnionKind.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertUnionKindToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CollectionKind createCollectionKindFromString(EDataType eDataType, String initialValue)
  {
    CollectionKind result = CollectionKind.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertCollectionKindToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VisibilityKind createVisibilityKindFromString(EDataType eDataType, String initialValue)
  {
    VisibilityKind result = VisibilityKind.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertVisibilityKindToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EventKind createEventKindFromString(EDataType eDataType, String initialValue)
  {
    EventKind result = EventKind.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertEventKindToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RateKind createRateKindFromString(EDataType eDataType, String initialValue)
  {
    RateKind result = RateKind.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertRateKindToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunctionalChainKind createFunctionalChainKindFromString(EDataType eDataType, String initialValue)
  {
    FunctionalChainKind result = FunctionalChainKind.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertFunctionalChainKindToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ControlNodeKind createControlNodeKindFromString(EDataType eDataType, String initialValue)
  {
    ControlNodeKind result = ControlNodeKind.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertControlNodeKindToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CommunicationLinkKind createCommunicationLinkKindFromString(EDataType eDataType, String initialValue)
  {
    CommunicationLinkKind result = CommunicationLinkKind.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertCommunicationLinkKindToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ExchangeMechanism createExchangeMechanismFromString(EDataType eDataType, String initialValue)
  {
    ExchangeMechanism result = ExchangeMechanism.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertExchangeMechanismToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MyDslnewPackage getMyDslnewPackage()
  {
    return (MyDslnewPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MyDslnewPackage getPackage()
  {
    return MyDslnewPackage.eINSTANCE;
  }

} //MyDslnewFactoryImpl
