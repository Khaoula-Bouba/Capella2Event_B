/**
 * generated by Xtext 2.22.0
 */
package org.xtext.example.newoamydsl.myDslnew.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.xtext.example.newoamydsl.myDslnew.AbstractDeploymentLink;
import org.xtext.example.newoamydsl.myDslnew.AbstractFunction;
import org.xtext.example.newoamydsl.myDslnew.AbstractPropertyValue;
import org.xtext.example.newoamydsl.myDslnew.AbstractType;
import org.xtext.example.newoamydsl.myDslnew.ActivityAllocation;
import org.xtext.example.newoamydsl.myDslnew.ActivityEdge;
import org.xtext.example.newoamydsl.myDslnew.ActivityGroup;
import org.xtext.example.newoamydsl.myDslnew.ActivityNode;
import org.xtext.example.newoamydsl.myDslnew.Association;
import org.xtext.example.newoamydsl.myDslnew.CapabilityConfiguration;
import org.xtext.example.newoamydsl.myDslnew.Collection;
import org.xtext.example.newoamydsl.myDslnew.CommunicationLink;
import org.xtext.example.newoamydsl.myDslnew.CommunicationMean;
import org.xtext.example.newoamydsl.myDslnew.ComponentExchange;
import org.xtext.example.newoamydsl.myDslnew.ComponentExchangeAllocation;
import org.xtext.example.newoamydsl.myDslnew.ComponentExchangeCategory;
import org.xtext.example.newoamydsl.myDslnew.ComponentExchangeEnd;
import org.xtext.example.newoamydsl.myDslnew.ComponentExchangeFunctionalExchangeAllocation;
import org.xtext.example.newoamydsl.myDslnew.ComponentExchangeRealization;
import org.xtext.example.newoamydsl.myDslnew.ComponentFunctionalAllocation;
import org.xtext.example.newoamydsl.myDslnew.ComponentRealization;
import org.xtext.example.newoamydsl.myDslnew.Concept;
import org.xtext.example.newoamydsl.myDslnew.ConceptCompliance;
import org.xtext.example.newoamydsl.myDslnew.ConceptPkg;
import org.xtext.example.newoamydsl.myDslnew.Constraint;
import org.xtext.example.newoamydsl.myDslnew.ControlNode;
import org.xtext.example.newoamydsl.myDslnew.DataPkg;
import org.xtext.example.newoamydsl.myDslnew.DataType;
import org.xtext.example.newoamydsl.myDslnew.DataValue;
import org.xtext.example.newoamydsl.myDslnew.Entity;
import org.xtext.example.newoamydsl.myDslnew.EntityOperationalCapabilityInvolvement;
import org.xtext.example.newoamydsl.myDslnew.EntityPkg;
import org.xtext.example.newoamydsl.myDslnew.EnumerationPropertyLiteral;
import org.xtext.example.newoamydsl.myDslnew.EnumerationPropertyType;
import org.xtext.example.newoamydsl.myDslnew.ExceptionHandler;
import org.xtext.example.newoamydsl.myDslnew.ExchangeCategory;
import org.xtext.example.newoamydsl.myDslnew.ExchangeContainment;
import org.xtext.example.newoamydsl.myDslnew.ExchangeItem;
import org.xtext.example.newoamydsl.myDslnew.ExchangeItemAllocation;
import org.xtext.example.newoamydsl.myDslnew.ExchangeItemElement;
import org.xtext.example.newoamydsl.myDslnew.ExchangeItemInstance;
import org.xtext.example.newoamydsl.myDslnew.ExchangeLink;
import org.xtext.example.newoamydsl.myDslnew.ExchangeSpecificationRealization;
import org.xtext.example.newoamydsl.myDslnew.Feature;
import org.xtext.example.newoamydsl.myDslnew.FunctionPkg;
import org.xtext.example.newoamydsl.myDslnew.FunctionRealization;
import org.xtext.example.newoamydsl.myDslnew.FunctionSpecification;
import org.xtext.example.newoamydsl.myDslnew.FunctionalChain;
import org.xtext.example.newoamydsl.myDslnew.FunctionalChainInvolvement;
import org.xtext.example.newoamydsl.myDslnew.FunctionalChainInvolvementLink;
import org.xtext.example.newoamydsl.myDslnew.FunctionalChainRealization;
import org.xtext.example.newoamydsl.myDslnew.FunctionalExchange;
import org.xtext.example.newoamydsl.myDslnew.FunctionalExchangeRealization;
import org.xtext.example.newoamydsl.myDslnew.FunctionalExchangeSpecification;
import org.xtext.example.newoamydsl.myDslnew.GeneralClass;
import org.xtext.example.newoamydsl.myDslnew.Generalization;
import org.xtext.example.newoamydsl.myDslnew.InformationRealization;
import org.xtext.example.newoamydsl.myDslnew.Initialization;
import org.xtext.example.newoamydsl.myDslnew.InputOutputPin;
import org.xtext.example.newoamydsl.myDslnew.Interface;
import org.xtext.example.newoamydsl.myDslnew.InterfaceAllocation;
import org.xtext.example.newoamydsl.myDslnew.InterfaceImplementation;
import org.xtext.example.newoamydsl.myDslnew.InterfacePkg;
import org.xtext.example.newoamydsl.myDslnew.InterfaceUse;
import org.xtext.example.newoamydsl.myDslnew.Invariant;
import org.xtext.example.newoamydsl.myDslnew.ItemInConcept;
import org.xtext.example.newoamydsl.myDslnew.KeyPart;
import org.xtext.example.newoamydsl.myDslnew.Location;
import org.xtext.example.newoamydsl.myDslnew.Message;
import org.xtext.example.newoamydsl.myDslnew.MessageReference;
import org.xtext.example.newoamydsl.myDslnew.MyDslnewPackage;
import org.xtext.example.newoamydsl.myDslnew.OpaqueExpression;
import org.xtext.example.newoamydsl.myDslnew.OperationalActivity;
import org.xtext.example.newoamydsl.myDslnew.OperationalActivityPkg;
import org.xtext.example.newoamydsl.myDslnew.OperationalCapability;
import org.xtext.example.newoamydsl.myDslnew.OperationalCapabilityPkg;
import org.xtext.example.newoamydsl.myDslnew.Part;
import org.xtext.example.newoamydsl.myDslnew.PhysicalLink;
import org.xtext.example.newoamydsl.myDslnew.PhysicalLinkEnd;
import org.xtext.example.newoamydsl.myDslnew.PhysicalLinkRealization;
import org.xtext.example.newoamydsl.myDslnew.PhysicalPath;
import org.xtext.example.newoamydsl.myDslnew.PhysicalPathInvolvement;
import org.xtext.example.newoamydsl.myDslnew.PropertyValueGroup;
import org.xtext.example.newoamydsl.myDslnew.PropertyValuePkg;
import org.xtext.example.newoamydsl.myDslnew.Region;
import org.xtext.example.newoamydsl.myDslnew.Requirement;
import org.xtext.example.newoamydsl.myDslnew.RequirementsPkg;
import org.xtext.example.newoamydsl.myDslnew.Role;
import org.xtext.example.newoamydsl.myDslnew.RoleAllocation;
import org.xtext.example.newoamydsl.myDslnew.RoleAssemblyUsage;
import org.xtext.example.newoamydsl.myDslnew.RolePkg;
import org.xtext.example.newoamydsl.myDslnew.SequenceLink;
import org.xtext.example.newoamydsl.myDslnew.Signal;
import org.xtext.example.newoamydsl.myDslnew.SignalInstance;
import org.xtext.example.newoamydsl.myDslnew.StateEvent;
import org.xtext.example.newoamydsl.myDslnew.StateEventRealization;
import org.xtext.example.newoamydsl.myDslnew.StateMachine;
import org.xtext.example.newoamydsl.myDslnew.StateTransition;
import org.xtext.example.newoamydsl.myDslnew.StateTransitionRealization;
import org.xtext.example.newoamydsl.myDslnew.Trace;
import org.xtext.example.newoamydsl.myDslnew.Unit;
import org.xtext.example.newoamydsl.myDslnew.ValueSpecification;
import org.xtext.example.newoamydsl.myDslnew.ValueTag;
import org.xtext.example.newoamydsl.myDslnew.operationalAnalysis;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.xtext.example.newoamydsl.myDslnew.MyDslnewPackage
 * @generated
 */
public class MyDslnewAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MyDslnewPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyDslnewAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = MyDslnewPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MyDslnewSwitch<Adapter> modelSwitch =
    new MyDslnewSwitch<Adapter>()
    {
      @Override
      public Adapter caseoperationalAnalysis(operationalAnalysis object)
      {
        return createoperationalAnalysisAdapter();
      }
      @Override
      public Adapter caseOperationalCapabilityPkg(OperationalCapabilityPkg object)
      {
        return createOperationalCapabilityPkgAdapter();
      }
      @Override
      public Adapter caseOperationalCapability(OperationalCapability object)
      {
        return createOperationalCapabilityAdapter();
      }
      @Override
      public Adapter caseEntityOperationalCapabilityInvolvement(EntityOperationalCapabilityInvolvement object)
      {
        return createEntityOperationalCapabilityInvolvementAdapter();
      }
      @Override
      public Adapter caseConceptCompliance(ConceptCompliance object)
      {
        return createConceptComplianceAdapter();
      }
      @Override
      public Adapter caseCapabilityConfiguration(CapabilityConfiguration object)
      {
        return createCapabilityConfigurationAdapter();
      }
      @Override
      public Adapter caseComponentFunctionalAllocation(ComponentFunctionalAllocation object)
      {
        return createComponentFunctionalAllocationAdapter();
      }
      @Override
      public Adapter caseRequirementsPkg(RequirementsPkg object)
      {
        return createRequirementsPkgAdapter();
      }
      @Override
      public Adapter caseRequirement(Requirement object)
      {
        return createRequirementAdapter();
      }
      @Override
      public Adapter caseAbstractPropertyValue(AbstractPropertyValue object)
      {
        return createAbstractPropertyValueAdapter();
      }
      @Override
      public Adapter caseEnumerationPropertyType(EnumerationPropertyType object)
      {
        return createEnumerationPropertyTypeAdapter();
      }
      @Override
      public Adapter casePropertyValueGroup(PropertyValueGroup object)
      {
        return createPropertyValueGroupAdapter();
      }
      @Override
      public Adapter caseEnumerationPropertyLiteral(EnumerationPropertyLiteral object)
      {
        return createEnumerationPropertyLiteralAdapter();
      }
      @Override
      public Adapter caseTrace(Trace object)
      {
        return createTraceAdapter();
      }
      @Override
      public Adapter casePropertyValuePkg(PropertyValuePkg object)
      {
        return createPropertyValuePkgAdapter();
      }
      @Override
      public Adapter caseExchangeLink(ExchangeLink object)
      {
        return createExchangeLinkAdapter();
      }
      @Override
      public Adapter caseExchangeContainment(ExchangeContainment object)
      {
        return createExchangeContainmentAdapter();
      }
      @Override
      public Adapter caseFunctionPkg(FunctionPkg object)
      {
        return createFunctionPkgAdapter();
      }
      @Override
      public Adapter caseOperationalActivityPkg(OperationalActivityPkg object)
      {
        return createOperationalActivityPkgAdapter();
      }
      @Override
      public Adapter caseExchangeCategory(ExchangeCategory object)
      {
        return createExchangeCategoryAdapter();
      }
      @Override
      public Adapter caseExchangeSpecificationRealization(ExchangeSpecificationRealization object)
      {
        return createExchangeSpecificationRealizationAdapter();
      }
      @Override
      public Adapter caseComponentExchangeRealization(ComponentExchangeRealization object)
      {
        return createComponentExchangeRealizationAdapter();
      }
      @Override
      public Adapter caseFunctionalExchangeSpecification(FunctionalExchangeSpecification object)
      {
        return createFunctionalExchangeSpecificationAdapter();
      }
      @Override
      public Adapter caseFunctionSpecification(FunctionSpecification object)
      {
        return createFunctionSpecificationAdapter();
      }
      @Override
      public Adapter caseActivityNode(ActivityNode object)
      {
        return createActivityNodeAdapter();
      }
      @Override
      public Adapter caseActivityGroup(ActivityGroup object)
      {
        return createActivityGroupAdapter();
      }
      @Override
      public Adapter caseActivityEdge(ActivityEdge object)
      {
        return createActivityEdgeAdapter();
      }
      @Override
      public Adapter caseValueSpecification(ValueSpecification object)
      {
        return createValueSpecificationAdapter();
      }
      @Override
      public Adapter caseOperationalActivity(OperationalActivity object)
      {
        return createOperationalActivityAdapter();
      }
      @Override
      public Adapter caseFunctionalExchange(FunctionalExchange object)
      {
        return createFunctionalExchangeAdapter();
      }
      @Override
      public Adapter caseFunctionalExchangeRealization(FunctionalExchangeRealization object)
      {
        return createFunctionalExchangeRealizationAdapter();
      }
      @Override
      public Adapter caseInputOutputPin(InputOutputPin object)
      {
        return createInputOutputPinAdapter();
      }
      @Override
      public Adapter caseExceptionHandler(ExceptionHandler object)
      {
        return createExceptionHandlerAdapter();
      }
      @Override
      public Adapter caseFunctionalChain(FunctionalChain object)
      {
        return createFunctionalChainAdapter();
      }
      @Override
      public Adapter caseFunctionalChainInvolvement(FunctionalChainInvolvement object)
      {
        return createFunctionalChainInvolvementAdapter();
      }
      @Override
      public Adapter caseFunctionalChainRealization(FunctionalChainRealization object)
      {
        return createFunctionalChainRealizationAdapter();
      }
      @Override
      public Adapter caseControlNode(ControlNode object)
      {
        return createControlNodeAdapter();
      }
      @Override
      public Adapter caseSequenceLink(SequenceLink object)
      {
        return createSequenceLinkAdapter();
      }
      @Override
      public Adapter caseDataValue(DataValue object)
      {
        return createDataValueAdapter();
      }
      @Override
      public Adapter caseValueTag(ValueTag object)
      {
        return createValueTagAdapter();
      }
      @Override
      public Adapter caseAbstractFunction(AbstractFunction object)
      {
        return createAbstractFunctionAdapter();
      }
      @Override
      public Adapter caseConstraint(Constraint object)
      {
        return createConstraintAdapter();
      }
      @Override
      public Adapter caseInitialization(Initialization object)
      {
        return createInitializationAdapter();
      }
      @Override
      public Adapter caseInvariant(Invariant object)
      {
        return createInvariantAdapter();
      }
      @Override
      public Adapter caseOpaqueExpression(OpaqueExpression object)
      {
        return createOpaqueExpressionAdapter();
      }
      @Override
      public Adapter caseFunctionRealization(FunctionRealization object)
      {
        return createFunctionRealizationAdapter();
      }
      @Override
      public Adapter caseComponentExchange(ComponentExchange object)
      {
        return createComponentExchangeAdapter();
      }
      @Override
      public Adapter caseComponentExchangeCategory(ComponentExchangeCategory object)
      {
        return createComponentExchangeCategoryAdapter();
      }
      @Override
      public Adapter caseComponentExchangeFunctionalExchangeAllocation(ComponentExchangeFunctionalExchangeAllocation object)
      {
        return createComponentExchangeFunctionalExchangeAllocationAdapter();
      }
      @Override
      public Adapter caseComponentExchangeEnd(ComponentExchangeEnd object)
      {
        return createComponentExchangeEndAdapter();
      }
      @Override
      public Adapter caseInterfacePkg(InterfacePkg object)
      {
        return createInterfacePkgAdapter();
      }
      @Override
      public Adapter caseExchangeItem(ExchangeItem object)
      {
        return createExchangeItemAdapter();
      }
      @Override
      public Adapter caseInformationRealization(InformationRealization object)
      {
        return createInformationRealizationAdapter();
      }
      @Override
      public Adapter caseExchangeItemElement(ExchangeItemElement object)
      {
        return createExchangeItemElementAdapter();
      }
      @Override
      public Adapter caseMessageReference(MessageReference object)
      {
        return createMessageReferenceAdapter();
      }
      @Override
      public Adapter caseInterface(Interface object)
      {
        return createInterfaceAdapter();
      }
      @Override
      public Adapter caseExchangeItemAllocation(ExchangeItemAllocation object)
      {
        return createExchangeItemAllocationAdapter();
      }
      @Override
      public Adapter caseGeneralClass(GeneralClass object)
      {
        return createGeneralClassAdapter();
      }
      @Override
      public Adapter caseInterfaceAllocation(InterfaceAllocation object)
      {
        return createInterfaceAllocationAdapter();
      }
      @Override
      public Adapter caseFeature(Feature object)
      {
        return createFeatureAdapter();
      }
      @Override
      public Adapter caseGeneralization(Generalization object)
      {
        return createGeneralizationAdapter();
      }
      @Override
      public Adapter caseDataPkg(DataPkg object)
      {
        return createDataPkgAdapter();
      }
      @Override
      public Adapter caseStateEvent(StateEvent object)
      {
        return createStateEventAdapter();
      }
      @Override
      public Adapter caseStateEventRealization(StateEventRealization object)
      {
        return createStateEventRealizationAdapter();
      }
      @Override
      public Adapter caseMessage(Message object)
      {
        return createMessageAdapter();
      }
      @Override
      public Adapter caseUnit(Unit object)
      {
        return createUnitAdapter();
      }
      @Override
      public Adapter caseClass(org.xtext.example.newoamydsl.myDslnew.Class object)
      {
        return createClassAdapter();
      }
      @Override
      public Adapter caseKeyPart(KeyPart object)
      {
        return createKeyPartAdapter();
      }
      @Override
      public Adapter caseCollection(Collection object)
      {
        return createCollectionAdapter();
      }
      @Override
      public Adapter caseAssociation(Association object)
      {
        return createAssociationAdapter();
      }
      @Override
      public Adapter caseExchangeItemInstance(ExchangeItemInstance object)
      {
        return createExchangeItemInstanceAdapter();
      }
      @Override
      public Adapter caseDataType(DataType object)
      {
        return createDataTypeAdapter();
      }
      @Override
      public Adapter caseSignal(Signal object)
      {
        return createSignalAdapter();
      }
      @Override
      public Adapter caseSignalInstance(SignalInstance object)
      {
        return createSignalInstanceAdapter();
      }
      @Override
      public Adapter caseException(org.xtext.example.newoamydsl.myDslnew.Exception object)
      {
        return createExceptionAdapter();
      }
      @Override
      public Adapter caseStateMachine(StateMachine object)
      {
        return createStateMachineAdapter();
      }
      @Override
      public Adapter caseRegion(Region object)
      {
        return createRegionAdapter();
      }
      @Override
      public Adapter caseStateTransition(StateTransition object)
      {
        return createStateTransitionAdapter();
      }
      @Override
      public Adapter caseStateTransitionRealization(StateTransitionRealization object)
      {
        return createStateTransitionRealizationAdapter();
      }
      @Override
      public Adapter caseRolePkg(RolePkg object)
      {
        return createRolePkgAdapter();
      }
      @Override
      public Adapter caseRole(Role object)
      {
        return createRoleAdapter();
      }
      @Override
      public Adapter caseActivityAllocation(ActivityAllocation object)
      {
        return createActivityAllocationAdapter();
      }
      @Override
      public Adapter caseRoleAssemblyUsage(RoleAssemblyUsage object)
      {
        return createRoleAssemblyUsageAdapter();
      }
      @Override
      public Adapter caseEntityPkg(EntityPkg object)
      {
        return createEntityPkgAdapter();
      }
      @Override
      public Adapter casePart(Part object)
      {
        return createPartAdapter();
      }
      @Override
      public Adapter caseAbstractType(AbstractType object)
      {
        return createAbstractTypeAdapter();
      }
      @Override
      public Adapter caseAbstractDeploymentLink(AbstractDeploymentLink object)
      {
        return createAbstractDeploymentLinkAdapter();
      }
      @Override
      public Adapter casePhysicalLink(PhysicalLink object)
      {
        return createPhysicalLinkAdapter();
      }
      @Override
      public Adapter caseComponentExchangeAllocation(ComponentExchangeAllocation object)
      {
        return createComponentExchangeAllocationAdapter();
      }
      @Override
      public Adapter casePhysicalLinkRealization(PhysicalLinkRealization object)
      {
        return createPhysicalLinkRealizationAdapter();
      }
      @Override
      public Adapter casePhysicalLinkEnd(PhysicalLinkEnd object)
      {
        return createPhysicalLinkEndAdapter();
      }
      @Override
      public Adapter caseLocation(Location object)
      {
        return createLocationAdapter();
      }
      @Override
      public Adapter caseCommunicationMean(CommunicationMean object)
      {
        return createCommunicationMeanAdapter();
      }
      @Override
      public Adapter caseEntity(Entity object)
      {
        return createEntityAdapter();
      }
      @Override
      public Adapter caseComponentRealization(ComponentRealization object)
      {
        return createComponentRealizationAdapter();
      }
      @Override
      public Adapter casePhysicalPath(PhysicalPath object)
      {
        return createPhysicalPathAdapter();
      }
      @Override
      public Adapter casePhysicalPathInvolvement(PhysicalPathInvolvement object)
      {
        return createPhysicalPathInvolvementAdapter();
      }
      @Override
      public Adapter caseInterfaceUse(InterfaceUse object)
      {
        return createInterfaceUseAdapter();
      }
      @Override
      public Adapter caseInterfaceImplementation(InterfaceImplementation object)
      {
        return createInterfaceImplementationAdapter();
      }
      @Override
      public Adapter caseCommunicationLink(CommunicationLink object)
      {
        return createCommunicationLinkAdapter();
      }
      @Override
      public Adapter caseRoleAllocation(RoleAllocation object)
      {
        return createRoleAllocationAdapter();
      }
      @Override
      public Adapter caseConceptPkg(ConceptPkg object)
      {
        return createConceptPkgAdapter();
      }
      @Override
      public Adapter caseConcept(Concept object)
      {
        return createConceptAdapter();
      }
      @Override
      public Adapter caseItemInConcept(ItemInConcept object)
      {
        return createItemInConceptAdapter();
      }
      @Override
      public Adapter caseFunctionalChainInvolvementLink(FunctionalChainInvolvementLink object)
      {
        return createFunctionalChainInvolvementLinkAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.operationalAnalysis <em>operational Analysis</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.operationalAnalysis
   * @generated
   */
  public Adapter createoperationalAnalysisAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.OperationalCapabilityPkg <em>Operational Capability Pkg</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.OperationalCapabilityPkg
   * @generated
   */
  public Adapter createOperationalCapabilityPkgAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.OperationalCapability <em>Operational Capability</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.OperationalCapability
   * @generated
   */
  public Adapter createOperationalCapabilityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.EntityOperationalCapabilityInvolvement <em>Entity Operational Capability Involvement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.EntityOperationalCapabilityInvolvement
   * @generated
   */
  public Adapter createEntityOperationalCapabilityInvolvementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.ConceptCompliance <em>Concept Compliance</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.ConceptCompliance
   * @generated
   */
  public Adapter createConceptComplianceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.CapabilityConfiguration <em>Capability Configuration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.CapabilityConfiguration
   * @generated
   */
  public Adapter createCapabilityConfigurationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.ComponentFunctionalAllocation <em>Component Functional Allocation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.ComponentFunctionalAllocation
   * @generated
   */
  public Adapter createComponentFunctionalAllocationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.RequirementsPkg <em>Requirements Pkg</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.RequirementsPkg
   * @generated
   */
  public Adapter createRequirementsPkgAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.Requirement <em>Requirement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.Requirement
   * @generated
   */
  public Adapter createRequirementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.AbstractPropertyValue <em>Abstract Property Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.AbstractPropertyValue
   * @generated
   */
  public Adapter createAbstractPropertyValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.EnumerationPropertyType <em>Enumeration Property Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.EnumerationPropertyType
   * @generated
   */
  public Adapter createEnumerationPropertyTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.PropertyValueGroup <em>Property Value Group</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.PropertyValueGroup
   * @generated
   */
  public Adapter createPropertyValueGroupAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.EnumerationPropertyLiteral <em>Enumeration Property Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.EnumerationPropertyLiteral
   * @generated
   */
  public Adapter createEnumerationPropertyLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.Trace <em>Trace</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.Trace
   * @generated
   */
  public Adapter createTraceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.PropertyValuePkg <em>Property Value Pkg</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.PropertyValuePkg
   * @generated
   */
  public Adapter createPropertyValuePkgAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.ExchangeLink <em>Exchange Link</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.ExchangeLink
   * @generated
   */
  public Adapter createExchangeLinkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.ExchangeContainment <em>Exchange Containment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.ExchangeContainment
   * @generated
   */
  public Adapter createExchangeContainmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.FunctionPkg <em>Function Pkg</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.FunctionPkg
   * @generated
   */
  public Adapter createFunctionPkgAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.OperationalActivityPkg <em>Operational Activity Pkg</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.OperationalActivityPkg
   * @generated
   */
  public Adapter createOperationalActivityPkgAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.ExchangeCategory <em>Exchange Category</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.ExchangeCategory
   * @generated
   */
  public Adapter createExchangeCategoryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.ExchangeSpecificationRealization <em>Exchange Specification Realization</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.ExchangeSpecificationRealization
   * @generated
   */
  public Adapter createExchangeSpecificationRealizationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.ComponentExchangeRealization <em>Component Exchange Realization</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.ComponentExchangeRealization
   * @generated
   */
  public Adapter createComponentExchangeRealizationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.FunctionalExchangeSpecification <em>Functional Exchange Specification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.FunctionalExchangeSpecification
   * @generated
   */
  public Adapter createFunctionalExchangeSpecificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.FunctionSpecification <em>Function Specification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.FunctionSpecification
   * @generated
   */
  public Adapter createFunctionSpecificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.ActivityNode <em>Activity Node</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.ActivityNode
   * @generated
   */
  public Adapter createActivityNodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.ActivityGroup <em>Activity Group</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.ActivityGroup
   * @generated
   */
  public Adapter createActivityGroupAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.ActivityEdge <em>Activity Edge</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.ActivityEdge
   * @generated
   */
  public Adapter createActivityEdgeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.ValueSpecification <em>Value Specification</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.ValueSpecification
   * @generated
   */
  public Adapter createValueSpecificationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.OperationalActivity <em>Operational Activity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.OperationalActivity
   * @generated
   */
  public Adapter createOperationalActivityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.FunctionalExchange <em>Functional Exchange</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.FunctionalExchange
   * @generated
   */
  public Adapter createFunctionalExchangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.FunctionalExchangeRealization <em>Functional Exchange Realization</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.FunctionalExchangeRealization
   * @generated
   */
  public Adapter createFunctionalExchangeRealizationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.InputOutputPin <em>Input Output Pin</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.InputOutputPin
   * @generated
   */
  public Adapter createInputOutputPinAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.ExceptionHandler <em>Exception Handler</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.ExceptionHandler
   * @generated
   */
  public Adapter createExceptionHandlerAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.FunctionalChain <em>Functional Chain</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.FunctionalChain
   * @generated
   */
  public Adapter createFunctionalChainAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.FunctionalChainInvolvement <em>Functional Chain Involvement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.FunctionalChainInvolvement
   * @generated
   */
  public Adapter createFunctionalChainInvolvementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.FunctionalChainRealization <em>Functional Chain Realization</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.FunctionalChainRealization
   * @generated
   */
  public Adapter createFunctionalChainRealizationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.ControlNode <em>Control Node</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.ControlNode
   * @generated
   */
  public Adapter createControlNodeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.SequenceLink <em>Sequence Link</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.SequenceLink
   * @generated
   */
  public Adapter createSequenceLinkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.DataValue <em>Data Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.DataValue
   * @generated
   */
  public Adapter createDataValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.ValueTag <em>Value Tag</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.ValueTag
   * @generated
   */
  public Adapter createValueTagAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.AbstractFunction <em>Abstract Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.AbstractFunction
   * @generated
   */
  public Adapter createAbstractFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.Constraint <em>Constraint</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.Constraint
   * @generated
   */
  public Adapter createConstraintAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.Initialization <em>Initialization</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.Initialization
   * @generated
   */
  public Adapter createInitializationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.Invariant <em>Invariant</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.Invariant
   * @generated
   */
  public Adapter createInvariantAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.OpaqueExpression <em>Opaque Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.OpaqueExpression
   * @generated
   */
  public Adapter createOpaqueExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.FunctionRealization <em>Function Realization</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.FunctionRealization
   * @generated
   */
  public Adapter createFunctionRealizationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.ComponentExchange <em>Component Exchange</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.ComponentExchange
   * @generated
   */
  public Adapter createComponentExchangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.ComponentExchangeCategory <em>Component Exchange Category</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.ComponentExchangeCategory
   * @generated
   */
  public Adapter createComponentExchangeCategoryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.ComponentExchangeFunctionalExchangeAllocation <em>Component Exchange Functional Exchange Allocation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.ComponentExchangeFunctionalExchangeAllocation
   * @generated
   */
  public Adapter createComponentExchangeFunctionalExchangeAllocationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.ComponentExchangeEnd <em>Component Exchange End</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.ComponentExchangeEnd
   * @generated
   */
  public Adapter createComponentExchangeEndAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.InterfacePkg <em>Interface Pkg</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.InterfacePkg
   * @generated
   */
  public Adapter createInterfacePkgAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.ExchangeItem <em>Exchange Item</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.ExchangeItem
   * @generated
   */
  public Adapter createExchangeItemAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.InformationRealization <em>Information Realization</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.InformationRealization
   * @generated
   */
  public Adapter createInformationRealizationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.ExchangeItemElement <em>Exchange Item Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.ExchangeItemElement
   * @generated
   */
  public Adapter createExchangeItemElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.MessageReference <em>Message Reference</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.MessageReference
   * @generated
   */
  public Adapter createMessageReferenceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.Interface <em>Interface</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.Interface
   * @generated
   */
  public Adapter createInterfaceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.ExchangeItemAllocation <em>Exchange Item Allocation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.ExchangeItemAllocation
   * @generated
   */
  public Adapter createExchangeItemAllocationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.GeneralClass <em>General Class</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.GeneralClass
   * @generated
   */
  public Adapter createGeneralClassAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.InterfaceAllocation <em>Interface Allocation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.InterfaceAllocation
   * @generated
   */
  public Adapter createInterfaceAllocationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.Feature <em>Feature</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.Feature
   * @generated
   */
  public Adapter createFeatureAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.Generalization <em>Generalization</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.Generalization
   * @generated
   */
  public Adapter createGeneralizationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.DataPkg <em>Data Pkg</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.DataPkg
   * @generated
   */
  public Adapter createDataPkgAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.StateEvent <em>State Event</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.StateEvent
   * @generated
   */
  public Adapter createStateEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.StateEventRealization <em>State Event Realization</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.StateEventRealization
   * @generated
   */
  public Adapter createStateEventRealizationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.Message <em>Message</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.Message
   * @generated
   */
  public Adapter createMessageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.Unit <em>Unit</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.Unit
   * @generated
   */
  public Adapter createUnitAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.Class <em>Class</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.Class
   * @generated
   */
  public Adapter createClassAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.KeyPart <em>Key Part</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.KeyPart
   * @generated
   */
  public Adapter createKeyPartAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.Collection <em>Collection</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.Collection
   * @generated
   */
  public Adapter createCollectionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.Association <em>Association</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.Association
   * @generated
   */
  public Adapter createAssociationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.ExchangeItemInstance <em>Exchange Item Instance</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.ExchangeItemInstance
   * @generated
   */
  public Adapter createExchangeItemInstanceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.DataType <em>Data Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.DataType
   * @generated
   */
  public Adapter createDataTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.Signal <em>Signal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.Signal
   * @generated
   */
  public Adapter createSignalAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.SignalInstance <em>Signal Instance</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.SignalInstance
   * @generated
   */
  public Adapter createSignalInstanceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.Exception <em>Exception</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.Exception
   * @generated
   */
  public Adapter createExceptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.StateMachine <em>State Machine</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.StateMachine
   * @generated
   */
  public Adapter createStateMachineAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.Region <em>Region</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.Region
   * @generated
   */
  public Adapter createRegionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.StateTransition <em>State Transition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.StateTransition
   * @generated
   */
  public Adapter createStateTransitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.StateTransitionRealization <em>State Transition Realization</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.StateTransitionRealization
   * @generated
   */
  public Adapter createStateTransitionRealizationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.RolePkg <em>Role Pkg</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.RolePkg
   * @generated
   */
  public Adapter createRolePkgAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.Role <em>Role</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.Role
   * @generated
   */
  public Adapter createRoleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.ActivityAllocation <em>Activity Allocation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.ActivityAllocation
   * @generated
   */
  public Adapter createActivityAllocationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.RoleAssemblyUsage <em>Role Assembly Usage</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.RoleAssemblyUsage
   * @generated
   */
  public Adapter createRoleAssemblyUsageAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.EntityPkg <em>Entity Pkg</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.EntityPkg
   * @generated
   */
  public Adapter createEntityPkgAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.Part <em>Part</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.Part
   * @generated
   */
  public Adapter createPartAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.AbstractType <em>Abstract Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.AbstractType
   * @generated
   */
  public Adapter createAbstractTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.AbstractDeploymentLink <em>Abstract Deployment Link</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.AbstractDeploymentLink
   * @generated
   */
  public Adapter createAbstractDeploymentLinkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.PhysicalLink <em>Physical Link</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.PhysicalLink
   * @generated
   */
  public Adapter createPhysicalLinkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.ComponentExchangeAllocation <em>Component Exchange Allocation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.ComponentExchangeAllocation
   * @generated
   */
  public Adapter createComponentExchangeAllocationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.PhysicalLinkRealization <em>Physical Link Realization</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.PhysicalLinkRealization
   * @generated
   */
  public Adapter createPhysicalLinkRealizationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.PhysicalLinkEnd <em>Physical Link End</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.PhysicalLinkEnd
   * @generated
   */
  public Adapter createPhysicalLinkEndAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.Location <em>Location</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.Location
   * @generated
   */
  public Adapter createLocationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.CommunicationMean <em>Communication Mean</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.CommunicationMean
   * @generated
   */
  public Adapter createCommunicationMeanAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.Entity <em>Entity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.Entity
   * @generated
   */
  public Adapter createEntityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.ComponentRealization <em>Component Realization</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.ComponentRealization
   * @generated
   */
  public Adapter createComponentRealizationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.PhysicalPath <em>Physical Path</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.PhysicalPath
   * @generated
   */
  public Adapter createPhysicalPathAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.PhysicalPathInvolvement <em>Physical Path Involvement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.PhysicalPathInvolvement
   * @generated
   */
  public Adapter createPhysicalPathInvolvementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.InterfaceUse <em>Interface Use</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.InterfaceUse
   * @generated
   */
  public Adapter createInterfaceUseAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.InterfaceImplementation <em>Interface Implementation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.InterfaceImplementation
   * @generated
   */
  public Adapter createInterfaceImplementationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.CommunicationLink <em>Communication Link</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.CommunicationLink
   * @generated
   */
  public Adapter createCommunicationLinkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.RoleAllocation <em>Role Allocation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.RoleAllocation
   * @generated
   */
  public Adapter createRoleAllocationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.ConceptPkg <em>Concept Pkg</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.ConceptPkg
   * @generated
   */
  public Adapter createConceptPkgAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.Concept <em>Concept</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.Concept
   * @generated
   */
  public Adapter createConceptAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.ItemInConcept <em>Item In Concept</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.ItemInConcept
   * @generated
   */
  public Adapter createItemInConceptAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.xtext.example.newoamydsl.myDslnew.FunctionalChainInvolvementLink <em>Functional Chain Involvement Link</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.xtext.example.newoamydsl.myDslnew.FunctionalChainInvolvementLink
   * @generated
   */
  public Adapter createFunctionalChainInvolvementLinkAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //MyDslnewAdapterFactory
