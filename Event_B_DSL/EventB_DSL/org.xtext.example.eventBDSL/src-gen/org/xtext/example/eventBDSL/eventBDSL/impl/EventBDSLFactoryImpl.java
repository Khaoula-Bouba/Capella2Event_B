/**
 * generated by Xtext 2.22.0
 */
package org.xtext.example.eventBDSL.eventBDSL.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.example.eventBDSL.eventBDSL.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class EventBDSLFactoryImpl extends EFactoryImpl implements EventBDSLFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static EventBDSLFactory init()
  {
    try
    {
      EventBDSLFactory theEventBDSLFactory = (EventBDSLFactory)EPackage.Registry.INSTANCE.getEFactory(EventBDSLPackage.eNS_URI);
      if (theEventBDSLFactory != null)
      {
        return theEventBDSLFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new EventBDSLFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EventBDSLFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case EventBDSLPackage.MACHINE: return createMachine();
      case EventBDSLPackage.SET: return createSet();
      case EventBDSLPackage.SET_VALUE: return createSetValue();
      case EventBDSLPackage.VARIABLE: return createVariable();
      case EventBDSLPackage.INVARIANT1: return createInvariant1();
      case EventBDSLPackage.TYPAGE_PREDICATE1: return createTypagePredicate1();
      case EventBDSLPackage.TYPAGE_PREDICATE2: return createTypagePredicate2();
      case EventBDSLPackage.LEFT_PART_PREDICATE_SUB_LIST: return createLeftPartPredicateSubList();
      case EventBDSLPackage.EXPRESSION: return createExpression();
      case EventBDSLPackage.LEFT_PART_PREDICATE: return createLeftPartPredicate();
      case EventBDSLPackage.INITIALIZATION: return createInitialization();
      case EventBDSLPackage.EVENT: return createEvent();
      case EventBDSLPackage.PARAMETER: return createParameter();
      case EventBDSLPackage.GUARD: return createGuard();
      case EventBDSLPackage.ACTIONS_RULE: return createActionsRule();
      case EventBDSLPackage.ACTION: return createAction();
      case EventBDSLPackage.DISCONJUCTION: return createDisconjuction();
      case EventBDSLPackage.CONJUCTION: return createConjuction();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Machine createMachine()
  {
    MachineImpl machine = new MachineImpl();
    return machine;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Set createSet()
  {
    SetImpl set = new SetImpl();
    return set;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SetValue createSetValue()
  {
    SetValueImpl setValue = new SetValueImpl();
    return setValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variable createVariable()
  {
    VariableImpl variable = new VariableImpl();
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Invariant1 createInvariant1()
  {
    Invariant1Impl invariant1 = new Invariant1Impl();
    return invariant1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypagePredicate1 createTypagePredicate1()
  {
    TypagePredicate1Impl typagePredicate1 = new TypagePredicate1Impl();
    return typagePredicate1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypagePredicate2 createTypagePredicate2()
  {
    TypagePredicate2Impl typagePredicate2 = new TypagePredicate2Impl();
    return typagePredicate2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LeftPartPredicateSubList createLeftPartPredicateSubList()
  {
    LeftPartPredicateSubListImpl leftPartPredicateSubList = new LeftPartPredicateSubListImpl();
    return leftPartPredicateSubList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LeftPartPredicate createLeftPartPredicate()
  {
    LeftPartPredicateImpl leftPartPredicate = new LeftPartPredicateImpl();
    return leftPartPredicate;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Initialization createInitialization()
  {
    InitializationImpl initialization = new InitializationImpl();
    return initialization;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Event createEvent()
  {
    EventImpl event = new EventImpl();
    return event;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Parameter createParameter()
  {
    ParameterImpl parameter = new ParameterImpl();
    return parameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Guard createGuard()
  {
    GuardImpl guard = new GuardImpl();
    return guard;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ActionsRule createActionsRule()
  {
    ActionsRuleImpl actionsRule = new ActionsRuleImpl();
    return actionsRule;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Action createAction()
  {
    ActionImpl action = new ActionImpl();
    return action;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Disconjuction createDisconjuction()
  {
    DisconjuctionImpl disconjuction = new DisconjuctionImpl();
    return disconjuction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Conjuction createConjuction()
  {
    ConjuctionImpl conjuction = new ConjuctionImpl();
    return conjuction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EventBDSLPackage getEventBDSLPackage()
  {
    return (EventBDSLPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static EventBDSLPackage getPackage()
  {
    return EventBDSLPackage.eINSTANCE;
  }

} //EventBDSLFactoryImpl
