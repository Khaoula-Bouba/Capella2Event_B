/*
 * generated by Xtext 2.22.0
 */
package org.xtext.example.eventBDSL.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.eventBDSL.eventBDSL.ActionsRule;
import org.xtext.example.eventBDSL.eventBDSL.Conjuction;
import org.xtext.example.eventBDSL.eventBDSL.Disconjuction;
import org.xtext.example.eventBDSL.eventBDSL.Event;
import org.xtext.example.eventBDSL.eventBDSL.EventBDSLPackage;
import org.xtext.example.eventBDSL.eventBDSL.Guard;
import org.xtext.example.eventBDSL.eventBDSL.Initialization;
import org.xtext.example.eventBDSL.eventBDSL.Invariant1;
import org.xtext.example.eventBDSL.eventBDSL.LeftPartPredicate;
import org.xtext.example.eventBDSL.eventBDSL.LeftPartPredicateSubList;
import org.xtext.example.eventBDSL.eventBDSL.Machine;
import org.xtext.example.eventBDSL.eventBDSL.SetValue;
import org.xtext.example.eventBDSL.eventBDSL.TypagePredicate1;
import org.xtext.example.eventBDSL.eventBDSL.TypagePredicate2;
import org.xtext.example.eventBDSL.eventBDSL.Variable;
import org.xtext.example.eventBDSL.services.EventBDSLGrammarAccess;

@SuppressWarnings("all")
public class EventBDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private EventBDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == EventBDSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case EventBDSLPackage.ACTION:
				sequence_Action(context, (org.xtext.example.eventBDSL.eventBDSL.Action) semanticObject); 
				return; 
			case EventBDSLPackage.ACTIONS_RULE:
				sequence_ActionsRule(context, (ActionsRule) semanticObject); 
				return; 
			case EventBDSLPackage.CONJUCTION:
				sequence_Conjuction(context, (Conjuction) semanticObject); 
				return; 
			case EventBDSLPackage.DISCONJUCTION:
				sequence_Disconjuction(context, (Disconjuction) semanticObject); 
				return; 
			case EventBDSLPackage.EVENT:
				sequence_Event(context, (Event) semanticObject); 
				return; 
			case EventBDSLPackage.GUARD:
				sequence_Guard(context, (Guard) semanticObject); 
				return; 
			case EventBDSLPackage.INITIALIZATION:
				sequence_Initialization(context, (Initialization) semanticObject); 
				return; 
			case EventBDSLPackage.INVARIANT1:
				sequence_Invariant1(context, (Invariant1) semanticObject); 
				return; 
			case EventBDSLPackage.LEFT_PART_PREDICATE:
				sequence_LeftPartPredicate(context, (LeftPartPredicate) semanticObject); 
				return; 
			case EventBDSLPackage.LEFT_PART_PREDICATE_SUB_LIST:
				sequence_LeftPartPredicateSubList(context, (LeftPartPredicateSubList) semanticObject); 
				return; 
			case EventBDSLPackage.MACHINE:
				sequence_Machine(context, (Machine) semanticObject); 
				return; 
			case EventBDSLPackage.PARAMETER:
				sequence_Parameter(context, (org.xtext.example.eventBDSL.eventBDSL.Parameter) semanticObject); 
				return; 
			case EventBDSLPackage.SET:
				sequence_Set(context, (org.xtext.example.eventBDSL.eventBDSL.Set) semanticObject); 
				return; 
			case EventBDSLPackage.SET_VALUE:
				sequence_SetValue(context, (SetValue) semanticObject); 
				return; 
			case EventBDSLPackage.TYPAGE_PREDICATE1:
				sequence_TypagePredicate1(context, (TypagePredicate1) semanticObject); 
				return; 
			case EventBDSLPackage.TYPAGE_PREDICATE2:
				sequence_TypagePredicate2(context, (TypagePredicate2) semanticObject); 
				return; 
			case EventBDSLPackage.VARIABLE:
				sequence_Variable(context, (Variable) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Action returns Action
	 *
	 * Constraint:
	 *     (actionLeftPart=[Variable|ID] actionRightPart=MyID)
	 */
	protected void sequence_Action(ISerializationContext context, org.xtext.example.eventBDSL.eventBDSL.Action semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EventBDSLPackage.Literals.ACTION__ACTION_LEFT_PART) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EventBDSLPackage.Literals.ACTION__ACTION_LEFT_PART));
			if (transientValues.isValueTransient(semanticObject, EventBDSLPackage.Literals.ACTION__ACTION_RIGHT_PART) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EventBDSLPackage.Literals.ACTION__ACTION_RIGHT_PART));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getActionAccess().getActionLeftPartVariableIDTerminalRuleCall_0_0_1(), semanticObject.eGet(EventBDSLPackage.Literals.ACTION__ACTION_LEFT_PART, false));
		feeder.accept(grammarAccess.getActionAccess().getActionRightPartMyIDParserRuleCall_2_0(), semanticObject.getActionRightPart());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ActionsRule returns ActionsRule
	 *
	 * Constraint:
	 *     (actionList+=Action actionList+=Action*)
	 */
	protected void sequence_ActionsRule(ISerializationContext context, ActionsRule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Disconjuction returns Conjuction
	 *     Disconjuction.Disconjuction_1_0 returns Conjuction
	 *     Conjuction returns Conjuction
	 *     Conjuction.Conjuction_1_0 returns Conjuction
	 *     Primary returns Conjuction
	 *
	 * Constraint:
	 *     (left=Conjuction_Conjuction_1_0 right=Primary)
	 */
	protected void sequence_Conjuction(ISerializationContext context, Conjuction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EventBDSLPackage.Literals.CONJUCTION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EventBDSLPackage.Literals.CONJUCTION__LEFT));
			if (transientValues.isValueTransient(semanticObject, EventBDSLPackage.Literals.CONJUCTION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EventBDSLPackage.Literals.CONJUCTION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConjuctionAccess().getConjuctionLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getConjuctionAccess().getRightPrimaryParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Disconjuction returns Disconjuction
	 *     Disconjuction.Disconjuction_1_0 returns Disconjuction
	 *     Conjuction returns Disconjuction
	 *     Conjuction.Conjuction_1_0 returns Disconjuction
	 *     Primary returns Disconjuction
	 *
	 * Constraint:
	 *     (left=Disconjuction_Disconjuction_1_0 right=Conjuction)
	 */
	protected void sequence_Disconjuction(ISerializationContext context, Disconjuction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EventBDSLPackage.Literals.DISCONJUCTION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EventBDSLPackage.Literals.DISCONJUCTION__LEFT));
			if (transientValues.isValueTransient(semanticObject, EventBDSLPackage.Literals.DISCONJUCTION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EventBDSLPackage.Literals.DISCONJUCTION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDisconjuctionAccess().getDisconjuctionLeftAction_1_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getDisconjuctionAccess().getRightConjuctionParserRuleCall_1_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Event returns Event
	 *
	 * Constraint:
	 *     (comment=STRING? name=ID parameters+=[Parameter|ID]+ guards=Guard actions=ActionsRule)
	 */
	protected void sequence_Event(ISerializationContext context, Event semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Guard returns Guard
	 *
	 * Constraint:
	 *     (guardExp1=Parameter guardExp2=[Parameter|ID] guardExp3=[Variable|ID] guardExp4=Disconjuction)
	 */
	protected void sequence_Guard(ISerializationContext context, Guard semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EventBDSLPackage.Literals.GUARD__GUARD_EXP1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EventBDSLPackage.Literals.GUARD__GUARD_EXP1));
			if (transientValues.isValueTransient(semanticObject, EventBDSLPackage.Literals.GUARD__GUARD_EXP2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EventBDSLPackage.Literals.GUARD__GUARD_EXP2));
			if (transientValues.isValueTransient(semanticObject, EventBDSLPackage.Literals.GUARD__GUARD_EXP3) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EventBDSLPackage.Literals.GUARD__GUARD_EXP3));
			if (transientValues.isValueTransient(semanticObject, EventBDSLPackage.Literals.GUARD__GUARD_EXP4) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EventBDSLPackage.Literals.GUARD__GUARD_EXP4));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGuardAccess().getGuardExp1ParameterParserRuleCall_0_0(), semanticObject.getGuardExp1());
		feeder.accept(grammarAccess.getGuardAccess().getGuardExp2ParameterIDTerminalRuleCall_2_0_1(), semanticObject.eGet(EventBDSLPackage.Literals.GUARD__GUARD_EXP2, false));
		feeder.accept(grammarAccess.getGuardAccess().getGuardExp3VariableIDTerminalRuleCall_4_0_1(), semanticObject.eGet(EventBDSLPackage.Literals.GUARD__GUARD_EXP3, false));
		feeder.accept(grammarAccess.getGuardAccess().getGuardExp4DisconjuctionParserRuleCall_6_0(), semanticObject.getGuardExp4());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Initialization returns Initialization
	 *
	 * Constraint:
	 *     (name=[Variable|ID] value=MyID)
	 */
	protected void sequence_Initialization(ISerializationContext context, Initialization semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EventBDSLPackage.Literals.INITIALIZATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EventBDSLPackage.Literals.INITIALIZATION__NAME));
			if (transientValues.isValueTransient(semanticObject, EventBDSLPackage.Literals.INITIALIZATION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EventBDSLPackage.Literals.INITIALIZATION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInitializationAccess().getNameVariableIDTerminalRuleCall_0_0_1(), semanticObject.eGet(EventBDSLPackage.Literals.INITIALIZATION__NAME, false));
		feeder.accept(grammarAccess.getInitializationAccess().getValueMyIDParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Invariant1 returns Invariant1
	 *
	 * Constraint:
	 *     (
	 *         comment=STRING? 
	 *         (typagePredicates+=TypagePredicate1 | typagePredicates+=TypagePredicate2) 
	 *         typagePredicates+=TypagePredicate1? 
	 *         (typagePredicates+=TypagePredicate2? typagePredicates+=TypagePredicate1?)*
	 *     )
	 */
	protected void sequence_Invariant1(ISerializationContext context, Invariant1 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LeftPartPredicateSubList returns LeftPartPredicateSubList
	 *
	 * Constraint:
	 *     (leftPartPredicateList=Disconjuction rightPartPredicateList=Disconjuction)
	 */
	protected void sequence_LeftPartPredicateSubList(ISerializationContext context, LeftPartPredicateSubList semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EventBDSLPackage.Literals.LEFT_PART_PREDICATE_SUB_LIST__LEFT_PART_PREDICATE_LIST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EventBDSLPackage.Literals.LEFT_PART_PREDICATE_SUB_LIST__LEFT_PART_PREDICATE_LIST));
			if (transientValues.isValueTransient(semanticObject, EventBDSLPackage.Literals.LEFT_PART_PREDICATE_SUB_LIST__RIGHT_PART_PREDICATE_LIST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EventBDSLPackage.Literals.LEFT_PART_PREDICATE_SUB_LIST__RIGHT_PART_PREDICATE_LIST));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLeftPartPredicateSubListAccess().getLeftPartPredicateListDisconjuctionParserRuleCall_1_0(), semanticObject.getLeftPartPredicateList());
		feeder.accept(grammarAccess.getLeftPartPredicateSubListAccess().getRightPartPredicateListDisconjuctionParserRuleCall_3_0(), semanticObject.getRightPartPredicateList());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Disconjuction returns LeftPartPredicate
	 *     Disconjuction.Disconjuction_1_0 returns LeftPartPredicate
	 *     Conjuction returns LeftPartPredicate
	 *     Conjuction.Conjuction_1_0 returns LeftPartPredicate
	 *     Primary returns LeftPartPredicate
	 *     LeftPartPredicate returns LeftPartPredicate
	 *
	 * Constraint:
	 *     (val1=[Variable|ID] val2=MyID)
	 */
	protected void sequence_LeftPartPredicate(ISerializationContext context, LeftPartPredicate semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EventBDSLPackage.Literals.LEFT_PART_PREDICATE__VAL1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EventBDSLPackage.Literals.LEFT_PART_PREDICATE__VAL1));
			if (transientValues.isValueTransient(semanticObject, EventBDSLPackage.Literals.LEFT_PART_PREDICATE__VAL2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EventBDSLPackage.Literals.LEFT_PART_PREDICATE__VAL2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLeftPartPredicateAccess().getVal1VariableIDTerminalRuleCall_0_0_1(), semanticObject.eGet(EventBDSLPackage.Literals.LEFT_PART_PREDICATE__VAL1, false));
		feeder.accept(grammarAccess.getLeftPartPredicateAccess().getVal2MyIDParserRuleCall_2_0(), semanticObject.getVal2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Machine returns Machine
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         (sets+=Set sets+=Set*)? 
	 *         (variables+=Variable variables+=Variable*)? 
	 *         (invariants1=Invariant1 (invariantsLeftPart2+=LeftPartPredicateSubList invariantsLeftPart2+=LeftPartPredicateSubList*)?)? 
	 *         (initializations+=Initialization initializations+=Initialization*)? 
	 *         (events+=Event events+=Event*)?
	 *     )
	 */
	protected void sequence_Machine(ISerializationContext context, Machine semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     (name=ID assignedSet=[Set|ID])
	 */
	protected void sequence_Parameter(ISerializationContext context, org.xtext.example.eventBDSL.eventBDSL.Parameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EventBDSLPackage.Literals.PARAMETER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EventBDSLPackage.Literals.PARAMETER__NAME));
			if (transientValues.isValueTransient(semanticObject, EventBDSLPackage.Literals.PARAMETER__ASSIGNED_SET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EventBDSLPackage.Literals.PARAMETER__ASSIGNED_SET));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getParameterAccess().getAssignedSetSetIDTerminalRuleCall_2_0_1(), semanticObject.eGet(EventBDSLPackage.Literals.PARAMETER__ASSIGNED_SET, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SetValue returns SetValue
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_SetValue(ISerializationContext context, SetValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EventBDSLPackage.Literals.SET_VALUE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EventBDSLPackage.Literals.SET_VALUE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSetValueAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Set returns Set
	 *
	 * Constraint:
	 *     (comment=STRING? name=ID values+=SetValue values+=SetValue*)
	 */
	protected void sequence_Set(ISerializationContext context, org.xtext.example.eventBDSL.eventBDSL.Set semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TypagePredicate1 returns TypagePredicate1
	 *
	 * Constraint:
	 *     (name=[Variable|ID] value=[Set|ID])
	 */
	protected void sequence_TypagePredicate1(ISerializationContext context, TypagePredicate1 semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EventBDSLPackage.Literals.TYPAGE_PREDICATE1__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EventBDSLPackage.Literals.TYPAGE_PREDICATE1__NAME));
			if (transientValues.isValueTransient(semanticObject, EventBDSLPackage.Literals.TYPAGE_PREDICATE1__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EventBDSLPackage.Literals.TYPAGE_PREDICATE1__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypagePredicate1Access().getNameVariableIDTerminalRuleCall_0_0_1(), semanticObject.eGet(EventBDSLPackage.Literals.TYPAGE_PREDICATE1__NAME, false));
		feeder.accept(grammarAccess.getTypagePredicate1Access().getValueSetIDTerminalRuleCall_2_0_1(), semanticObject.eGet(EventBDSLPackage.Literals.TYPAGE_PREDICATE1__VALUE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TypagePredicate2 returns TypagePredicate2
	 *
	 * Constraint:
	 *     (name=[Variable|ID] value=EVENTB_TYPE_KEYWORD)
	 */
	protected void sequence_TypagePredicate2(ISerializationContext context, TypagePredicate2 semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EventBDSLPackage.Literals.TYPAGE_PREDICATE2__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EventBDSLPackage.Literals.TYPAGE_PREDICATE2__NAME));
			if (transientValues.isValueTransient(semanticObject, EventBDSLPackage.Literals.TYPAGE_PREDICATE2__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EventBDSLPackage.Literals.TYPAGE_PREDICATE2__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypagePredicate2Access().getNameVariableIDTerminalRuleCall_0_0_1(), semanticObject.eGet(EventBDSLPackage.Literals.TYPAGE_PREDICATE2__NAME, false));
		feeder.accept(grammarAccess.getTypagePredicate2Access().getValueEVENTB_TYPE_KEYWORDTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Variable returns Variable
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Variable(ISerializationContext context, Variable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EventBDSLPackage.Literals.VARIABLE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EventBDSLPackage.Literals.VARIABLE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
