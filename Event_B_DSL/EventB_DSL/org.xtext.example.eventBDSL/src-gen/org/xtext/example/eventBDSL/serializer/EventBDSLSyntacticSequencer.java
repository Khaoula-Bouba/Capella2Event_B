/*
 * generated by Xtext 2.22.0
 */
package org.xtext.example.eventBDSL.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.eventBDSL.services.EventBDSLGrammarAccess;

@SuppressWarnings("all")
public class EventBDSLSyntacticSequencer extends AbstractSyntacticSequencer {

	protected EventBDSLGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Event_LineFeedKeyword_3_a;
	protected AbstractElementAlias match_LeftPartPredicate_EqualsSignKeyword_1_0_or_SolidusEqualsSignKeyword_1_1;
	protected AbstractElementAlias match_Primary_LeftParenthesisKeyword_1_0_a;
	protected AbstractElementAlias match_Primary_LeftParenthesisKeyword_1_0_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (EventBDSLGrammarAccess) access;
		match_Event_LineFeedKeyword_3_a = new TokenAlias(true, true, grammarAccess.getEventAccess().getLineFeedKeyword_3());
		match_LeftPartPredicate_EqualsSignKeyword_1_0_or_SolidusEqualsSignKeyword_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getLeftPartPredicateAccess().getEqualsSignKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getLeftPartPredicateAccess().getSolidusEqualsSignKeyword_1_1()));
		match_Primary_LeftParenthesisKeyword_1_0_a = new TokenAlias(true, true, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0());
		match_Primary_LeftParenthesisKeyword_1_0_p = new TokenAlias(true, false, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Event_LineFeedKeyword_3_a.equals(syntax))
				emit_Event_LineFeedKeyword_3_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_LeftPartPredicate_EqualsSignKeyword_1_0_or_SolidusEqualsSignKeyword_1_1.equals(syntax))
				emit_LeftPartPredicate_EqualsSignKeyword_1_0_or_SolidusEqualsSignKeyword_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Primary_LeftParenthesisKeyword_1_0_a.equals(syntax))
				emit_Primary_LeftParenthesisKeyword_1_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Primary_LeftParenthesisKeyword_1_0_p.equals(syntax))
				emit_Primary_LeftParenthesisKeyword_1_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '
	  *     '*
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID '=' (ambiguity) 'ANY' parameters+=[Parameter|ID]
	 */
	protected void emit_Event_LineFeedKeyword_3_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '=' | '/='
	 *
	 * This ambiguous syntax occurs at:
	 *     val1=[Variable|ID] (ambiguity) val2=MyID
	 */
	protected void emit_LeftPartPredicate_EqualsSignKeyword_1_0_or_SolidusEqualsSignKeyword_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) val1=[Variable|ID]
	 *     (rule start) (ambiguity) {Conjuction.left=}
	 *     (rule start) (ambiguity) {Disconjuction.left=}
	 */
	protected void emit_Primary_LeftParenthesisKeyword_1_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) {Conjuction.left=}
	 *     (rule start) (ambiguity) {Disconjuction.left=}
	 */
	protected void emit_Primary_LeftParenthesisKeyword_1_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
