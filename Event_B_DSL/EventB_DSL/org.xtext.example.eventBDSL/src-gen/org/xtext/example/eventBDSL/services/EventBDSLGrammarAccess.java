/*
 * generated by Xtext 2.22.0
 */
package org.xtext.example.eventBDSL.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class EventBDSLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class MachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.eventBDSL.EventBDSL.Machine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSYSTEMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSETSKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSetsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSetsSetParserRuleCall_2_1_0 = (RuleCall)cSetsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cSetsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cSetsSetParserRuleCall_2_2_1_0 = (RuleCall)cSetsAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cVARIABLESKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cVariablesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVariablesVariableParserRuleCall_3_1_0 = (RuleCall)cVariablesAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cVariablesAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cVariablesVariableParserRuleCall_3_2_1_0 = (RuleCall)cVariablesAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cINVARIANTKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInvariants1Assignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInvariants1Invariant1ParserRuleCall_4_1_0 = (RuleCall)cInvariants1Assignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cAmpersandKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cInvariantsLeftPart2Assignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cInvariantsLeftPart2LeftPartPredicateSubListParserRuleCall_4_2_1_0 = (RuleCall)cInvariantsLeftPart2Assignment_4_2_1.eContents().get(0);
		private final Group cGroup_4_2_2 = (Group)cGroup_4_2.eContents().get(2);
		private final Keyword cAmpersandKeyword_4_2_2_0 = (Keyword)cGroup_4_2_2.eContents().get(0);
		private final Assignment cInvariantsLeftPart2Assignment_4_2_2_1 = (Assignment)cGroup_4_2_2.eContents().get(1);
		private final RuleCall cInvariantsLeftPart2LeftPartPredicateSubListParserRuleCall_4_2_2_1_0 = (RuleCall)cInvariantsLeftPart2Assignment_4_2_2_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cINITIALISATIONKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cInitializationsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cInitializationsInitializationParserRuleCall_5_1_0 = (RuleCall)cInitializationsAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cVerticalLineVerticalLineKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cInitializationsAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cInitializationsInitializationParserRuleCall_5_2_1_0 = (RuleCall)cInitializationsAssignment_5_2_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cEVENTSKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cEventsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cEventsEventParserRuleCall_6_1_0 = (RuleCall)cEventsAssignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cSemicolonKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cEventsAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cEventsEventParserRuleCall_6_2_1_0 = (RuleCall)cEventsAssignment_6_2_1.eContents().get(0);
		private final Keyword cENDKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Machine:
		//	'SYSTEM' name=ID ('SETS' sets+=Set (";" sets+=Set)*)? ('VARIABLES' variables+=Variable ("," variables+=Variable)*)?
		//	('INVARIANT' invariants1=Invariant1 ("&" invariantsLeftPart2+=LeftPartPredicateSubList ("&"
		//	invariantsLeftPart2+=LeftPartPredicateSubList)*)?)? ('INITIALISATION' initializations+=Initialization ("||"
		//	initializations+=Initialization)*)? ('EVENTS' events+=Event (";" events+=Event)*)?
		//	'END';
		@Override public ParserRule getRule() { return rule; }
		
		//'SYSTEM' name=ID ('SETS' sets+=Set (";" sets+=Set)*)? ('VARIABLES' variables+=Variable ("," variables+=Variable)*)?
		//('INVARIANT' invariants1=Invariant1 ("&" invariantsLeftPart2+=LeftPartPredicateSubList ("&"
		//invariantsLeftPart2+=LeftPartPredicateSubList)*)?)? ('INITIALISATION' initializations+=Initialization ("||"
		//initializations+=Initialization)*)? ('EVENTS' events+=Event (";" events+=Event)*)? 'END'
		public Group getGroup() { return cGroup; }
		
		//'SYSTEM'
		public Keyword getSYSTEMKeyword_0() { return cSYSTEMKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('SETS' sets+=Set (";" sets+=Set)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'SETS'
		public Keyword getSETSKeyword_2_0() { return cSETSKeyword_2_0; }
		
		//sets+=Set
		public Assignment getSetsAssignment_2_1() { return cSetsAssignment_2_1; }
		
		//Set
		public RuleCall getSetsSetParserRuleCall_2_1_0() { return cSetsSetParserRuleCall_2_1_0; }
		
		//(";" sets+=Set)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//";"
		public Keyword getSemicolonKeyword_2_2_0() { return cSemicolonKeyword_2_2_0; }
		
		//sets+=Set
		public Assignment getSetsAssignment_2_2_1() { return cSetsAssignment_2_2_1; }
		
		//Set
		public RuleCall getSetsSetParserRuleCall_2_2_1_0() { return cSetsSetParserRuleCall_2_2_1_0; }
		
		//('VARIABLES' variables+=Variable ("," variables+=Variable)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'VARIABLES'
		public Keyword getVARIABLESKeyword_3_0() { return cVARIABLESKeyword_3_0; }
		
		//variables+=Variable
		public Assignment getVariablesAssignment_3_1() { return cVariablesAssignment_3_1; }
		
		//Variable
		public RuleCall getVariablesVariableParserRuleCall_3_1_0() { return cVariablesVariableParserRuleCall_3_1_0; }
		
		//("," variables+=Variable)*
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }
		
		//variables+=Variable
		public Assignment getVariablesAssignment_3_2_1() { return cVariablesAssignment_3_2_1; }
		
		//Variable
		public RuleCall getVariablesVariableParserRuleCall_3_2_1_0() { return cVariablesVariableParserRuleCall_3_2_1_0; }
		
		//('INVARIANT' invariants1=Invariant1 ("&" invariantsLeftPart2+=LeftPartPredicateSubList ("&"
		//invariantsLeftPart2+=LeftPartPredicateSubList)*)?)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'INVARIANT'
		public Keyword getINVARIANTKeyword_4_0() { return cINVARIANTKeyword_4_0; }
		
		//invariants1=Invariant1
		public Assignment getInvariants1Assignment_4_1() { return cInvariants1Assignment_4_1; }
		
		//Invariant1
		public RuleCall getInvariants1Invariant1ParserRuleCall_4_1_0() { return cInvariants1Invariant1ParserRuleCall_4_1_0; }
		
		//("&" invariantsLeftPart2+=LeftPartPredicateSubList ("&" invariantsLeftPart2+=LeftPartPredicateSubList)*)?
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//"&"
		public Keyword getAmpersandKeyword_4_2_0() { return cAmpersandKeyword_4_2_0; }
		
		//invariantsLeftPart2+=LeftPartPredicateSubList
		public Assignment getInvariantsLeftPart2Assignment_4_2_1() { return cInvariantsLeftPart2Assignment_4_2_1; }
		
		//LeftPartPredicateSubList
		public RuleCall getInvariantsLeftPart2LeftPartPredicateSubListParserRuleCall_4_2_1_0() { return cInvariantsLeftPart2LeftPartPredicateSubListParserRuleCall_4_2_1_0; }
		
		//("&" invariantsLeftPart2+=LeftPartPredicateSubList)*
		public Group getGroup_4_2_2() { return cGroup_4_2_2; }
		
		//"&"
		public Keyword getAmpersandKeyword_4_2_2_0() { return cAmpersandKeyword_4_2_2_0; }
		
		//invariantsLeftPart2+=LeftPartPredicateSubList
		public Assignment getInvariantsLeftPart2Assignment_4_2_2_1() { return cInvariantsLeftPart2Assignment_4_2_2_1; }
		
		//LeftPartPredicateSubList
		public RuleCall getInvariantsLeftPart2LeftPartPredicateSubListParserRuleCall_4_2_2_1_0() { return cInvariantsLeftPart2LeftPartPredicateSubListParserRuleCall_4_2_2_1_0; }
		
		//('INITIALISATION' initializations+=Initialization ("||" initializations+=Initialization)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'INITIALISATION'
		public Keyword getINITIALISATIONKeyword_5_0() { return cINITIALISATIONKeyword_5_0; }
		
		//initializations+=Initialization
		public Assignment getInitializationsAssignment_5_1() { return cInitializationsAssignment_5_1; }
		
		//Initialization
		public RuleCall getInitializationsInitializationParserRuleCall_5_1_0() { return cInitializationsInitializationParserRuleCall_5_1_0; }
		
		//("||" initializations+=Initialization)*
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_5_2_0() { return cVerticalLineVerticalLineKeyword_5_2_0; }
		
		//initializations+=Initialization
		public Assignment getInitializationsAssignment_5_2_1() { return cInitializationsAssignment_5_2_1; }
		
		//Initialization
		public RuleCall getInitializationsInitializationParserRuleCall_5_2_1_0() { return cInitializationsInitializationParserRuleCall_5_2_1_0; }
		
		//('EVENTS' events+=Event (";" events+=Event)*)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'EVENTS'
		public Keyword getEVENTSKeyword_6_0() { return cEVENTSKeyword_6_0; }
		
		//events+=Event
		public Assignment getEventsAssignment_6_1() { return cEventsAssignment_6_1; }
		
		//Event
		public RuleCall getEventsEventParserRuleCall_6_1_0() { return cEventsEventParserRuleCall_6_1_0; }
		
		//(";" events+=Event)*
		public Group getGroup_6_2() { return cGroup_6_2; }
		
		//";"
		public Keyword getSemicolonKeyword_6_2_0() { return cSemicolonKeyword_6_2_0; }
		
		//events+=Event
		public Assignment getEventsAssignment_6_2_1() { return cEventsAssignment_6_2_1; }
		
		//Event
		public RuleCall getEventsEventParserRuleCall_6_2_1_0() { return cEventsEventParserRuleCall_6_2_1_0; }
		
		//'END'
		public Keyword getENDKeyword_7() { return cENDKeyword_7; }
	}
	public class SetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.eventBDSL.EventBDSL.Set");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cSolidusSolidusKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cCommentAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cCommentSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cCommentAssignment_0_1.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValuesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValuesSetValueParserRuleCall_4_0 = (RuleCall)cValuesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cValuesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cValuesSetValueParserRuleCall_5_1_0 = (RuleCall)cValuesAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Set:
		//	('//' comment=STRING)?
		//	name=ID '=' '{' values+=SetValue ("," values+=SetValue)* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//('//' comment=STRING)? name=ID '=' '{' values+=SetValue ("," values+=SetValue)* '}'
		public Group getGroup() { return cGroup; }
		
		//('//' comment=STRING)?
		public Group getGroup_0() { return cGroup_0; }
		
		//'//'
		public Keyword getSolidusSolidusKeyword_0_0() { return cSolidusSolidusKeyword_0_0; }
		
		//comment=STRING
		public Assignment getCommentAssignment_0_1() { return cCommentAssignment_0_1; }
		
		//STRING
		public RuleCall getCommentSTRINGTerminalRuleCall_0_1_0() { return cCommentSTRINGTerminalRuleCall_0_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//values+=SetValue
		public Assignment getValuesAssignment_4() { return cValuesAssignment_4; }
		
		//SetValue
		public RuleCall getValuesSetValueParserRuleCall_4_0() { return cValuesSetValueParserRuleCall_4_0; }
		
		//("," values+=SetValue)*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//values+=SetValue
		public Assignment getValuesAssignment_5_1() { return cValuesAssignment_5_1; }
		
		//SetValue
		public RuleCall getValuesSetValueParserRuleCall_5_1_0() { return cValuesSetValueParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class SetValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.eventBDSL.EventBDSL.SetValue");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//SetValue:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.eventBDSL.EventBDSL.Variable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Variable:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class Invariant1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.eventBDSL.EventBDSL.Invariant1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cSolidusSolidusKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cCommentAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cCommentSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cCommentAssignment_0_1.eContents().get(0);
		private final Assignment cTypagePredicatesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cTypagePredicatesAlternatives_1_0 = (Alternatives)cTypagePredicatesAssignment_1.eContents().get(0);
		private final RuleCall cTypagePredicatesTypagePredicate1ParserRuleCall_1_0_0 = (RuleCall)cTypagePredicatesAlternatives_1_0.eContents().get(0);
		private final RuleCall cTypagePredicatesTypagePredicate2ParserRuleCall_1_0_1 = (RuleCall)cTypagePredicatesAlternatives_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAmpersandKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypagePredicatesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cTypagePredicatesAlternatives_2_1_0 = (Alternatives)cTypagePredicatesAssignment_2_1.eContents().get(0);
		private final RuleCall cTypagePredicatesTypagePredicate1ParserRuleCall_2_1_0_0 = (RuleCall)cTypagePredicatesAlternatives_2_1_0.eContents().get(0);
		private final RuleCall cTypagePredicatesTypagePredicate2ParserRuleCall_2_1_0_1 = (RuleCall)cTypagePredicatesAlternatives_2_1_0.eContents().get(1);
		
		//Invariant1:
		//	('//' comment=STRING)?
		//	typagePredicates+=(TypagePredicate1 | TypagePredicate2) ("&" typagePredicates+=(TypagePredicate1 |
		//	TypagePredicate2))*;
		@Override public ParserRule getRule() { return rule; }
		
		//('//' comment=STRING)? typagePredicates+=(TypagePredicate1 | TypagePredicate2) ("&" typagePredicates+=(TypagePredicate1
		//| TypagePredicate2))*
		public Group getGroup() { return cGroup; }
		
		//('//' comment=STRING)?
		public Group getGroup_0() { return cGroup_0; }
		
		//'//'
		public Keyword getSolidusSolidusKeyword_0_0() { return cSolidusSolidusKeyword_0_0; }
		
		//comment=STRING
		public Assignment getCommentAssignment_0_1() { return cCommentAssignment_0_1; }
		
		//STRING
		public RuleCall getCommentSTRINGTerminalRuleCall_0_1_0() { return cCommentSTRINGTerminalRuleCall_0_1_0; }
		
		//typagePredicates+=(TypagePredicate1 | TypagePredicate2)
		public Assignment getTypagePredicatesAssignment_1() { return cTypagePredicatesAssignment_1; }
		
		//(TypagePredicate1 | TypagePredicate2)
		public Alternatives getTypagePredicatesAlternatives_1_0() { return cTypagePredicatesAlternatives_1_0; }
		
		//TypagePredicate1
		public RuleCall getTypagePredicatesTypagePredicate1ParserRuleCall_1_0_0() { return cTypagePredicatesTypagePredicate1ParserRuleCall_1_0_0; }
		
		//TypagePredicate2
		public RuleCall getTypagePredicatesTypagePredicate2ParserRuleCall_1_0_1() { return cTypagePredicatesTypagePredicate2ParserRuleCall_1_0_1; }
		
		//("&" typagePredicates+=(TypagePredicate1 | TypagePredicate2))*
		public Group getGroup_2() { return cGroup_2; }
		
		//"&"
		public Keyword getAmpersandKeyword_2_0() { return cAmpersandKeyword_2_0; }
		
		//typagePredicates+=(TypagePredicate1 | TypagePredicate2)
		public Assignment getTypagePredicatesAssignment_2_1() { return cTypagePredicatesAssignment_2_1; }
		
		//(TypagePredicate1 | TypagePredicate2)
		public Alternatives getTypagePredicatesAlternatives_2_1_0() { return cTypagePredicatesAlternatives_2_1_0; }
		
		//TypagePredicate1
		public RuleCall getTypagePredicatesTypagePredicate1ParserRuleCall_2_1_0_0() { return cTypagePredicatesTypagePredicate1ParserRuleCall_2_1_0_0; }
		
		//TypagePredicate2
		public RuleCall getTypagePredicatesTypagePredicate2ParserRuleCall_2_1_0_1() { return cTypagePredicatesTypagePredicate2ParserRuleCall_2_1_0_1; }
	}
	public class TypagePredicate1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.eventBDSL.EventBDSL.TypagePredicate1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameVariableCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameVariableIDTerminalRuleCall_0_0_1 = (RuleCall)cNameVariableCrossReference_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cValueSetCrossReference_2_0 = (CrossReference)cValueAssignment_2.eContents().get(0);
		private final RuleCall cValueSetIDTerminalRuleCall_2_0_1 = (RuleCall)cValueSetCrossReference_2_0.eContents().get(1);
		
		////Var_VEHICLE : VEHICLE
		//TypagePredicate1:
		//	name=[Variable] ":" value=[Set];
		@Override public ParserRule getRule() { return rule; }
		
		//name=[Variable] ":" value=[Set]
		public Group getGroup() { return cGroup; }
		
		//name=[Variable]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//[Variable]
		public CrossReference getNameVariableCrossReference_0_0() { return cNameVariableCrossReference_0_0; }
		
		//ID
		public RuleCall getNameVariableIDTerminalRuleCall_0_0_1() { return cNameVariableIDTerminalRuleCall_0_0_1; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=[Set]
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//[Set]
		public CrossReference getValueSetCrossReference_2_0() { return cValueSetCrossReference_2_0; }
		
		//ID
		public RuleCall getValueSetIDTerminalRuleCall_2_0_1() { return cValueSetIDTerminalRuleCall_2_0_1; }
	}
	public class TypagePredicate2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.eventBDSL.EventBDSL.TypagePredicate2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameVariableCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameVariableIDTerminalRuleCall_0_0_1 = (RuleCall)cNameVariableCrossReference_0_0.eContents().get(1);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueEVENTB_TYPE_KEYWORDTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		////Var_BOOL : TRUE/FALSE
		//TypagePredicate2:
		//	name=[Variable] ":" value=EVENTB_TYPE_KEYWORD;
		@Override public ParserRule getRule() { return rule; }
		
		//name=[Variable] ":" value=EVENTB_TYPE_KEYWORD
		public Group getGroup() { return cGroup; }
		
		//name=[Variable]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//[Variable]
		public CrossReference getNameVariableCrossReference_0_0() { return cNameVariableCrossReference_0_0; }
		
		//ID
		public RuleCall getNameVariableIDTerminalRuleCall_0_0_1() { return cNameVariableIDTerminalRuleCall_0_0_1; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//value=EVENTB_TYPE_KEYWORD
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//EVENTB_TYPE_KEYWORD
		public RuleCall getValueEVENTB_TYPE_KEYWORDTerminalRuleCall_2_0() { return cValueEVENTB_TYPE_KEYWORDTerminalRuleCall_2_0; }
	}
	public class LeftPartPredicateSubListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.eventBDSL.EventBDSL.LeftPartPredicateSubList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftPartPredicateListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftPartPredicateListDisconjuctionParserRuleCall_1_0 = (RuleCall)cLeftPartPredicateListAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightPartPredicateListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightPartPredicateListDisconjuctionParserRuleCall_3_0 = (RuleCall)cRightPartPredicateListAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//LeftPartPredicateSubList:
		//	'(' leftPartPredicateList=Disconjuction "=>" rightPartPredicateList=Disconjuction ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' leftPartPredicateList=Disconjuction "=>" rightPartPredicateList=Disconjuction ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//leftPartPredicateList=Disconjuction
		public Assignment getLeftPartPredicateListAssignment_1() { return cLeftPartPredicateListAssignment_1; }
		
		//Disconjuction
		public RuleCall getLeftPartPredicateListDisconjuctionParserRuleCall_1_0() { return cLeftPartPredicateListDisconjuctionParserRuleCall_1_0; }
		
		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_2() { return cEqualsSignGreaterThanSignKeyword_2; }
		
		//rightPartPredicateList=Disconjuction
		public Assignment getRightPartPredicateListAssignment_3() { return cRightPartPredicateListAssignment_3; }
		
		//Disconjuction
		public RuleCall getRightPartPredicateListDisconjuctionParserRuleCall_3_0() { return cRightPartPredicateListDisconjuctionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class DisconjuctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.eventBDSL.EventBDSL.Disconjuction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConjuctionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cDisconjuctionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cOrKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightConjuctionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Disconjuction Expression:
		//	Conjuction ({Disconjuction.left=current} 'or' right=Conjuction)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Conjuction ({Disconjuction.left=current} 'or' right=Conjuction)*
		public Group getGroup() { return cGroup; }
		
		//Conjuction
		public RuleCall getConjuctionParserRuleCall_0() { return cConjuctionParserRuleCall_0; }
		
		//({Disconjuction.left=current} 'or' right=Conjuction)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Disconjuction.left=current}
		public Action getDisconjuctionLeftAction_1_0() { return cDisconjuctionLeftAction_1_0; }
		
		//'or'
		public Keyword getOrKeyword_1_1() { return cOrKeyword_1_1; }
		
		//right=Conjuction
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Conjuction
		public RuleCall getRightConjuctionParserRuleCall_1_2_0() { return cRightConjuctionParserRuleCall_1_2_0; }
	}
	public class ConjuctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.eventBDSL.EventBDSL.Conjuction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cConjuctionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Conjuction Expression:
		//	Primary ({Conjuction.left=current} '&' right=Primary)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({Conjuction.left=current} '&' right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({Conjuction.left=current} '&' right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Conjuction.left=current}
		public Action getConjuctionLeftAction_1_0() { return cConjuctionLeftAction_1_0; }
		
		//'&'
		public Keyword getAmpersandKeyword_1_1() { return cAmpersandKeyword_1_1; }
		
		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.eventBDSL.EventBDSL.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLeftPartPredicateParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cDisconjuctionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Primary Expression:
		//	LeftPartPredicate | '(' Disconjuction ')';
		@Override public ParserRule getRule() { return rule; }
		
		//LeftPartPredicate | '(' Disconjuction ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LeftPartPredicate
		public RuleCall getLeftPartPredicateParserRuleCall_0() { return cLeftPartPredicateParserRuleCall_0; }
		
		//'(' Disconjuction ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//Disconjuction
		public RuleCall getDisconjuctionParserRuleCall_1_1() { return cDisconjuctionParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class LeftPartPredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.eventBDSL.EventBDSL.LeftPartPredicate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVal1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVal1VariableCrossReference_0_0 = (CrossReference)cVal1Assignment_0.eContents().get(0);
		private final RuleCall cVal1VariableIDTerminalRuleCall_0_0_1 = (RuleCall)cVal1VariableCrossReference_0_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cSolidusEqualsSignKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cVal2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVal2MyIDParserRuleCall_2_0 = (RuleCall)cVal2Assignment_2.eContents().get(0);
		
		////var1 = val1
		//LeftPartPredicate:
		//	val1=[Variable] ("=" | "/=") val2=MyID;
		@Override public ParserRule getRule() { return rule; }
		
		//val1=[Variable] ("=" | "/=") val2=MyID
		public Group getGroup() { return cGroup; }
		
		//val1=[Variable]
		public Assignment getVal1Assignment_0() { return cVal1Assignment_0; }
		
		//[Variable]
		public CrossReference getVal1VariableCrossReference_0_0() { return cVal1VariableCrossReference_0_0; }
		
		//ID
		public RuleCall getVal1VariableIDTerminalRuleCall_0_0_1() { return cVal1VariableIDTerminalRuleCall_0_0_1; }
		
		//("=" | "/=")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//"/="
		public Keyword getSolidusEqualsSignKeyword_1_1() { return cSolidusEqualsSignKeyword_1_1; }
		
		//val2=MyID
		public Assignment getVal2Assignment_2() { return cVal2Assignment_2; }
		
		//MyID
		public RuleCall getVal2MyIDParserRuleCall_2_0() { return cVal2MyIDParserRuleCall_2_0; }
	}
	public class MyIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.eventBDSL.EventBDSL.MyID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEVENTB_TYPE_KEYWORDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MyID:
		//	ID | EVENTB_TYPE_KEYWORD;
		@Override public ParserRule getRule() { return rule; }
		
		//ID | EVENTB_TYPE_KEYWORD
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//EVENTB_TYPE_KEYWORD
		public RuleCall getEVENTB_TYPE_KEYWORDTerminalRuleCall_1() { return cEVENTB_TYPE_KEYWORDTerminalRuleCall_1; }
	}
	public class InitializationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.eventBDSL.EventBDSL.Initialization");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameVariableCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameVariableIDTerminalRuleCall_0_0_1 = (RuleCall)cNameVariableCrossReference_0_0.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueMyIDParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Initialization:
		//	name=[Variable] ":=" value=MyID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=[Variable] ":=" value=MyID
		public Group getGroup() { return cGroup; }
		
		//name=[Variable]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//[Variable]
		public CrossReference getNameVariableCrossReference_0_0() { return cNameVariableCrossReference_0_0; }
		
		//ID
		public RuleCall getNameVariableIDTerminalRuleCall_0_0_1() { return cNameVariableIDTerminalRuleCall_0_0_1; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//value=MyID
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//MyID
		public RuleCall getValueMyIDParserRuleCall_2_0() { return cValueMyIDParserRuleCall_2_0; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.eventBDSL.EventBDSL.Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommentSTRINGTerminalRuleCall_0_0 = (RuleCall)cCommentAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLineFeedKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cANYKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cParametersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cParametersParameterCrossReference_5_0 = (CrossReference)cParametersAssignment_5.eContents().get(0);
		private final RuleCall cParametersParameterIDTerminalRuleCall_5_0_1 = (RuleCall)cParametersParameterCrossReference_5_0.eContents().get(1);
		private final Keyword cWHEREKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cGuardsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cGuardsGuardParserRuleCall_7_0 = (RuleCall)cGuardsAssignment_7.eContents().get(0);
		private final Keyword cTHENKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cActionsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cActionsActionsRuleParserRuleCall_9_0 = (RuleCall)cActionsAssignment_9.eContents().get(0);
		private final Keyword cENDKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Event:
		//	comment=STRING?
		//	name=ID '=' '\n'*
		//	'ANY' parameters+=[Parameter]+
		//	'WHERE' guards=Guard
		//	'THEN' actions=ActionsRule
		//	'END';
		@Override public ParserRule getRule() { return rule; }
		
		//comment=STRING? name=ID '=' '\n'* 'ANY' parameters+=[Parameter]+ 'WHERE' guards=Guard 'THEN' actions=ActionsRule 'END'
		public Group getGroup() { return cGroup; }
		
		//comment=STRING?
		public Assignment getCommentAssignment_0() { return cCommentAssignment_0; }
		
		//STRING
		public RuleCall getCommentSTRINGTerminalRuleCall_0_0() { return cCommentSTRINGTerminalRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//'\n'*
		public Keyword getLineFeedKeyword_3() { return cLineFeedKeyword_3; }
		
		//'ANY'
		public Keyword getANYKeyword_4() { return cANYKeyword_4; }
		
		//parameters+=[Parameter]+
		public Assignment getParametersAssignment_5() { return cParametersAssignment_5; }
		
		//[Parameter]
		public CrossReference getParametersParameterCrossReference_5_0() { return cParametersParameterCrossReference_5_0; }
		
		//ID
		public RuleCall getParametersParameterIDTerminalRuleCall_5_0_1() { return cParametersParameterIDTerminalRuleCall_5_0_1; }
		
		//'WHERE'
		public Keyword getWHEREKeyword_6() { return cWHEREKeyword_6; }
		
		//guards=Guard
		public Assignment getGuardsAssignment_7() { return cGuardsAssignment_7; }
		
		//Guard
		public RuleCall getGuardsGuardParserRuleCall_7_0() { return cGuardsGuardParserRuleCall_7_0; }
		
		//'THEN'
		public Keyword getTHENKeyword_8() { return cTHENKeyword_8; }
		
		//actions=ActionsRule
		public Assignment getActionsAssignment_9() { return cActionsAssignment_9; }
		
		//ActionsRule
		public RuleCall getActionsActionsRuleParserRuleCall_9_0() { return cActionsActionsRuleParserRuleCall_9_0; }
		
		//'END'
		public Keyword getENDKeyword_10() { return cENDKeyword_10; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.eventBDSL.EventBDSL.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAssignedSetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAssignedSetSetCrossReference_2_0 = (CrossReference)cAssignedSetAssignment_2.eContents().get(0);
		private final RuleCall cAssignedSetSetIDTerminalRuleCall_2_0_1 = (RuleCall)cAssignedSetSetCrossReference_2_0.eContents().get(1);
		
		//Parameter:
		//	name=ID ":" assignedSet=[Set];
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ":" assignedSet=[Set]
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//assignedSet=[Set]
		public Assignment getAssignedSetAssignment_2() { return cAssignedSetAssignment_2; }
		
		//[Set]
		public CrossReference getAssignedSetSetCrossReference_2_0() { return cAssignedSetSetCrossReference_2_0; }
		
		//ID
		public RuleCall getAssignedSetSetIDTerminalRuleCall_2_0_1() { return cAssignedSetSetIDTerminalRuleCall_2_0_1; }
	}
	public class GuardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.eventBDSL.EventBDSL.Guard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cGuardExp1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cGuardExp1ParameterParserRuleCall_0_0 = (RuleCall)cGuardExp1Assignment_0.eContents().get(0);
		private final Keyword cAmpersandKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGuardExp2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cGuardExp2ParameterCrossReference_2_0 = (CrossReference)cGuardExp2Assignment_2.eContents().get(0);
		private final RuleCall cGuardExp2ParameterIDTerminalRuleCall_2_0_1 = (RuleCall)cGuardExp2ParameterCrossReference_2_0.eContents().get(1);
		private final Keyword cSolidusEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cGuardExp3Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cGuardExp3VariableCrossReference_4_0 = (CrossReference)cGuardExp3Assignment_4.eContents().get(0);
		private final RuleCall cGuardExp3VariableIDTerminalRuleCall_4_0_1 = (RuleCall)cGuardExp3VariableCrossReference_4_0.eContents().get(1);
		private final Keyword cAmpersandKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cGuardExp4Assignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cGuardExp4DisconjuctionParserRuleCall_6_0 = (RuleCall)cGuardExp4Assignment_6.eContents().get(0);
		
		//Guard:
		//	guardExp1=Parameter "&" guardExp2=[Parameter] "/=" guardExp3=[Variable]
		//	"&" guardExp4=Disconjuction;
		@Override public ParserRule getRule() { return rule; }
		
		//guardExp1=Parameter "&" guardExp2=[Parameter] "/=" guardExp3=[Variable] "&" guardExp4=Disconjuction
		public Group getGroup() { return cGroup; }
		
		//guardExp1=Parameter
		public Assignment getGuardExp1Assignment_0() { return cGuardExp1Assignment_0; }
		
		//Parameter
		public RuleCall getGuardExp1ParameterParserRuleCall_0_0() { return cGuardExp1ParameterParserRuleCall_0_0; }
		
		//"&"
		public Keyword getAmpersandKeyword_1() { return cAmpersandKeyword_1; }
		
		//guardExp2=[Parameter]
		public Assignment getGuardExp2Assignment_2() { return cGuardExp2Assignment_2; }
		
		//[Parameter]
		public CrossReference getGuardExp2ParameterCrossReference_2_0() { return cGuardExp2ParameterCrossReference_2_0; }
		
		//ID
		public RuleCall getGuardExp2ParameterIDTerminalRuleCall_2_0_1() { return cGuardExp2ParameterIDTerminalRuleCall_2_0_1; }
		
		//"/="
		public Keyword getSolidusEqualsSignKeyword_3() { return cSolidusEqualsSignKeyword_3; }
		
		//guardExp3=[Variable]
		public Assignment getGuardExp3Assignment_4() { return cGuardExp3Assignment_4; }
		
		//[Variable]
		public CrossReference getGuardExp3VariableCrossReference_4_0() { return cGuardExp3VariableCrossReference_4_0; }
		
		//ID
		public RuleCall getGuardExp3VariableIDTerminalRuleCall_4_0_1() { return cGuardExp3VariableIDTerminalRuleCall_4_0_1; }
		
		//"&"
		public Keyword getAmpersandKeyword_5() { return cAmpersandKeyword_5; }
		
		//guardExp4=Disconjuction
		public Assignment getGuardExp4Assignment_6() { return cGuardExp4Assignment_6; }
		
		//Disconjuction
		public RuleCall getGuardExp4DisconjuctionParserRuleCall_6_0() { return cGuardExp4DisconjuctionParserRuleCall_6_0; }
	}
	public class ActionsRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.eventBDSL.EventBDSL.ActionsRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActionListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cActionListActionParserRuleCall_0_0 = (RuleCall)cActionListAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cActionListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cActionListActionParserRuleCall_1_1_0 = (RuleCall)cActionListAssignment_1_1.eContents().get(0);
		
		//ActionsRule:
		//	actionList+=Action (";" actionList+=Action)*;
		@Override public ParserRule getRule() { return rule; }
		
		//actionList+=Action (";" actionList+=Action)*
		public Group getGroup() { return cGroup; }
		
		//actionList+=Action
		public Assignment getActionListAssignment_0() { return cActionListAssignment_0; }
		
		//Action
		public RuleCall getActionListActionParserRuleCall_0_0() { return cActionListActionParserRuleCall_0_0; }
		
		//(";" actionList+=Action)*
		public Group getGroup_1() { return cGroup_1; }
		
		//";"
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }
		
		//actionList+=Action
		public Assignment getActionListAssignment_1_1() { return cActionListAssignment_1_1; }
		
		//Action
		public RuleCall getActionListActionParserRuleCall_1_1_0() { return cActionListActionParserRuleCall_1_1_0; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.eventBDSL.EventBDSL.Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActionLeftPartAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cActionLeftPartVariableCrossReference_0_0 = (CrossReference)cActionLeftPartAssignment_0.eContents().get(0);
		private final RuleCall cActionLeftPartVariableIDTerminalRuleCall_0_0_1 = (RuleCall)cActionLeftPartVariableCrossReference_0_0.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cActionRightPartAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cActionRightPartMyIDParserRuleCall_2_0 = (RuleCall)cActionRightPartAssignment_2.eContents().get(0);
		
		//Action:
		//	actionLeftPart=[Variable] ":=" actionRightPart=MyID;
		@Override public ParserRule getRule() { return rule; }
		
		//actionLeftPart=[Variable] ":=" actionRightPart=MyID
		public Group getGroup() { return cGroup; }
		
		//actionLeftPart=[Variable]
		public Assignment getActionLeftPartAssignment_0() { return cActionLeftPartAssignment_0; }
		
		//[Variable]
		public CrossReference getActionLeftPartVariableCrossReference_0_0() { return cActionLeftPartVariableCrossReference_0_0; }
		
		//ID
		public RuleCall getActionLeftPartVariableIDTerminalRuleCall_0_0_1() { return cActionLeftPartVariableIDTerminalRuleCall_0_0_1; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//actionRightPart=MyID
		public Assignment getActionRightPartAssignment_2() { return cActionRightPartAssignment_2; }
		
		//MyID
		public RuleCall getActionRightPartMyIDParserRuleCall_2_0() { return cActionRightPartMyIDParserRuleCall_2_0; }
	}
	
	
	private final MachineElements pMachine;
	private final SetElements pSet;
	private final SetValueElements pSetValue;
	private final VariableElements pVariable;
	private final Invariant1Elements pInvariant1;
	private final TypagePredicate1Elements pTypagePredicate1;
	private final TypagePredicate2Elements pTypagePredicate2;
	private final LeftPartPredicateSubListElements pLeftPartPredicateSubList;
	private final DisconjuctionElements pDisconjuction;
	private final ConjuctionElements pConjuction;
	private final PrimaryElements pPrimary;
	private final LeftPartPredicateElements pLeftPartPredicate;
	private final MyIDElements pMyID;
	private final InitializationElements pInitialization;
	private final EventElements pEvent;
	private final ParameterElements pParameter;
	private final GuardElements pGuard;
	private final ActionsRuleElements pActionsRule;
	private final ActionElements pAction;
	private final TerminalRule tEVENTB_TYPE_KEYWORD;
	private final TerminalRule tSTRING;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public EventBDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMachine = new MachineElements();
		this.pSet = new SetElements();
		this.pSetValue = new SetValueElements();
		this.pVariable = new VariableElements();
		this.pInvariant1 = new Invariant1Elements();
		this.pTypagePredicate1 = new TypagePredicate1Elements();
		this.pTypagePredicate2 = new TypagePredicate2Elements();
		this.pLeftPartPredicateSubList = new LeftPartPredicateSubListElements();
		this.pDisconjuction = new DisconjuctionElements();
		this.pConjuction = new ConjuctionElements();
		this.pPrimary = new PrimaryElements();
		this.pLeftPartPredicate = new LeftPartPredicateElements();
		this.pMyID = new MyIDElements();
		this.pInitialization = new InitializationElements();
		this.pEvent = new EventElements();
		this.pParameter = new ParameterElements();
		this.pGuard = new GuardElements();
		this.pActionsRule = new ActionsRuleElements();
		this.pAction = new ActionElements();
		this.tEVENTB_TYPE_KEYWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.eventBDSL.EventBDSL.EVENTB_TYPE_KEYWORD");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.eventBDSL.EventBDSL.STRING");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.eventBDSL.EventBDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Machine:
	//	'SYSTEM' name=ID ('SETS' sets+=Set (";" sets+=Set)*)? ('VARIABLES' variables+=Variable ("," variables+=Variable)*)?
	//	('INVARIANT' invariants1=Invariant1 ("&" invariantsLeftPart2+=LeftPartPredicateSubList ("&"
	//	invariantsLeftPart2+=LeftPartPredicateSubList)*)?)? ('INITIALISATION' initializations+=Initialization ("||"
	//	initializations+=Initialization)*)? ('EVENTS' events+=Event (";" events+=Event)*)?
	//	'END';
	public MachineElements getMachineAccess() {
		return pMachine;
	}
	
	public ParserRule getMachineRule() {
		return getMachineAccess().getRule();
	}
	
	//Set:
	//	('//' comment=STRING)?
	//	name=ID '=' '{' values+=SetValue ("," values+=SetValue)* '}';
	public SetElements getSetAccess() {
		return pSet;
	}
	
	public ParserRule getSetRule() {
		return getSetAccess().getRule();
	}
	
	//SetValue:
	//	name=ID;
	public SetValueElements getSetValueAccess() {
		return pSetValue;
	}
	
	public ParserRule getSetValueRule() {
		return getSetValueAccess().getRule();
	}
	
	//Variable:
	//	name=ID;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Invariant1:
	//	('//' comment=STRING)?
	//	typagePredicates+=(TypagePredicate1 | TypagePredicate2) ("&" typagePredicates+=(TypagePredicate1 |
	//	TypagePredicate2))*;
	public Invariant1Elements getInvariant1Access() {
		return pInvariant1;
	}
	
	public ParserRule getInvariant1Rule() {
		return getInvariant1Access().getRule();
	}
	
	////Var_VEHICLE : VEHICLE
	//TypagePredicate1:
	//	name=[Variable] ":" value=[Set];
	public TypagePredicate1Elements getTypagePredicate1Access() {
		return pTypagePredicate1;
	}
	
	public ParserRule getTypagePredicate1Rule() {
		return getTypagePredicate1Access().getRule();
	}
	
	////Var_BOOL : TRUE/FALSE
	//TypagePredicate2:
	//	name=[Variable] ":" value=EVENTB_TYPE_KEYWORD;
	public TypagePredicate2Elements getTypagePredicate2Access() {
		return pTypagePredicate2;
	}
	
	public ParserRule getTypagePredicate2Rule() {
		return getTypagePredicate2Access().getRule();
	}
	
	//LeftPartPredicateSubList:
	//	'(' leftPartPredicateList=Disconjuction "=>" rightPartPredicateList=Disconjuction ')';
	public LeftPartPredicateSubListElements getLeftPartPredicateSubListAccess() {
		return pLeftPartPredicateSubList;
	}
	
	public ParserRule getLeftPartPredicateSubListRule() {
		return getLeftPartPredicateSubListAccess().getRule();
	}
	
	//Disconjuction Expression:
	//	Conjuction ({Disconjuction.left=current} 'or' right=Conjuction)*;
	public DisconjuctionElements getDisconjuctionAccess() {
		return pDisconjuction;
	}
	
	public ParserRule getDisconjuctionRule() {
		return getDisconjuctionAccess().getRule();
	}
	
	//Conjuction Expression:
	//	Primary ({Conjuction.left=current} '&' right=Primary)*;
	public ConjuctionElements getConjuctionAccess() {
		return pConjuction;
	}
	
	public ParserRule getConjuctionRule() {
		return getConjuctionAccess().getRule();
	}
	
	//Primary Expression:
	//	LeftPartPredicate | '(' Disconjuction ')';
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	////var1 = val1
	//LeftPartPredicate:
	//	val1=[Variable] ("=" | "/=") val2=MyID;
	public LeftPartPredicateElements getLeftPartPredicateAccess() {
		return pLeftPartPredicate;
	}
	
	public ParserRule getLeftPartPredicateRule() {
		return getLeftPartPredicateAccess().getRule();
	}
	
	//MyID:
	//	ID | EVENTB_TYPE_KEYWORD;
	public MyIDElements getMyIDAccess() {
		return pMyID;
	}
	
	public ParserRule getMyIDRule() {
		return getMyIDAccess().getRule();
	}
	
	//Initialization:
	//	name=[Variable] ":=" value=MyID;
	public InitializationElements getInitializationAccess() {
		return pInitialization;
	}
	
	public ParserRule getInitializationRule() {
		return getInitializationAccess().getRule();
	}
	
	//Event:
	//	comment=STRING?
	//	name=ID '=' '\n'*
	//	'ANY' parameters+=[Parameter]+
	//	'WHERE' guards=Guard
	//	'THEN' actions=ActionsRule
	//	'END';
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//Parameter:
	//	name=ID ":" assignedSet=[Set];
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Guard:
	//	guardExp1=Parameter "&" guardExp2=[Parameter] "/=" guardExp3=[Variable]
	//	"&" guardExp4=Disconjuction;
	public GuardElements getGuardAccess() {
		return pGuard;
	}
	
	public ParserRule getGuardRule() {
		return getGuardAccess().getRule();
	}
	
	//ActionsRule:
	//	actionList+=Action (";" actionList+=Action)*;
	public ActionsRuleElements getActionsRuleAccess() {
		return pActionsRule;
	}
	
	public ParserRule getActionsRuleRule() {
		return getActionsRuleAccess().getRule();
	}
	
	//Action:
	//	actionLeftPart=[Variable] ":=" actionRightPart=MyID;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//terminal EVENTB_TYPE_KEYWORD:
	//	'BOOL' |
	//	'FALSE' |
	//	'TRUE' |
	//	'NATURAL' |
	//	'NATURAL1' |
	//	'FLOAT' |
	//	'INTEGER';
	public TerminalRule getEVENTB_TYPE_KEYWORDRule() {
		return tEVENTB_TYPE_KEYWORD;
	}
	
	//@Override
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
